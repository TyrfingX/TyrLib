#if SHADOW 
const mat4 DepthBias = 	   mat4(0.5, 0.0, 0.0, 0.0,
				0.0, 0.5, 0.0, 0.0,
				0.0, 0.0, 0.5, 0.0,
				0.5, 0.5, 0.5, 1.0
				);
#endif 

uniform mat4 u_MVPMatrix;       // A constant representing the combined model/view/projection matrix.

#if SHADOW 
uniform mat4 u_DepthMVP; 
#endif 

attribute vec3 a_Position;      // Per-vertex position information we will pass in.
attribute vec2 a_Diffuse;        // Per-vertex diffuse information we will pass in.
attribute vec2 a_TexCoordinate; // Per-vertex texture coordinate information we will pass in.

varying vec2 v_Diffuse;          
varying vec2 v_TexCoordinate;   // This will be passed into the fragment shader.

#if SHADOW 
varying vec4 v_ShadowCoord;	
#endif 
 
// The entry point for our vertex shader.
void main()
{

	vec4 position = vec4(a_Position, 1.0);

	v_Diffuse = a_Diffuse;
 
    // Pass through the texture coordinate.
    v_TexCoordinate = a_TexCoordinate;
 
    // gl_Position is a special variable used to store the final position.
    // Multiply the vertex by the matrix to get the final point in normalized screen coordinates.
    gl_Position = u_MVPMatrix * position;
    
#if SHADOW 
    mat4 DepthBiasMVP = DepthBias * u_DepthMVP;
    v_ShadowCoord = DepthBiasMVP * position;
#endif 
}
