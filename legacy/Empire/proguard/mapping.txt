android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.b:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction remove(android.support.v4.app.Fragment) -> a
    void bumpBackStackNesting(int) -> a
    int commit() -> a
    int commitAllowingStateLoss() -> b
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> c
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.c:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.d:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.DialogFragment -> android.support.v4.app.e:
    int mStyle -> a
    int mTheme -> b
    boolean mCancelable -> c
    boolean mShowsDialog -> d
    int mBackStackId -> e
    android.app.Dialog mDialog -> f
    boolean mViewDestroyed -> g
    boolean mDismissed -> h
    boolean mShownByMe -> i
    void show(android.support.v4.app.FragmentManager,java.lang.String) -> a
    void dismissInternal(boolean) -> a
    int getTheme() -> a
    void onAttach(android.app.Activity) -> a
    void onDetach() -> b
    void onCreate(android.os.Bundle) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
    void onCancel(android.content.DialogInterface) -> onCancel
    void onDismiss(android.content.DialogInterface) -> onDismiss
    void onActivityCreated(android.os.Bundle) -> d
    void onStart() -> c
    void onSaveInstanceState(android.os.Bundle) -> e
    void onStop() -> d
    void onDestroyView() -> e
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    java.util.HashMap sClassMap -> a
    int mState -> j
    android.view.View mAnimatingAway -> k
    int mStateAfterAnimating -> l
    android.os.Bundle mSavedFragmentState -> m
    android.util.SparseArray mSavedViewState -> n
    int mIndex -> o
    java.lang.String mWho -> p
    android.os.Bundle mArguments -> q
    android.support.v4.app.Fragment mTarget -> r
    int mTargetIndex -> s
    int mTargetRequestCode -> t
    boolean mAdded -> u
    boolean mRemoving -> v
    boolean mResumed -> w
    boolean mFromLayout -> x
    boolean mInLayout -> y
    boolean mRestored -> z
    int mBackStackNesting -> A
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> B
    android.support.v4.app.FragmentActivity mActivity -> C
    int mFragmentId -> D
    int mContainerId -> E
    java.lang.String mTag -> F
    boolean mHidden -> G
    boolean mDetached -> H
    boolean mRetainInstance -> I
    boolean mRetaining -> J
    boolean mHasMenu -> K
    boolean mMenuVisible -> L
    boolean mCalled -> M
    int mNextAnim -> N
    android.view.ViewGroup mContainer -> O
    android.view.View mView -> P
    android.view.View mInnerView -> Q
    boolean mDeferStart -> R
    boolean mUserVisibleHint -> S
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> T
    boolean mLoadersStarted -> U
    boolean mCheckedForLoaderManager -> V
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    void restoreViewState() -> f
    void setIndex(int) -> a
    boolean isInBackStack() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.support.v4.app.FragmentActivity getActivity() -> h
    android.support.v4.app.FragmentManager getFragmentManager() -> i
    void onHiddenChanged(boolean) -> b
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> a
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    android.view.View getView() -> j
    void onActivityCreated(android.os.Bundle) -> d
    void onStart() -> c
    void onResume() -> k
    void onSaveInstanceState(android.os.Bundle) -> e
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> l
    void onStop() -> d
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> e
    void onDestroy() -> m
    void initState() -> n
    void onDetach() -> b
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> o
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void performStart() -> p
    void performStop() -> q
    void performReallyStop() -> r
    void performDestroyView() -> s
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.Fragment$InstantiationException:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.f:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.g:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    boolean mCreated -> c
    boolean mResumed -> d
    boolean mStopped -> e
    boolean mReallyStopped -> f
    boolean mRetaining -> g
    boolean mOptionsMenuInvalidated -> h
    boolean mCheckedForLoaderManager -> i
    boolean mLoadersStarted -> j
    android.support.v4.util.SparseArrayCompat mAllLoaderManagers -> k
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> l
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentManager getSupportFragmentManager() -> e
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragmentIndex(int) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(int,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$1 -> android.support.v4.app.h:
    android.support.v4.app.FragmentActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.i:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.j:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    java.util.HashMap children -> c
    java.util.ArrayList fragments -> d
    android.support.v4.util.SparseArrayCompat loaders -> e
android.support.v4.app.FragmentManager -> android.support.v4.app.k:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    void popBackStack(int,int) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.l:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.m:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    boolean mNeedMenuInvalidate -> p
    boolean mStateSaved -> q
    boolean mDestroyed -> r
    java.lang.String mNoTransactionsBecause -> s
    boolean mHavePendingDeferredStart -> t
    android.os.Bundle mStateBundle -> u
    android.util.SparseArray mStateArray -> v
    java.lang.Runnable mExecCommit -> w
    android.view.animation.Interpolator DECELERATE_QUINT -> x
    android.view.animation.Interpolator DECELERATE_CUBIC -> y
    android.view.animation.Interpolator ACCELERATE_QUINT -> z
    android.view.animation.Interpolator ACCELERATE_CUBIC -> A
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void popBackStack(int,int) -> a
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> s
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroy() -> q
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> r
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.n:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$4 -> android.support.v4.app.o:
    int val$id -> a
    int val$flags -> b
    android.support.v4.app.FragmentManagerImpl this$0 -> c
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.p:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.q:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.r:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTransaction -> android.support.v4.app.s:
    android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction remove(android.support.v4.app.Fragment) -> a
    int commit() -> a
    int commitAllowingStateLoss() -> b
android.support.v4.app.LoaderManager -> android.support.v4.app.t:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.u:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.v:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    android.support.v4.app.FragmentActivity mActivity -> d
    boolean mStarted -> e
    boolean mRetaining -> f
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.w:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.x:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.SuperNotCalledException:
android.support.v4.content.Loader -> android.support.v4.content.a:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.content.b:
android.support.v4.content.ModernAsyncTask -> android.support.v4.content.ModernAsyncTask:
    java.util.concurrent.ThreadFactory sThreadFactory -> b
    java.util.concurrent.BlockingQueue sPoolWorkQueue -> c
    java.util.concurrent.Executor THREAD_POOL_EXECUTOR -> a
    android.support.v4.content.ModernAsyncTask$InternalHandler sHandler -> d
    java.util.concurrent.Executor sDefaultExecutor -> e
    java.util.concurrent.FutureTask mFuture -> f
    android.support.v4.content.ModernAsyncTask$Status mStatus -> g
    void onPostExecute(java.lang.Object) -> a
    void onProgressUpdate(java.lang.Object[]) -> a
    void onCancelled(java.lang.Object) -> b
    void onCancelled() -> a
    boolean isCancelled() -> b
    void finish(java.lang.Object) -> c
    void access$500(android.support.v4.content.ModernAsyncTask,java.lang.Object) -> a
android.support.v4.content.ModernAsyncTask$1 -> android.support.v4.content.c:
    java.util.concurrent.atomic.AtomicInteger mCount -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
android.support.v4.content.ModernAsyncTask$AsyncTaskResult -> android.support.v4.content.d:
    android.support.v4.content.ModernAsyncTask mTask -> a
    java.lang.Object[] mData -> b
android.support.v4.content.ModernAsyncTask$InternalHandler -> android.support.v4.content.e:
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.content.ModernAsyncTask$Status -> android.support.v4.content.ModernAsyncTask$Status:
    android.support.v4.content.ModernAsyncTask$Status PENDING -> PENDING
    android.support.v4.content.ModernAsyncTask$Status RUNNING -> RUNNING
    android.support.v4.content.ModernAsyncTask$Status FINISHED -> FINISHED
    android.support.v4.content.ModernAsyncTask$Status[] $VALUES -> a
    android.support.v4.content.ModernAsyncTask$Status[] values() -> values
    android.support.v4.content.ModernAsyncTask$Status valueOf(java.lang.String) -> valueOf
android.support.v4.os.ParcelableCompat -> android.support.v4.a.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.a.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.a.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.a.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.a.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.DebugUtils -> android.support.v4.b.a:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.b.b:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.SparseArrayCompat -> android.support.v4.b.c:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    java.lang.Object get(int) -> a
    java.lang.Object get(int,java.lang.Object) -> a
    void delete(int) -> b
    void remove(int) -> c
    void removeAt(int) -> d
    void gc() -> c
    void put(int,java.lang.Object) -> b
    int size() -> a
    int keyAt(int) -> e
    java.lang.Object valueAt(int) -> f
    void clear() -> b
    int binarySearch(int[],int,int,int) -> a
    int idealByteArraySize(int) -> g
    int idealIntArraySize(int) -> h
android.support.v4.view.KeyEventCompat -> android.support.v4.view.a:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.b:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.c:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.d:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.e:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> a
android.support.v4.view.MotionEventCompat -> android.support.v4.view.f:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionIndex(android.view.MotionEvent) -> a
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.g:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.h:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.i:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.j:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.PagerAdapter -> android.support.v4.view.k:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> b
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    float getPageWidth(int) -> a
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.l:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.m:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.n:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.o:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.p:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.ViewCompat -> android.support.v4.view.q:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.r:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    long getFrameTime() -> a
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.s:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.t:
    long getFrameTime() -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.u:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.v:
    void postInvalidateOnAnimation(android.view.View) -> b
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.w:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.x:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.y:
    long getFrameTime() -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.z:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.aa:
    void postInvalidateOnAnimation(android.view.View) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    java.util.Comparator COMPARATOR -> b
    android.view.animation.Interpolator sInterpolator -> c
    java.util.ArrayList mItems -> d
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> e
    android.graphics.Rect mTempRect -> f
    android.support.v4.view.PagerAdapter mAdapter -> g
    int mCurItem -> h
    int mRestoredCurItem -> i
    android.os.Parcelable mRestoredAdapterState -> j
    java.lang.ClassLoader mRestoredClassLoader -> k
    android.widget.Scroller mScroller -> l
    android.support.v4.view.ViewPager$PagerObserver mObserver -> m
    int mPageMargin -> n
    android.graphics.drawable.Drawable mMarginDrawable -> o
    int mTopPageBounds -> p
    int mBottomPageBounds -> q
    float mFirstOffset -> r
    float mLastOffset -> s
    int mChildWidthMeasureSpec -> t
    int mChildHeightMeasureSpec -> u
    boolean mInLayout -> v
    boolean mScrollingCacheEnabled -> w
    boolean mPopulatePending -> x
    int mOffscreenPageLimit -> y
    boolean mIsBeingDragged -> z
    boolean mIsUnableToDrag -> A
    int mDefaultGutterSize -> B
    int mGutterSize -> C
    int mTouchSlop -> D
    float mInitialMotionX -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    int mActivePointerId -> H
    android.view.VelocityTracker mVelocityTracker -> I
    int mMinimumVelocity -> J
    int mMaximumVelocity -> K
    int mFlingDistance -> L
    int mCloseEnough -> M
    boolean mFakeDragging -> N
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> O
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> P
    boolean mFirstLayout -> Q
    boolean mNeedCalculatePageOffsets -> R
    boolean mCalledSuper -> S
    int mDecorChildCount -> T
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> U
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> V
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> W
    int mScrollState -> Z
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> f
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> a
    void populate() -> b
    void populate(int) -> a
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll() -> g
    boolean isGutterDrag(float,float) -> a
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> h
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> i
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> c
    boolean pageRight() -> d
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    int[] access$300() -> e
android.support.v4.view.ViewPager$1 -> android.support.v4.view.ab:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.ac:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.ad:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.ae:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.af:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.ag:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.ah:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.ai:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.aj:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.c.a:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.c.b:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.c.c:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.c.d:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.c.e:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
com.tyrfing.games.id17.Action -> com.tyrfing.games.id17.Action:
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    java.lang.String disabledText -> disabledText
    java.lang.String getDisabledText() -> getDisabledText
    void setDisabledText(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> setDisabledText
    java.lang.String getName() -> getName
    void selectedByUser(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> selectedByUser
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
com.tyrfing.games.id17.ActionCategory -> com.tyrfing.games.id17.a:
    java.util.List actions -> a
    java.lang.String name -> b
    java.lang.String getName() -> a
    int getCountActions() -> b
    com.tyrfing.games.id17.Action getAction(int) -> a
    void addAction(com.tyrfing.games.id17.Action) -> a
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.ChatListener -> com.tyrfing.games.id17.b:
    float passedTime -> c
    com.tyrlib2.gui.Label writeField -> d
    boolean flip -> e
    java.lang.String text -> f
    java.util.List chatEntries -> g
    com.tyrlib2.math.Vector2 CHAT_POS -> a
    com.tyrlib2.util.Color[] chatColors -> b
    void onSurfaceCreated() -> onSurfaceCreated
    void onSurfaceChanged() -> onSurfaceChanged
    void onFrameRendered(float) -> onFrameRendered
    void onNewConnection(com.tyrlib2.networking.Connection) -> onNewConnection
    void onConnectionLost(com.tyrlib2.networking.Connection) -> onConnectionLost
    void onReceivedData(com.tyrlib2.networking.Connection,java.lang.Object) -> onReceivedData
    void addChatEntry(java.lang.String) -> a
    boolean onPress(com.tyrlib2.input.IKeyboardEvent) -> a
    boolean onRelease(com.tyrlib2.input.IKeyboardEvent) -> b
com.tyrfing.games.id17.ChatListener$1 -> com.tyrfing.games.id17.c:
    com.tyrfing.games.id17.houses.HouseController hc -> a
    com.tyrfing.games.id17.ChatListener this$0 -> b
    void run() -> run
com.tyrfing.games.id17.ChatListener$2 -> com.tyrfing.games.id17.d:
    com.tyrfing.games.id17.ChatListener this$0 -> a
    java.lang.String val$s -> b
    void run() -> run
com.tyrfing.games.id17.ChatListener$3 -> com.tyrfing.games.id17.e:
    com.tyrfing.games.id17.ChatListener this$0 -> a
    java.lang.String val$message -> b
    void run() -> run
com.tyrfing.games.id17.ChatListener$4 -> com.tyrfing.games.id17.f:
    com.tyrfing.games.id17.ChatListener this$0 -> a
    java.lang.String val$message -> b
    void run() -> run
com.tyrfing.games.id17.ChatListener$5 -> com.tyrfing.games.id17.g:
    com.tyrfing.games.id17.ChatListener this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.ChatListener$ChatEntry -> com.tyrfing.games.id17.h:
    com.tyrlib2.gui.Label label -> a
    float passedTime -> b
com.tyrfing.games.id17.EmpireActivity -> com.tyrfing.games.id17.EmpireActivity:
    void go() -> f
    void onBackPressed() -> onBackPressed
    void close() -> g
    void onDestroy() -> onDestroy
com.tyrfing.games.id17.EmpireActivity$1 -> com.tyrfing.games.id17.i:
    com.tyrfing.games.id17.EmpireActivity this$0 -> a
    void run() -> run
com.tyrfing.games.id17.EmpireFrameListener -> com.tyrfing.games.id17.EmpireFrameListener:
    int BUILD_TARGET -> a
    com.tyrfing.games.id17.world.World world -> h
    com.tyrlib2.graphics.scene.SceneNode camNode -> i
    boolean firstUpdate -> j
    com.tyrlib2.math.Vector2 NATIVE_SIZE -> b
    float[] atlasScales -> k
    com.tyrfing.games.id17.EmpireFrameListener MAIN_FRAME -> c
    com.tyrfing.games.id17.gui.CameraController camController -> d
    com.tyrfing.games.id17.gui.MainGUI mainGUI -> l
    com.tyrfing.games.id17.startmenu.Menu startMenu -> m
    com.tyrlib2.networking.Network network -> n
    com.tyrfing.games.id17.ChatListener chat -> o
    int SERVER_PORT -> e
    com.tyrlib2.input.IScrollListener zoomer -> p
    com.tyrfing.games.id17.ScrollListener sl -> q
    com.tyrlib2.networking.Network matchmakerNetwork -> r
    float passedTime -> s
    com.tyrfing.games.id17.EmpireFrameListener$GameState state -> f
    float bandWidthCheckTime -> t
    com.tyrfing.games.id17.gui.Scoreboard board -> u
    int port -> v
    boolean randomJoin -> g
    void onSurfaceCreated() -> onSurfaceCreated
    void onSurfaceChanged() -> onSurfaceChanged
    void onFrameRendered(float) -> onFrameRendered
    void hostGameFromSave(java.lang.String) -> a
    void createWorld(java.lang.String) -> b
    void loadWorld(java.lang.String) -> c
    void setupHostNetwork() -> a
    void hostGame(java.lang.String,boolean,boolean) -> a
    void startGame() -> b
    void startGame(int,int) -> a
    void joinGame() -> c
    void connectToGame(java.lang.String) -> d
    com.tyrlib2.networking.Network getNetwork() -> d
    void destroyInputObjects() -> e
    java.util.List getPlayers() -> f
    void backConnect(int,java.lang.String) -> a
    void onNewConnection(com.tyrlib2.networking.Connection) -> onNewConnection
    void onConnectionLost(com.tyrlib2.networking.Connection) -> onConnectionLost
    void onReceivedData(com.tyrlib2.networking.Connection,java.lang.Object) -> onReceivedData
    com.tyrlib2.networking.Network access$0(com.tyrfing.games.id17.EmpireFrameListener) -> a
    com.tyrfing.games.id17.world.World access$1(com.tyrfing.games.id17.EmpireFrameListener) -> b
    com.tyrfing.games.id17.ChatListener access$2(com.tyrfing.games.id17.EmpireFrameListener) -> c
    com.tyrfing.games.id17.gui.Scoreboard access$3(com.tyrfing.games.id17.EmpireFrameListener) -> d
com.tyrfing.games.id17.EmpireFrameListener$1 -> com.tyrfing.games.id17.j:
    com.tyrfing.games.id17.EmpireFrameListener this$0 -> a
    void onSurfaceCreated() -> onSurfaceCreated
    void onSurfaceChanged() -> onSurfaceChanged
    void onFrameRendered(float) -> onFrameRendered
com.tyrfing.games.id17.EmpireFrameListener$2 -> com.tyrfing.games.id17.k:
    com.tyrfing.games.id17.EmpireFrameListener this$0 -> a
    void onError() -> a
com.tyrfing.games.id17.EmpireFrameListener$3 -> com.tyrfing.games.id17.l:
    com.tyrfing.games.id17.EmpireFrameListener this$0 -> a
    boolean onPress(com.tyrlib2.input.IKeyboardEvent) -> a
    boolean onRelease(com.tyrlib2.input.IKeyboardEvent) -> b
com.tyrfing.games.id17.EmpireFrameListener$4 -> com.tyrfing.games.id17.m:
    com.tyrfing.games.id17.EmpireFrameListener this$0 -> a
com.tyrfing.games.id17.EmpireFrameListener$5 -> com.tyrfing.games.id17.n:
    com.tyrfing.games.id17.EmpireFrameListener this$0 -> a
    com.tyrfing.games.id17.networking.MapInfo val$info -> b
    com.tyrlib2.networking.Connection val$c -> c
    void run() -> run
com.tyrfing.games.id17.EmpireFrameListener$GameState -> com.tyrfing.games.id17.EmpireFrameListener$GameState:
    com.tyrfing.games.id17.EmpireFrameListener$GameState START -> START
    com.tyrfing.games.id17.EmpireFrameListener$GameState SELECT -> SELECT
    com.tyrfing.games.id17.EmpireFrameListener$GameState MAIN -> MAIN
    com.tyrfing.games.id17.EmpireFrameListener$GameState[] ENUM$VALUES -> a
    com.tyrfing.games.id17.EmpireFrameListener$GameState[] values() -> values
    com.tyrfing.games.id17.EmpireFrameListener$GameState valueOf(java.lang.String) -> valueOf
com.tyrfing.games.id17.GameUpdater -> com.tyrfing.games.id17.o:
    com.tyrlib2.game.Updater updater -> a
    com.tyrfing.games.id17.GameUpdater instance -> b
    com.tyrlib2.game.Updater getUpdater() -> a
    void onSurfaceCreated() -> onSurfaceCreated
    void onSurfaceChanged() -> onSurfaceChanged
    void onFrameRendered(float) -> onFrameRendered
com.tyrfing.games.id17.QuitDialog -> com.tyrfing.games.id17.p:
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
com.tyrfing.games.id17.QuitDialog$1 -> com.tyrfing.games.id17.q:
    com.tyrfing.games.id17.QuitDialog this$0 -> a
    boolean val$host -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.tyrfing.games.id17.QuitDialog$1$1 -> com.tyrfing.games.id17.r:
    com.tyrfing.games.id17.QuitDialog$1 this$1 -> a
    boolean val$host -> b
    com.tyrfing.games.id17.EmpireActivity val$a -> c
    void run() -> run
com.tyrfing.games.id17.QuitDialog$2 -> com.tyrfing.games.id17.s:
    com.tyrfing.games.id17.QuitDialog this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.tyrfing.games.id17.ScrollListener -> com.tyrfing.games.id17.t:
    com.tyrlib2.math.Vector2[] SCROLL_DIMS -> a
    boolean[] scrolling -> b
    float accTime -> c
    boolean inScreen -> d
    void onSurfaceCreated() -> onSurfaceCreated
    void onSurfaceChanged() -> onSurfaceChanged
    void onFrameRendered(float) -> onFrameRendered
com.tyrfing.games.id17.Util -> com.tyrfing.games.id17.u:
    java.lang.String getFlaggedText(java.lang.String,boolean) -> a
    java.lang.String getSignedText(float) -> a
    java.lang.String getSignedText(int) -> a
    java.lang.String getRankedText(int) -> b
com.tyrfing.games.id17.WikiReader -> com.tyrfing.games.id17.v:
    org.xmlpull.v1.XmlPullParser parser -> a
    void read(java.lang.String) -> a
com.tyrfing.games.id17.WikiReader$1 -> com.tyrfing.games.id17.w:
    com.tyrfing.games.id17.WikiReader this$0 -> a
    java.lang.String val$header -> b
    java.lang.String val$content -> c
    void onCall() -> a
com.tyrfing.games.id17.ai.AIController -> com.tyrfing.games.id17.ai.AIController:
    long serialVersionUID -> serialVersionUID
    java.util.List messages -> messages
    com.tyrfing.games.id17.ai.BehaviorModel model -> model
    com.tyrlib2.util.Color color -> color
    com.tyrfing.games.id17.ai.BehaviorModel getModel() -> getModel
    void control(com.tyrfing.games.id17.houses.House) -> control
    void update() -> update
    void informMessage(com.tyrfing.games.id17.diplomacy.Message) -> informMessage
    void informNewHolding(com.tyrfing.games.id17.holdings.Holding) -> informNewHolding
    void informLostHolding(com.tyrfing.games.id17.holdings.Holding) -> informLostHolding
    void informWarStart(com.tyrfing.games.id17.war.War) -> informWarStart
    void informWarEnd(com.tyrfing.games.id17.war.War) -> informWarEnd
    void informAddAlly(com.tyrfing.games.id17.houses.House) -> informAddAlly
    void informRemoveAlly(com.tyrfing.games.id17.houses.House) -> informRemoveAlly
    void destroy() -> destroy
    com.tyrlib2.util.Color getStrategicColor() -> getStrategicColor
com.tyrfing.games.id17.ai.AIThread -> com.tyrfing.games.id17.ai.a:
    com.tyrfing.games.id17.ai.AIThread thread -> a
    java.util.Vector ais -> b
    boolean running -> c
    void create() -> a
    com.tyrfing.games.id17.ai.AIThread getInstance() -> b
    void run() -> run
    void addAI(com.tyrfing.games.id17.ai.AIController) -> a
    void removeAI(com.tyrfing.games.id17.ai.AIController) -> b
    void addMessage(com.tyrfing.games.id17.diplomacy.Message) -> a
    void addExecution(com.tyrfing.games.id17.ai.actions.Execution) -> a
    void addIntrigue(com.tyrfing.games.id17.intrigue.IntrigueProject) -> a
    void close() -> c
com.tyrfing.games.id17.ai.ArmyModel -> com.tyrfing.games.id17.ai.ArmyModel:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.ai.BehaviorModel model -> model
    java.util.List armyControllers -> armyControllers
    java.util.Set relevantBaronies -> relevantBaronies
    java.util.Set explorationTargets -> explorationTargets
    java.util.List tasks -> tasks
    float EXPLORATION_PRIO -> EXPLORATION_PRIO
    void update() -> update
    void onControlHouse(com.tyrfing.games.id17.houses.House) -> onControlHouse
    void informNewBarony(com.tyrfing.games.id17.holdings.Barony) -> informNewBarony
    void informWarStart(com.tyrfing.games.id17.war.War) -> informWarStart
    void informWarEnd(com.tyrfing.games.id17.war.War) -> informWarEnd
    void informAddAlly(com.tyrfing.games.id17.houses.House) -> informAddAlly
    void informRemoveAlly(com.tyrfing.games.id17.houses.House) -> informRemoveAlly
    void requestExploration(com.tyrfing.games.id17.holdings.Barony) -> requestExploration
    void dealWithExploration(com.tyrfing.games.id17.holdings.Holding) -> dealWithExploration
    void addController(com.tyrfing.games.id17.war.Army) -> addController
    void informLostBarony(com.tyrfing.games.id17.holdings.Barony) -> informLostBarony
    void destroy() -> destroy
    void processWhitePeaceMessage(com.tyrfing.games.id17.diplomacy.Message) -> processWhitePeaceMessage
    boolean isWhitePeaceAcceptable(com.tyrfing.games.id17.war.War) -> a
com.tyrfing.games.id17.ai.BehaviorModel -> com.tyrfing.games.id17.ai.BehaviorModel:
    long serialVersionUID -> serialVersionUID
    float MARRIAGE_RELATION_WEIGHT -> MARRIAGE_RELATION_WEIGHT
    float MARRIAGE_INCOME_WEIGHT -> MARRIAGE_INCOME_WEIGHT
    float WAR_TARGET_RELATION_WEIGHT -> WAR_TARGET_RELATION_WEIGHT
    float WAR_OVERLORD_RELATION_WEIGHT -> WAR_OVERLORD_RELATION_WEIGHT
    float WAR_INCOME_WEIGHT -> WAR_INCOME_WEIGHT
    float WAR_EASY_WEIGHT -> WAR_EASY_WEIGHT
    float REVOKE_RELATION_WEIGHT -> REVOKE_RELATION_WEIGHT
    float REVOKE_INCOME_WEIGHT -> REVOKE_INCOME_WEIGHT
    float REVOKE_ARMY_WEIGHT -> REVOKE_ARMY_WEIGHT
    float TYRANNICAL -> TYRANNICAL
    float BUILD_PROB -> BUILD_PROB
    float FRIENDS -> FRIENDS
    float ENEMYS -> ENEMYS
    com.tyrfing.games.id17.ai.ObjectiveModel actionModel -> actionModel
    com.tyrfing.games.id17.ai.ArmyModel armyModel -> armyModel
    int NO_RESPONSE_MEMORIZED -> NO_RESPONSE_MEMORIZED
    java.util.List memories -> memories
    int bufferMoney -> bufferMoney
    com.tyrfing.games.id17.houses.House house -> house
    float[] houseFactors -> houseFactors
    float[] houseValues -> houseValues
    void processMessage(com.tyrfing.games.id17.diplomacy.Message) -> processMessage
    void takeAction() -> takeAction
    com.tyrfing.games.id17.houses.House getHouse() -> getHouse
    com.tyrfing.games.id17.houses.House getMarriageCandidate() -> getMarriageCandidate
    com.tyrfing.games.id17.houses.House getRandomNeighbour() -> getRandomNeighbour
    com.tyrfing.games.id17.holdings.Holding revokeHolding() -> revokeHolding
    com.tyrfing.games.id17.holdings.Holding conquerTarget() -> conquerTarget
    float getRelationFactor(com.tyrfing.games.id17.houses.House) -> getRelationFactor
    float getResponseValue(int,com.tyrfing.games.id17.diplomacy.Message) -> getResponseValue
    com.tyrfing.games.id17.houses.House chooseIntriguePartner() -> chooseIntriguePartner
    com.tyrfing.games.id17.houses.House getGrantHoldingHouse() -> getGrantHoldingHouse
    com.tyrfing.games.id17.holdings.Holding getGrantHoldingHolding(com.tyrfing.games.id17.houses.House) -> getGrantHoldingHolding
    int getDefensivePactPartner() -> getDefensivePactPartner
    com.tyrfing.games.id17.technology.Technology getTechTarget() -> getTechTarget
    com.tyrfing.games.id17.houses.House getGrantLoanHouse() -> getGrantLoanHouse
    double getAggressiveness() -> getAggressiveness
    com.tyrfing.games.id17.holdings.Barony getExplorationTarget() -> getExplorationTarget
    int recallReceivedResponse(com.tyrfing.games.id17.diplomacy.actions.DiploAction,com.tyrfing.games.id17.houses.House,int[]) -> recallReceivedResponse
com.tyrfing.games.id17.ai.Decision -> com.tyrfing.games.id17.ai.Decision:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.Action action -> action
    com.tyrfing.games.id17.houses.House target -> target
    com.tyrfing.games.id17.ai.objectives.Objective objective -> objective
    int[] options -> options
    boolean achievesObjective -> achievesObjective
    com.tyrfing.games.id17.ai.Decision ACHIEVED_DECISION -> ACHIEVED_DECISION
    com.tyrfing.games.id17.ai.Decision UNACHIEVED_DECISION -> UNACHIEVED_DECISION
com.tyrfing.games.id17.ai.Memory -> com.tyrfing.games.id17.ai.Memory:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.diplomacy.actions.DiploAction action -> action
    com.tyrfing.games.id17.houses.House sender -> sender
    com.tyrfing.games.id17.houses.House receiver -> receiver
    int[] options -> options
    float timestamp -> timestamp
    int response -> response
com.tyrfing.games.id17.ai.ObjectiveModel -> com.tyrfing.games.id17.ai.ObjectiveModel:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.ai.BehaviorModel model -> model
    java.util.Stack objectives -> objectives
    gnu.trove.stack.TFloatStack spentTime -> spentTime
    com.tyrfing.games.id17.diplomacy.Message waitingForResponse -> waitingForResponse
    com.tyrfing.games.id17.ai.Decision executingDecision -> executingDecision
    java.util.Stack externalDecisions -> externalDecisions
    long lastTime -> lastTime
    com.tyrfing.games.id17.ai.objectives.Objective getCurrentObjective() -> getCurrentObjective
    void takeAction() -> takeAction
    void generateObjective() -> a
    void processMessage(com.tyrfing.games.id17.diplomacy.Message) -> processMessage
    void addExternalDecision(com.tyrfing.games.id17.ai.Decision) -> addExternalDecision
    float getResponseValue(int,com.tyrfing.games.id17.diplomacy.Message) -> getResponseValue
com.tyrfing.games.id17.ai.RebelController -> com.tyrfing.games.id17.ai.RebelController:
    long serialVersionUID -> serialVersionUID
    void update() -> update
    void performDecision(com.tyrfing.games.id17.ai.Decision) -> a
com.tyrfing.games.id17.ai.actions.AIAction -> com.tyrfing.games.id17.ai.actions.AIAction:
    long serialVersionUID -> serialVersionUID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,int[]) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,int[]) -> execute
    void selectedByUser(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> selectedByUser
com.tyrfing.games.id17.ai.actions.AIActions -> com.tyrfing.games.id17.ai.actions.a:
    java.util.List actions -> a
com.tyrfing.games.id17.ai.actions.BuildUnit -> com.tyrfing.games.id17.ai.actions.BuildUnit:
    long serialVersionUID -> serialVersionUID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,int[]) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,int[]) -> execute
com.tyrfing.games.id17.ai.actions.ChangeLaw -> com.tyrfing.games.id17.ai.actions.ChangeLaw:
    long serialVersionUID -> serialVersionUID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,int[]) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,int[]) -> execute
com.tyrfing.games.id17.ai.actions.Execution -> com.tyrfing.games.id17.ai.actions.Execution:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.ai.actions.AIAction action -> action
    int[] options -> options
    com.tyrfing.games.id17.houses.House house -> house
com.tyrfing.games.id17.ai.actions.Executor -> com.tyrfing.games.id17.ai.actions.Executor:
    long serialVersionUID -> serialVersionUID
    java.util.concurrent.BlockingQueue executions -> executions
    void addExecution(com.tyrfing.games.id17.ai.actions.Execution) -> addExecution
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
com.tyrfing.games.id17.ai.actions.SettleGuild -> com.tyrfing.games.id17.ai.actions.SettleGuild:
    long serialVersionUID -> serialVersionUID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,int[]) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,int[]) -> execute
com.tyrfing.games.id17.ai.actions.StartTeching -> com.tyrfing.games.id17.ai.actions.StartTeching:
    long serialVersionUID -> serialVersionUID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,int[]) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,int[]) -> execute
com.tyrfing.games.id17.ai.actions.UpgradeBuilding -> com.tyrfing.games.id17.ai.actions.UpgradeBuilding:
    long serialVersionUID -> serialVersionUID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,int[]) -> isEnabled
    boolean sIsEnabled(com.tyrfing.games.id17.houses.House,int[]) -> sIsEnabled
    void execute(com.tyrfing.games.id17.houses.House,int[]) -> execute
com.tyrfing.games.id17.ai.objectives.Conquer -> com.tyrfing.games.id17.ai.objectives.Conquer:
    long serialVersionUID -> serialVersionUID
    float[] WEIGHTS_TARGET -> WEIGHTS_TARGET
    float[] WEIGHTS_NONE_TARGET -> WEIGHTS_NONE_TARGET
    com.tyrfing.games.id17.ai.Decision achieve() -> achieve
    float getResponseValue(int,com.tyrfing.games.id17.diplomacy.Message) -> getResponseValue
com.tyrfing.games.id17.ai.objectives.EstablishDefensivePact -> com.tyrfing.games.id17.ai.objectives.EstablishDefensivePact:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.ai.Decision achieve() -> achieve
    float getResponseValue(int,com.tyrfing.games.id17.diplomacy.Message) -> getResponseValue
com.tyrfing.games.id17.ai.objectives.ExpandArmy -> com.tyrfing.games.id17.ai.objectives.ExpandArmy:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.ai.Decision achieve() -> achieve
    float getResponseValue(int,com.tyrfing.games.id17.diplomacy.Message) -> getResponseValue
com.tyrfing.games.id17.ai.objectives.ExpandHoldings -> com.tyrfing.games.id17.ai.objectives.ExpandHoldings:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.ai.Decision achieve() -> achieve
    float getResponseValue(int,com.tyrfing.games.id17.diplomacy.Message) -> getResponseValue
com.tyrfing.games.id17.ai.objectives.Explore -> com.tyrfing.games.id17.ai.objectives.Explore:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.ai.Decision achieve() -> achieve
    float getResponseValue(int,com.tyrfing.games.id17.diplomacy.Message) -> getResponseValue
com.tyrfing.games.id17.ai.objectives.ImproveHoldings -> com.tyrfing.games.id17.ai.objectives.ImproveHoldings:
    long serialVersionUID -> serialVersionUID
    int holdingID -> holdingID
    int buildingID -> buildingID
    com.tyrfing.games.id17.buildings.Building$TYPE type -> type
    com.tyrfing.games.id17.holdings.Holding holding -> holding
    com.tyrfing.games.id17.ai.Decision achieve() -> achieve
    float getResponseValue(int,com.tyrfing.games.id17.diplomacy.Message) -> getResponseValue
com.tyrfing.games.id17.ai.objectives.ImproveRelation -> com.tyrfing.games.id17.ai.objectives.ImproveRelation:
    long serialVersionUID -> serialVersionUID
    float[] WEIGHTS_TARGET -> WEIGHTS_TARGET
    float[] WEIGHTS_NONE_TARGET -> WEIGHTS_NONE_TARGET
    com.tyrfing.games.id17.ai.Decision achieve() -> achieve
    float getResponseValue(int,com.tyrfing.games.id17.diplomacy.Message) -> getResponseValue
com.tyrfing.games.id17.ai.objectives.MakeMoney -> com.tyrfing.games.id17.ai.objectives.MakeMoney:
    long serialVersionUID -> serialVersionUID
    float targetGold -> targetGold
    com.tyrfing.games.id17.ai.Decision achieve() -> achieve
    float getResponseValue(int,com.tyrfing.games.id17.diplomacy.Message) -> getResponseValue
com.tyrfing.games.id17.ai.objectives.Objective -> com.tyrfing.games.id17.ai.objectives.Objective:
    long serialVersionUID -> serialVersionUID
    float maxTime -> maxTime
    int[] options -> options
    com.tyrfing.games.id17.ai.BehaviorModel model -> model
    boolean failed -> failed
    com.tyrfing.games.id17.ai.Decision achieve() -> achieve
    float getResponseValue(int,com.tyrfing.games.id17.diplomacy.Message) -> getResponseValue
    boolean hasFailed() -> hasFailed
    float[] getWeightSet() -> getWeightSet
    com.tyrfing.games.id17.diplomacy.actions.DiploAction getAction(int,int) -> getAction
com.tyrfing.games.id17.ai.objectives.ReduceHoldingCount -> com.tyrfing.games.id17.ai.objectives.ReduceHoldingCount:
    long serialVersionUID -> serialVersionUID
    int targetCount -> targetCount
    com.tyrfing.games.id17.ai.Decision achieve() -> achieve
    float getResponseValue(int,com.tyrfing.games.id17.diplomacy.Message) -> getResponseValue
com.tyrfing.games.id17.ai.objectives.SeekIndependence -> com.tyrfing.games.id17.ai.objectives.SeekIndependence:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.ai.Decision achieve() -> achieve
    float getResponseValue(int,com.tyrfing.games.id17.diplomacy.Message) -> getResponseValue
com.tyrfing.games.id17.ai.objectives.Tech -> com.tyrfing.games.id17.ai.objectives.Tech:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.technology.Technology t -> t
    com.tyrfing.games.id17.ai.Decision achieve() -> achieve
    float getResponseValue(int,com.tyrfing.games.id17.diplomacy.Message) -> getResponseValue
com.tyrfing.games.id17.ai.objectives.UpgradeBuilding -> com.tyrfing.games.id17.ai.objectives.UpgradeBuilding:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.ai.Decision achieve() -> achieve
    float getResponseValue(int,com.tyrfing.games.id17.diplomacy.Message) -> getResponseValue
com.tyrfing.games.id17.ai.tasks.ArmyController -> com.tyrfing.games.id17.ai.tasks.ArmyController:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.war.Army army -> army
    com.tyrfing.games.id17.holdings.Holding target -> target
    com.tyrfing.games.id17.ai.tasks.ArmyController$STATE state -> state
    com.tyrfing.games.id17.ai.ArmyModel armyModel -> armyModel
    boolean exploration -> exploration
    void act() -> act
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
    void checkReadyForFight() -> a
    void checkReadyForExploration() -> checkReadyForExploration
    boolean enoughTroops() -> b
com.tyrfing.games.id17.ai.tasks.ArmyController$STATE -> com.tyrfing.games.id17.ai.tasks.ArmyController$STATE:
    com.tyrfing.games.id17.ai.tasks.ArmyController$STATE RETREATING -> RETREATING
    com.tyrfing.games.id17.ai.tasks.ArmyController$STATE FIGHTING -> FIGHTING
    com.tyrfing.games.id17.ai.tasks.ArmyController$STATE HEALING -> HEALING
    com.tyrfing.games.id17.ai.tasks.ArmyController$STATE PLUNDERING -> PLUNDERING
    com.tyrfing.games.id17.ai.tasks.ArmyController$STATE EXPLORING -> EXPLORING
    com.tyrfing.games.id17.ai.tasks.ArmyController$STATE[] ENUM$VALUES -> a
    com.tyrfing.games.id17.ai.tasks.ArmyController$STATE[] values() -> values
    com.tyrfing.games.id17.ai.tasks.ArmyController$STATE valueOf(java.lang.String) -> valueOf
com.tyrfing.games.id17.ai.tasks.Task -> com.tyrfing.games.id17.ai.tasks.Task:
    long serialVersionUID -> serialVersionUID
    float value -> value
    com.tyrfing.games.id17.holdings.Holding holding -> holding
    boolean beingServed -> beingServed
    boolean exploration -> exploration
com.tyrfing.games.id17.buildings.Building -> com.tyrfing.games.id17.buildings.Building:
    long serialVersionUID -> serialVersionUID
    int COUNT_STATS -> COUNT_STATS
    int PRODUCTION -> PRODUCTION
    int PRICE -> PRICE
    int MERCHANT_ATTRACTIVITY_BONUS -> MERCHANT_ATTRACTIVITY_BONUS
    int WORKER_ATTRACTIVITY_BONUS -> WORKER_ATTRACTIVITY_BONUS
    int PEASANT_ATTRACTIVITY_BONUS -> PEASANT_ATTRACTIVITY_BONUS
    int SCHOLAR_ATTRACTIVITY_BONUS -> SCHOLAR_ATTRACTIVITY_BONUS
    int INCOME_BONUS -> INCOME_BONUS
    int PRODUCTION_BONUS -> PRODUCTION_BONUS
    int PRICE_INC -> PRICE_INC
    int PROD_INC -> PROD_INC
    int RESEARCH_BONUS -> RESEARCH_BONUS
    int TRADE_BONUS -> TRADE_BONUS
    int GOOD_PROD_OUT -> GOOD_PROD_OUT
    int MERCHANT_ATTRACTIVITY_FACTOR -> MERCHANT_ATTRACTIVITY_FACTOR
    int WORKER_ATTRACTIVITY_FACTOR -> WORKER_ATTRACTIVITY_FACTOR
    int PEASANT_ATTRACTIVITY_FACTOR -> PEASANT_ATTRACTIVITY_FACTOR
    int SCHOLAR_ATTRACTIVITY_FACTOR -> SCHOLAR_ATTRACTIVITY_FACTOR
    int MERCHANT_TAX_BONUS -> MERCHANT_TAX_BONUS
    int WORKER_TAX_BONUS -> WORKER_TAX_BONUS
    int PEASANT_TAX_BONUS -> PEASANT_TAX_BONUS
    int SCHOLAR_TAX_BONUS -> SCHOLAR_TAX_BONUS
    int EDUCATION_BONUS -> EDUCATION_BONUS
    int RESEARCH_MULT_BONUS -> RESEARCH_MULT_BONUS
    int GOOD_PROD_IN -> GOOD_PROD_IN
    int GOOD_DEMAND_1_ID -> GOOD_DEMAND_1_ID
    int GOOD_DEMAND_1_AMOUNT -> GOOD_DEMAND_1_AMOUNT
    int GOOD_DEMAND_2_ID -> GOOD_DEMAND_2_ID
    int GOOD_DEMAND_2_AMOUNT -> GOOD_DEMAND_2_AMOUNT
    com.tyrfing.games.id17.buildings.Building$TYPE[] GREAT_BUILDINGS -> GREAT_BUILDINGS
    com.tyrfing.games.id17.buildings.Building$TYPE[] BASE_BUILDINGS -> BASE_BUILDINGS
    com.tyrfing.games.id17.holdings.Holding[] BUILT_GREAT_BUILDINGS -> BUILT_GREAT_BUILDINGS
    com.tyrfing.games.id17.buildings.Building$TYPE[] VALUES -> VALUES
    java.lang.String[] DESC -> DESC
    java.util.Map STATS -> STATS
    float GREAT_BUILDING_HONOR -> GREAT_BUILDING_HONOR
    float GREAT_BUILDING_SCORE_MULT -> GREAT_BUILDING_SCORE_MULT
    float GREAT_BUILDING_HOUSE_POINTS -> GREAT_BUILDING_HOUSE_POINTS
    int GREAT_BUILDING_MIN_LEVEL -> GREAT_BUILDING_MIN_LEVEL
    com.tyrlib2.game.Stats stats -> stats
    int level -> level
    com.tyrfing.games.id17.buildings.Building$TYPE type -> type
    float getPrice(com.tyrfing.games.id17.buildings.Building$TYPE,com.tyrfing.games.id17.holdings.Holding) -> getPrice
    float getProd(com.tyrfing.games.id17.buildings.Building$TYPE,com.tyrfing.games.id17.holdings.Holding) -> getProd
    com.tyrfing.games.id17.buildings.Building create(com.tyrfing.games.id17.buildings.Building$TYPE,int) -> create
    boolean isBuildableInHolding(com.tyrfing.games.id17.buildings.Building$TYPE,com.tyrfing.games.id17.holdings.Holding) -> isBuildableInHolding
    com.tyrlib2.game.Stats getStats() -> getStats
    com.tyrfing.games.id17.buildings.Building$TYPE getType() -> getType
    int getLevel() -> getLevel
    void changeLevel(int) -> changeLevel
    void applyEffects(com.tyrfing.games.id17.holdings.Holding,int) -> applyEffects
    void createBuildMail(com.tyrfing.games.id17.buildings.Building$TYPE,com.tyrfing.games.id17.holdings.Holding) -> createBuildMail
    void createBuildMail(com.tyrfing.games.id17.holdings.Holding) -> createBuildMail
    java.lang.String getDesc(com.tyrfing.games.id17.buildings.Building$TYPE,com.tyrfing.games.id17.holdings.Holding) -> getDesc
    com.tyrfing.games.id17.gui.mails.HeaderedMail createBuildMail0(com.tyrfing.games.id17.buildings.Building$TYPE,com.tyrfing.games.id17.holdings.Holding) -> createBuildMail0
    com.tyrfing.games.id17.gui.mails.HeaderedMail createBuildMail(com.tyrfing.games.id17.buildings.Building$TYPE) -> createBuildMail
com.tyrfing.games.id17.buildings.Building$1 -> com.tyrfing.games.id17.buildings.a:
    com.tyrfing.games.id17.buildings.Building$TYPE val$type -> a
    void onCall() -> a
com.tyrfing.games.id17.buildings.Building$TYPE -> com.tyrfing.games.id17.buildings.Building$TYPE:
    com.tyrfing.games.id17.buildings.Building$TYPE Market -> Market
    com.tyrfing.games.id17.buildings.Building$TYPE Forge -> Forge
    com.tyrfing.games.id17.buildings.Building$TYPE Library -> Library
    com.tyrfing.games.id17.buildings.Building$TYPE Granary -> Granary
    com.tyrfing.games.id17.buildings.Building$TYPE Guild -> Guild
    com.tyrfing.games.id17.buildings.Building$TYPE Cottage -> Cottage
    com.tyrfing.games.id17.buildings.Building$TYPE Shed -> Shed
    com.tyrfing.games.id17.buildings.Building$TYPE Field -> Field
    com.tyrfing.games.id17.buildings.Building$TYPE Hunter -> Hunter
    com.tyrfing.games.id17.buildings.Building$TYPE Tradepost -> Tradepost
    com.tyrfing.games.id17.buildings.Building$TYPE Lumberjack -> Lumberjack
    com.tyrfing.games.id17.buildings.Building$TYPE Bazaar -> Bazaar
    com.tyrfing.games.id17.buildings.Building$TYPE Blastfurnace -> Blastfurnace
    com.tyrfing.games.id17.buildings.Building$TYPE University -> University
    com.tyrfing.games.id17.buildings.Building$TYPE[] ENUM$VALUES -> a
    com.tyrfing.games.id17.buildings.Building$TYPE[] values() -> values
    com.tyrfing.games.id17.buildings.Building$TYPE valueOf(java.lang.String) -> valueOf
com.tyrfing.games.id17.buildings.BuildingMail -> com.tyrfing.games.id17.buildings.b:
    com.tyrfing.games.id17.buildings.Building$TYPE type -> a
    com.tyrfing.games.id17.holdings.Holding h -> b
    void onAccept() -> a_
com.tyrfing.games.id17.buildings.Guild -> com.tyrfing.games.id17.buildings.Guild:
    long serialVersionUID -> serialVersionUID
    java.util.Map DATA -> DATA
    com.tyrfing.games.id17.buildings.Guild$TYPE type -> type
    com.tyrfing.games.id17.trade.GoodProduction p -> p
    com.tyrfing.games.id17.holdings.Barony target -> target
    void setupGuild(com.tyrfing.games.id17.buildings.Guild$TYPE,com.tyrfing.games.id17.holdings.Barony,com.tyrfing.games.id17.holdings.Holding) -> setupGuild
    void createBuildMail(com.tyrfing.games.id17.holdings.Holding) -> createBuildMail
    boolean isProductive(com.tyrfing.games.id17.buildings.Guild$TYPE,com.tyrfing.games.id17.holdings.Holding) -> isProductive
com.tyrfing.games.id17.buildings.Guild$TYPE -> com.tyrfing.games.id17.buildings.Guild$TYPE:
    com.tyrfing.games.id17.buildings.Guild$TYPE Smiths -> Smiths
    com.tyrfing.games.id17.buildings.Guild$TYPE Bakers -> Bakers
    com.tyrfing.games.id17.buildings.Guild$TYPE Merchants -> Merchants
    com.tyrfing.games.id17.buildings.Guild$TYPE[] ENUM$VALUES -> a
    com.tyrfing.games.id17.buildings.Guild$TYPE[] values() -> values
    com.tyrfing.games.id17.buildings.Guild$TYPE valueOf(java.lang.String) -> valueOf
com.tyrfing.games.id17.buildings.GuildEntry -> com.tyrfing.games.id17.buildings.c:
    com.tyrlib2.gui.Label nameLabel -> a
    com.tyrfing.games.id17.buildings.Guild$TYPE type -> e
    com.tyrfing.games.id17.buildings.GuildMail m -> f
    void onClick() -> f_
com.tyrfing.games.id17.buildings.GuildMail -> com.tyrfing.games.id17.buildings.d:
    com.tyrfing.games.id17.buildings.Guild$TYPE selection -> a
    com.tyrfing.games.id17.holdings.Barony target -> b
    com.tyrfing.games.id17.buildings.Guild g -> c
    com.tyrfing.games.id17.holdings.Holding h -> d
    java.util.List producedGoods -> e
    void select(com.tyrfing.games.id17.buildings.Guild$TYPE) -> a
    void onAccept() -> a_
    void access$0(com.tyrfing.games.id17.buildings.GuildMail,com.tyrfing.games.id17.holdings.Barony) -> a
com.tyrfing.games.id17.buildings.GuildMail$1 -> com.tyrfing.games.id17.buildings.e:
    com.tyrfing.games.id17.buildings.GuildMail this$0 -> a
    com.tyrfing.games.id17.gui.mails.HeaderedMail val$mail -> h
    com.tyrfing.games.id17.holdings.Holding val$holding -> i
    void onClick() -> f_
com.tyrfing.games.id17.diplomacy.Diplomacy -> com.tyrfing.games.id17.diplomacy.a:
    com.tyrfing.games.id17.diplomacy.Diplomacy instance -> c
    java.util.List categories -> a
    java.util.Map actions -> b
    com.tyrfing.games.id17.diplomacy.Diplomacy getInstance() -> a
    com.tyrfing.games.id17.ActionCategory getCategory(int) -> a
    com.tyrfing.games.id17.diplomacy.actions.DiploAction getAction(int,int) -> a
com.tyrfing.games.id17.diplomacy.Message -> com.tyrfing.games.id17.diplomacy.Message:
    long serialVersionUID -> serialVersionUID
    float RESPONSE_TIME -> RESPONSE_TIME
    com.tyrfing.games.id17.diplomacy.actions.DiploAction action -> action
    com.tyrfing.games.id17.houses.House sender -> sender
    com.tyrfing.games.id17.houses.House receiver -> receiver
    int response -> response
    int[] options -> options
    float timeStamp -> timeStamp
    void respond(int) -> respond
com.tyrfing.games.id17.diplomacy.MessageExecutor -> com.tyrfing.games.id17.diplomacy.MessageExecutor:
    long serialVersionUID -> serialVersionUID
    java.util.Vector messages -> messages
    void addMessage(com.tyrfing.games.id17.diplomacy.Message) -> addMessage
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
com.tyrfing.games.id17.diplomacy.actions.AcceptLawChange -> com.tyrfing.games.id17.diplomacy.actions.AcceptLawChange:
    long serialVersionUID -> serialVersionUID
    int ID -> ID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    void respond(com.tyrfing.games.id17.diplomacy.Message) -> respond
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
com.tyrfing.games.id17.diplomacy.actions.AdmitDefeat -> com.tyrfing.games.id17.diplomacy.actions.AdmitDefeat:
    long serialVersionUID -> serialVersionUID
    int ID -> ID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    com.tyrfing.games.id17.gui.mails.Mail getExecutionMail(com.tyrfing.games.id17.diplomacy.Message) -> getExecutionMail
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
com.tyrfing.games.id17.diplomacy.actions.DeclareIndependence -> com.tyrfing.games.id17.diplomacy.actions.DeclareIndependence:
    long serialVersionUID -> serialVersionUID
    int ID -> ID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    com.tyrfing.games.id17.gui.mails.Mail getOptionMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getOptionMail
    void respond(com.tyrfing.games.id17.diplomacy.Message) -> respond
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
    com.tyrfing.games.id17.gui.mails.Mail getResponseMail(com.tyrfing.games.id17.diplomacy.Message) -> getResponseMail
com.tyrfing.games.id17.diplomacy.actions.DeclareIndependence$1 -> com.tyrfing.games.id17.diplomacy.actions.a:
    com.tyrfing.games.id17.diplomacy.actions.DeclareIndependence this$0 -> a
    com.tyrfing.games.id17.diplomacy.actions.DeclareIndependence val$request -> b
    com.tyrfing.games.id17.houses.House val$sender -> c
    com.tyrfing.games.id17.houses.House val$receiver -> d
    void onAccept() -> a_
com.tyrfing.games.id17.diplomacy.actions.DeclareWar -> com.tyrfing.games.id17.diplomacy.actions.DeclareWar:
    int TYRANNY -> TYRANNY
    float TYRANNY_DECAY -> TYRANNY_DECAY
    long serialVersionUID -> serialVersionUID
    int RELATION_DECLARE_WAR_NOCLAIM -> RELATION_DECLARE_WAR_NOCLAIM
    int RELATION_DECLARE_WAR_CLAIM -> RELATION_DECLARE_WAR_CLAIM
    float RELATION_DECLARE_WAR_DURATION -> RELATION_DECLARE_WAR_DURATION
    float REPUTATION_WARMONGERER_CLAIM -> REPUTATION_WARMONGERER_CLAIM
    float REPUTATION_WARMONGERER_NO_CLAIM -> REPUTATION_WARMONGERER_NO_CLAIM
    float REPUATION_WARMONGERER_DECAY -> REPUATION_WARMONGERER_DECAY
    int ID -> ID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void setDisabledText(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> setDisabledText
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    void declare(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.war.WarGoal,com.tyrfing.games.id17.war.WarJustification) -> declare
    com.tyrfing.games.id17.gui.mails.Mail getOptionMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getOptionMail
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
com.tyrfing.games.id17.diplomacy.actions.DefensivePact -> com.tyrfing.games.id17.diplomacy.actions.DefensivePact:
    long serialVersionUID -> serialVersionUID
    int RELATION_BOOST -> RELATION_BOOST
    int REQUIRED_RELATION -> REQUIRED_RELATION
    int ID -> ID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    void setDisabledText(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> setDisabledText
    void establishDefensivePact(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> establishDefensivePact
    void removeDefensivePact(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> removeDefensivePact
    void respond(com.tyrfing.games.id17.diplomacy.Message) -> respond
    com.tyrfing.games.id17.gui.mails.Mail getResponseMail(com.tyrfing.games.id17.diplomacy.Message) -> getResponseMail
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
com.tyrfing.games.id17.diplomacy.actions.DictateDemands -> com.tyrfing.games.id17.diplomacy.actions.DictateDemands:
    long serialVersionUID -> serialVersionUID
    int ID -> ID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void setDisabledText(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> setDisabledText
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    com.tyrfing.games.id17.gui.mails.Mail getExecutionMail(com.tyrfing.games.id17.diplomacy.Message) -> getExecutionMail
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
com.tyrfing.games.id17.diplomacy.actions.DiploAction -> com.tyrfing.games.id17.diplomacy.actions.DiploAction:
    long serialVersionUID -> serialVersionUID
    int responses -> responses
    boolean hasOptions -> hasOptions
    int id -> id
    int COUNT_DIPLO_ACTIONS -> COUNT_DIPLO_ACTIONS
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    void send(com.tyrfing.games.id17.diplomacy.Message) -> send
    void send(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> send
    void respond(com.tyrfing.games.id17.diplomacy.Message) -> respond
    int getResponses() -> getResponses
    boolean hasOptions() -> hasOptions
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
    com.tyrfing.games.id17.gui.mails.Mail getResponseMail(com.tyrfing.games.id17.diplomacy.Message) -> getResponseMail
    com.tyrfing.games.id17.gui.mails.Mail getExecutionMail(com.tyrfing.games.id17.diplomacy.Message) -> getExecutionMail
    com.tyrfing.games.id17.gui.mails.Mail getOptionMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getOptionMail
    void selectedByUser(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> selectedByUser
com.tyrfing.games.id17.diplomacy.actions.GrantHolding -> com.tyrfing.games.id17.diplomacy.actions.GrantHolding:
    long serialVersionUID -> serialVersionUID
    int RELATION_GRANT_SUB_HOLDING -> RELATION_GRANT_SUB_HOLDING
    int RELATION_GRANT_BARONY -> RELATION_GRANT_BARONY
    float RELATION_GRANT_DURATION -> RELATION_GRANT_DURATION
    int ID -> ID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    void respond(com.tyrfing.games.id17.diplomacy.Message) -> respond
    com.tyrfing.games.id17.gui.mails.Mail getOptionMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getOptionMail
    com.tyrfing.games.id17.gui.mails.Mail getResponseMail(com.tyrfing.games.id17.diplomacy.Message) -> getResponseMail
com.tyrfing.games.id17.diplomacy.actions.HandleRevolt -> com.tyrfing.games.id17.diplomacy.actions.HandleRevolt:
    int TYRANNY -> TYRANNY
    float TYRANNY_DECAY -> TYRANNY_DECAY
    long serialVersionUID -> serialVersionUID
    int ID -> ID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    com.tyrfing.games.id17.war.RebelArmy createRebelArmy(com.tyrfing.games.id17.holdings.Holding,float,int) -> createRebelArmy
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    void respond(com.tyrfing.games.id17.diplomacy.Message) -> respond
    void comply(com.tyrfing.games.id17.houses.House,int[]) -> a
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
com.tyrfing.games.id17.diplomacy.actions.HonorDefensivePact -> com.tyrfing.games.id17.diplomacy.actions.HonorDefensivePact:
    long serialVersionUID -> serialVersionUID
    int ID -> ID
    int HONOR -> HONOR
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    void respond(com.tyrfing.games.id17.diplomacy.Message) -> respond
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
    com.tyrfing.games.id17.gui.mails.Mail getResponseMail(com.tyrfing.games.id17.diplomacy.Message) -> getResponseMail
com.tyrfing.games.id17.diplomacy.actions.HonorProtect -> com.tyrfing.games.id17.diplomacy.actions.HonorProtect:
    long serialVersionUID -> serialVersionUID
    int ID -> ID
    int HONOR -> HONOR
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    void respond(com.tyrfing.games.id17.diplomacy.Message) -> respond
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
    com.tyrfing.games.id17.gui.mails.Mail getResponseMail(com.tyrfing.games.id17.diplomacy.Message) -> getResponseMail
com.tyrfing.games.id17.diplomacy.actions.InviteToIntrigue -> com.tyrfing.games.id17.diplomacy.actions.InviteToIntrigue:
    long serialVersionUID -> serialVersionUID
    int ID -> ID
    int HONOR_COST -> HONOR_COST
    int FAVOR -> FAVOR
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    boolean sIsEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> sIsEnabled
    boolean refusingCostsHonor(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> refusingCostsHonor
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    void respond(com.tyrfing.games.id17.diplomacy.Message) -> respond
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
    com.tyrfing.games.id17.gui.mails.Mail getResponseMail(com.tyrfing.games.id17.diplomacy.Message) -> getResponseMail
    com.tyrfing.games.id17.gui.mails.Mail getOptionMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getOptionMail
com.tyrfing.games.id17.diplomacy.actions.InviteToIntrigue$1 -> com.tyrfing.games.id17.diplomacy.actions.b:
    com.tyrfing.games.id17.diplomacy.actions.InviteToIntrigue this$0 -> a
    com.tyrfing.games.id17.diplomacy.actions.InviteToIntrigue val$request -> b
    com.tyrfing.games.id17.houses.House val$sender -> c
    com.tyrfing.games.id17.houses.House val$receiver -> d
    void onAccept() -> a_
com.tyrfing.games.id17.diplomacy.actions.Marriage -> com.tyrfing.games.id17.diplomacy.actions.Marriage:
    long serialVersionUID -> serialVersionUID
    float BRIDE_PRICE_PERCENT -> BRIDE_PRICE_PERCENT
    int RELATION_MARRIAGE -> RELATION_MARRIAGE
    float RELATION_DURATION -> RELATION_DURATION
    float RELATION_REFUSE -> RELATION_REFUSE
    float RELATION_REFUSE_DURATION -> RELATION_REFUSE_DURATION
    int COURT_POWER -> COURT_POWER
    int ID -> ID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void setDisabledText(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> setDisabledText
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    void respond(com.tyrfing.games.id17.diplomacy.Message) -> respond
    com.tyrfing.games.id17.gui.mails.Mail getOptionMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getOptionMail
    int getPrice(com.tyrfing.games.id17.houses.House) -> getPrice
    com.tyrfing.games.id17.gui.mails.Mail getResponseMail(com.tyrfing.games.id17.diplomacy.Message) -> getResponseMail
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
com.tyrfing.games.id17.diplomacy.actions.PayLoan -> com.tyrfing.games.id17.diplomacy.actions.PayLoan:
    long serialVersionUID -> serialVersionUID
    int DISHONOR -> DISHONOR
    int ID -> ID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    com.tyrfing.games.id17.gui.mails.Mail getOptionMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getOptionMail
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
com.tyrfing.games.id17.diplomacy.actions.Protect -> com.tyrfing.games.id17.diplomacy.actions.Protect:
    long serialVersionUID -> serialVersionUID
    int ID -> ID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void setDisabledText(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> setDisabledText
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
com.tyrfing.games.id17.diplomacy.actions.RequestClaim -> com.tyrfing.games.id17.diplomacy.actions.RequestClaim:
    long serialVersionUID -> serialVersionUID
    int ID -> ID
    int BASE_FAVOR -> BASE_FAVOR
    int HONOR_COST -> HONOR_COST
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    com.tyrfing.games.id17.gui.mails.Mail getOptionMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getOptionMail
    int getFavorCost(com.tyrfing.games.id17.holdings.Holding,com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getFavorCost
    void respond(com.tyrfing.games.id17.diplomacy.Message) -> respond
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
    com.tyrfing.games.id17.gui.mails.Mail getResponseMail(com.tyrfing.games.id17.diplomacy.Message) -> getResponseMail
    java.lang.String access$0(com.tyrfing.games.id17.diplomacy.actions.RequestClaim) -> access$0
com.tyrfing.games.id17.diplomacy.actions.RequestClaim$1 -> com.tyrfing.games.id17.diplomacy.actions.c:
    int selection -> b
    com.tyrlib2.gui.Label text -> c
    com.tyrfing.games.id17.diplomacy.actions.RequestClaim this$0 -> a
    com.tyrfing.games.id17.houses.House val$sender -> d
    com.tyrfing.games.id17.houses.House val$receiver -> e
    com.tyrfing.games.id17.diplomacy.actions.RequestClaim val$request -> ae
    void createHeaderedContent(java.lang.String,java.lang.String,boolean,java.lang.String) -> a
    void selectRight(int) -> a
    void updateText(com.tyrfing.games.id17.holdings.Holding) -> a
    void onAccept() -> a_
com.tyrfing.games.id17.diplomacy.actions.RequestLoan -> com.tyrfing.games.id17.diplomacy.actions.RequestLoan:
    long serialVersionUID -> serialVersionUID
    int MIN_RELATIONS -> MIN_RELATIONS
    int FAVOR -> FAVOR
    int ID -> ID
    int WEALTHY_LOAN -> WEALTHY_LOAN
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void setDisabledText(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> setDisabledText
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    void respond(com.tyrfing.games.id17.diplomacy.Message) -> respond
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
    com.tyrfing.games.id17.gui.mails.Mail getResponseMail(com.tyrfing.games.id17.diplomacy.Message) -> getResponseMail
    com.tyrfing.games.id17.gui.mails.Mail getOptionMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getOptionMail
com.tyrfing.games.id17.diplomacy.actions.RequestLoan$1 -> com.tyrfing.games.id17.diplomacy.actions.d:
    com.tyrfing.games.id17.diplomacy.actions.RequestLoan this$0 -> a
    int val$loanSize -> b
    com.tyrfing.games.id17.diplomacy.actions.RequestLoan val$request -> c
    com.tyrfing.games.id17.houses.House val$sender -> d
    com.tyrfing.games.id17.houses.House val$receiver -> e
    void onAccept() -> a_
com.tyrfing.games.id17.diplomacy.actions.RequestResearchFunds -> com.tyrfing.games.id17.diplomacy.actions.RequestResearchFunds:
    long serialVersionUID -> serialVersionUID
    int BASE_FAVOR -> BASE_FAVOR
    int HONOR_COST -> HONOR_COST
    float RELATION_YES -> RELATION_YES
    float RELATION_NO -> RELATION_NO
    float DURATION -> DURATION
    int ID -> ID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    void respond(com.tyrfing.games.id17.diplomacy.Message) -> respond
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
    com.tyrfing.games.id17.gui.mails.Mail getResponseMail(com.tyrfing.games.id17.diplomacy.Message) -> getResponseMail
    com.tyrfing.games.id17.gui.mails.Mail getOptionMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getOptionMail
    java.lang.String access$0(com.tyrfing.games.id17.diplomacy.actions.RequestResearchFunds) -> access$0
com.tyrfing.games.id17.diplomacy.actions.RequestResearchFunds$1 -> com.tyrfing.games.id17.diplomacy.actions.e:
    int selection -> b
    com.tyrlib2.gui.Label text -> c
    com.tyrfing.games.id17.diplomacy.actions.RequestResearchFunds this$0 -> a
    com.tyrfing.games.id17.houses.House val$sender -> d
    com.tyrfing.games.id17.houses.House val$receiver -> e
    com.tyrfing.games.id17.diplomacy.actions.RequestResearchFunds val$request -> ae
    void createHeaderedContent(java.lang.String,java.lang.String,boolean,java.lang.String) -> a
    void selectRight(int) -> a
    void updateText() -> p
    void onAccept() -> a_
com.tyrfing.games.id17.diplomacy.actions.RevealPlot -> com.tyrfing.games.id17.diplomacy.actions.RevealPlot:
    long serialVersionUID -> serialVersionUID
    float BETRAYED_RELATION -> BETRAYED_RELATION
    float MAX_HELPED_RELATION -> MAX_HELPED_RELATION
    float HELPED_RELATION -> HELPED_RELATION
    float DURATION_HELPFED -> DURATION_HELPFED
    float DURATION_BETRAYED -> DURATION_BETRAYED
    float HONOR_COST -> HONOR_COST
    int ID -> ID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    com.tyrfing.games.id17.gui.mails.Mail getOptionMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getOptionMail
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
com.tyrfing.games.id17.diplomacy.actions.RevealPlot$1 -> com.tyrfing.games.id17.diplomacy.actions.f:
    com.tyrfing.games.id17.diplomacy.actions.RevealPlot this$0 -> a
    com.tyrfing.games.id17.diplomacy.actions.RevealPlot val$request -> b
    com.tyrfing.games.id17.houses.House val$sender -> c
    com.tyrfing.games.id17.houses.House val$receiver -> d
    void onAccept() -> a_
com.tyrfing.games.id17.diplomacy.actions.RevokeHolding -> com.tyrfing.games.id17.diplomacy.actions.RevokeHolding:
    long serialVersionUID -> serialVersionUID
    int RELATION_REVOKE_SUB_HOLDING -> RELATION_REVOKE_SUB_HOLDING
    int RELATION_REVOKE_BARONY -> RELATION_REVOKE_BARONY
    float RELATION_REVOKE_DURATION -> RELATION_REVOKE_DURATION
    int TYRANNY -> TYRANNY
    float TYRANNY_DECAY -> TYRANNY_DECAY
    float TYRANNY_DURATION -> TYRANNY_DURATION
    int ID -> ID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void respond(com.tyrfing.games.id17.diplomacy.Message) -> respond
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    com.tyrfing.games.id17.gui.mails.Mail getOptionMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getOptionMail
    com.tyrfing.games.id17.gui.mails.Mail getResponseMail(com.tyrfing.games.id17.diplomacy.Message) -> getResponseMail
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
com.tyrfing.games.id17.diplomacy.actions.SendDiplomat -> com.tyrfing.games.id17.diplomacy.actions.SendDiplomat:
    long serialVersionUID -> serialVersionUID
    float DURATION -> DURATION
    int COURT_POWER -> COURT_POWER
    int ID -> ID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void setDisabledText(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> setDisabledText
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
com.tyrfing.games.id17.diplomacy.actions.SendDiplomat$1 -> com.tyrfing.games.id17.diplomacy.actions.SendDiplomat$1:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.diplomacy.actions.SendDiplomat this$0 -> this$0
    void apply() -> apply
    void unapply() -> unapply
com.tyrfing.games.id17.diplomacy.actions.SendGift -> com.tyrfing.games.id17.diplomacy.actions.SendGift:
    long serialVersionUID -> serialVersionUID
    float SENDER_INCOME_FACTOR -> SENDER_INCOME_FACTOR
    float RECEIVER_INCOME_FACTOR -> RECEIVER_INCOME_FACTOR
    int RECEIVER_RELATION_MAX -> RECEIVER_RELATION_MAX
    int RECEIVER_RELATION_MIN -> RECEIVER_RELATION_MIN
    float RELATION_DURATION -> RELATION_DURATION
    int ID -> ID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void setDisabledText(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> setDisabledText
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    int getCosts(com.tyrfing.games.id17.houses.House) -> getCosts
    int getRelationChange(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getRelationChange
    com.tyrfing.games.id17.gui.mails.Mail getOptionMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getOptionMail
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
com.tyrfing.games.id17.diplomacy.actions.SupportRevolt -> com.tyrfing.games.id17.diplomacy.actions.SupportRevolt:
    long serialVersionUID -> serialVersionUID
    int ID -> ID
    com.tyrfing.games.id17.war.RebelArmy army -> army
    float EXTRA_UNITS -> EXTRA_UNITS
    float PRICE -> PRICE
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    void respond(com.tyrfing.games.id17.diplomacy.Message) -> respond
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
    int getCosts() -> getCosts
com.tyrfing.games.id17.diplomacy.actions.TradeAgreement -> com.tyrfing.games.id17.diplomacy.actions.TradeAgreement:
    long serialVersionUID -> serialVersionUID
    int MIN_RELATIONS -> MIN_RELATIONS
    int MAX_RELATION_BOOST -> MAX_RELATION_BOOST
    float RELATION_BOOST_SPEED -> RELATION_BOOST_SPEED
    int ID -> ID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void setDisabledText(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> setDisabledText
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    void respond(com.tyrfing.games.id17.diplomacy.Message) -> respond
    com.tyrfing.games.id17.gui.mails.Mail getResponseMail(com.tyrfing.games.id17.diplomacy.Message) -> getResponseMail
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
com.tyrfing.games.id17.diplomacy.actions.WhitePeace -> com.tyrfing.games.id17.diplomacy.actions.WhitePeace:
    long serialVersionUID -> serialVersionUID
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> execute
    void respond(com.tyrfing.games.id17.diplomacy.Message) -> respond
    com.tyrfing.games.id17.gui.mails.Mail getResponseMail(com.tyrfing.games.id17.diplomacy.Message) -> getResponseMail
    com.tyrfing.games.id17.gui.mails.Mail getSendMail(com.tyrfing.games.id17.diplomacy.Message) -> getSendMail
com.tyrfing.games.id17.diplomacy.category.HoldingsCategory -> com.tyrfing.games.id17.diplomacy.a.a:
    void addAction(com.tyrfing.games.id17.diplomacy.actions.DiploAction) -> a
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.diplomacy.category.IndependenceCategory -> com.tyrfing.games.id17.diplomacy.a.b:
    void addAction(com.tyrfing.games.id17.diplomacy.actions.DiploAction) -> a
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.diplomacy.category.LoansCategory -> com.tyrfing.games.id17.diplomacy.a.c:
    void addAction(com.tyrfing.games.id17.diplomacy.actions.DiploAction) -> a
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.diplomacy.category.OtherCategory -> com.tyrfing.games.id17.diplomacy.a.d:
    void addAction(com.tyrfing.games.id17.diplomacy.actions.DiploAction) -> a
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.diplomacy.category.PactsCategory -> com.tyrfing.games.id17.diplomacy.a.e:
    void addAction(com.tyrfing.games.id17.diplomacy.actions.DiploAction) -> a
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.diplomacy.category.PeaceCategory -> com.tyrfing.games.id17.diplomacy.a.f:
    void addAction(com.tyrfing.games.id17.diplomacy.actions.DiploAction) -> a
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.diplomacy.category.RelationsCategory -> com.tyrfing.games.id17.diplomacy.a.g:
    void addAction(com.tyrfing.games.id17.diplomacy.actions.DiploAction) -> a
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.diplomacy.category.RequestCategory -> com.tyrfing.games.id17.diplomacy.a.h:
    void addAction(com.tyrfing.games.id17.diplomacy.actions.DiploAction) -> a
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.effects.AddBuildingEffect -> com.tyrfing.games.id17.a.a:
    java.lang.String buildingName -> a
    java.lang.String holdingType -> b
    void apply(com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.effects.AddBuildingMultEffect -> com.tyrfing.games.id17.a.b:
    com.tyrfing.games.id17.buildings.Building$TYPE type -> a
    float value -> b
    int stat -> c
    void apply(com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.effects.AddGoodMultEffect -> com.tyrfing.games.id17.a.c:
    int good -> a
    int stat -> b
    float value -> c
    void apply(com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.effects.AddHouseMultEffect -> com.tyrfing.games.id17.a.d:
    int stat -> a
    float value -> b
    void apply(com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.effects.AddProductionEffect -> com.tyrfing.games.id17.a.e:
    java.lang.String[] inGoods -> a
    java.lang.String[] outGoods -> b
    java.lang.String holding -> c
    void apply(com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.effects.AddUnitMultEffect -> com.tyrfing.games.id17.a.f:
    java.lang.String unitName -> a
    float value -> b
    void apply(com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.effects.EnableBuildingEffect -> com.tyrfing.games.id17.a.g:
    java.lang.String[] buildingNames -> a
    java.lang.String[] holdingTypes -> b
    void apply(com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.effects.EnableUnitEffect -> com.tyrfing.games.id17.a.h:
    java.lang.String unitName -> a
    void apply(com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.effects.HoldingStatEffect -> com.tyrfing.games.id17.a.i:
    java.lang.String stat -> a
    float value -> b
    void apply(com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.effects.IEffect -> com.tyrfing.games.id17.a.j:
    void apply(com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.geometry.Grass -> com.tyrfing.games.id17.b.a:
    com.tyrlib2.graphics.renderables.Entity grass -> a
    com.tyrlib2.graphics.scene.SceneNode node -> b
com.tyrfing.games.id17.geometry.GrassMaterial -> com.tyrfing.games.id17.b.b:
    int textureUniformHandle -> a
    int textureCoordinateHandle -> b
    int ambientHandle -> c
    int windDirHandle -> d
    int ownerHandle -> e
    java.lang.String textureName -> f
    com.tyrlib2.graphics.renderer.Texture texture -> g
    com.tyrfing.games.id17.world.WorldChunk chunk -> h
    float time -> i
    com.tyrlib2.math.Vector3 windDir -> v
    float[] mvpMatrix -> w
    int modelMatrixHandle -> x
    void setup(java.lang.String) -> a
    void render(com.tyrlib2.graphics.renderer.Mesh,float[]) -> a
    void passMesh(com.tyrlib2.graphics.renderer.Mesh) -> a
    void passTexture(int) -> a
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
com.tyrfing.games.id17.gui.CameraController -> com.tyrfing.games.id17.gui.a:
    com.tyrlib2.math.Vector2[] lastPoint -> f
    float lastDistance -> g
    com.tyrlib2.graphics.scene.SceneNode camNode -> h
    com.tyrlib2.math.Vector2 right -> i
    com.tyrlib2.math.Vector2 up -> j
    float currentZoom -> k
    long priority -> l
    int[] fingerID -> m
    com.tyrlib2.movement.Movement movement -> n
    com.tyrlib2.movement.Speed speed -> a
    int keyW -> o
    int keyA -> p
    int keyS -> q
    int keyD -> r
    float accTime -> s
    com.tyrlib2.math.Vector3 INIT_LOOK_VECTOR -> b
    com.tyrlib2.math.Quaternion ORT_ROT -> c
    float ROTATE_SPEED -> d
    float lastSpeed -> t
    com.tyrlib2.math.Vector3 lastMove -> u
    float inertia -> v
    float STRATEGIC_VIEW_HEIGHT -> e
    boolean inStrategicView -> w
    void destroy() -> a
    void updateAxes() -> b
    boolean onTouchMove(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent,int) -> a
    void zoom(float) -> a
    boolean onTouchDown(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent,int) -> b
    boolean onTouchUp(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent,int) -> c
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
    long getPriority() -> c
    void focus(com.tyrlib2.math.Vector3) -> a
    void focus(com.tyrlib2.graphics.scene.SceneNode) -> a
    boolean onPress(com.tyrlib2.input.IKeyboardEvent) -> a
    boolean onRelease(com.tyrlib2.input.IKeyboardEvent) -> b
    boolean access$0(com.tyrfing.games.id17.gui.CameraController) -> a
    com.tyrlib2.graphics.scene.SceneNode access$1(com.tyrfing.games.id17.gui.CameraController) -> b
    void access$2(com.tyrfing.games.id17.gui.CameraController,boolean) -> a
com.tyrfing.games.id17.gui.CameraController$1 -> com.tyrfing.games.id17.gui.b:
    com.tyrfing.games.id17.gui.CameraController this$0 -> a
    void run() -> run
com.tyrfing.games.id17.gui.CameraController$2 -> com.tyrfing.games.id17.gui.c:
    com.tyrfing.games.id17.gui.CameraController this$0 -> a
    com.tyrlib2.graphics.scene.SceneNode val$node -> b
    com.tyrlib2.math.Vector3 getTargetPos() -> a
com.tyrfing.games.id17.gui.DateGUI -> com.tyrfing.games.id17.gui.d:
    com.tyrlib2.math.Vector2 FAST_FORWARD_BUTTON_POS -> a
    com.tyrlib2.gui.ScaledVector2 FAST_FORWARD_BUTTON_OFFSET -> b
    com.tyrlib2.math.Vector2 DATE_WINDOW_POS -> c
    com.tyrlib2.gui.ScaledVector2 FAST_FORWARD_BUTTON_SIZE -> d
    com.tyrlib2.gui.ScaledVector2 _FAST_FORWARD_BUTTON_SIZE -> e
    com.tyrlib2.gui.ScaledVector2 DATE_WINDOW_SIZE -> f
    com.tyrlib2.gui.ScaledVector2 DATE_WINDOW_OFFSET -> g
    com.tyrlib2.gui.ScaledVector2 DATE_POS -> h
    com.tyrlib2.gui.ScaledVector2 PLAY_BUTTON_POS -> i
    com.tyrlib2.gui.ScaledVector2 PLAY_BUTTON_SIZE -> j
    com.tyrlib2.gui.ScaledVector2 FAST_FORWARD_BUTTON_POS_ -> k
    com.tyrlib2.gui.ScaledVector2 SPEED_BUTTON_POS -> l
    com.tyrlib2.gui.ScaledVector2 SPEED_BUTTON_SIZE -> m
    com.tyrlib2.gui.ScaledVector2 SPEED_BUTTON_OFFSET -> n
    com.tyrlib2.gui.ImageBox play -> o
    com.tyrlib2.gui.Window dateHolder -> p
    boolean touchStartedInWindow -> q
    java.util.List speedIcons -> r
    com.tyrlib2.gui.Window speedHolder -> s
    com.tyrlib2.gui.ImageBox access$0(com.tyrfing.games.id17.gui.DateGUI) -> a
    void access$1(com.tyrfing.games.id17.gui.DateGUI,boolean) -> a
    boolean access$2(com.tyrfing.games.id17.gui.DateGUI) -> b
    java.util.List access$3(com.tyrfing.games.id17.gui.DateGUI) -> c
com.tyrfing.games.id17.gui.DateGUI$1 -> com.tyrfing.games.id17.gui.e:
    com.tyrfing.games.id17.gui.DateGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.DateGUI$2 -> com.tyrfing.games.id17.gui.f:
    com.tyrfing.games.id17.gui.DateGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.DateGUI$3 -> com.tyrfing.games.id17.gui.g:
    com.tyrfing.games.id17.gui.DateGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.DateGUI$4 -> com.tyrfing.games.id17.gui.h:
    com.tyrfing.games.id17.gui.DateGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.DateGUI$5 -> com.tyrfing.games.id17.gui.i:
    com.tyrfing.games.id17.gui.DateGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.DateGUI$6 -> com.tyrfing.games.id17.gui.j:
    com.tyrfing.games.id17.gui.DateGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.DefaultItemListEntry -> com.tyrfing.games.id17.gui.DefaultItemListEntry:
    boolean click -> a
    com.tyrlib2.math.Vector2 clickPoint -> e
    com.tyrlib2.graphics.renderables.Image2 image -> b
    com.tyrlib2.gui.Window rect -> c
    boolean enabled -> f
    boolean activated -> d
    float getAlpha() -> b
    void setAlpha(float) -> a
    void setEnabled(boolean) -> a
    void onClick() -> f_
    void unhighlight() -> d
    void highlight() -> g_
    boolean access$0(com.tyrfing.games.id17.gui.DefaultItemListEntry) -> a
    void access$1(com.tyrfing.games.id17.gui.DefaultItemListEntry,boolean) -> a
    boolean access$2(com.tyrfing.games.id17.gui.DefaultItemListEntry) -> b
    void access$3(com.tyrfing.games.id17.gui.DefaultItemListEntry,com.tyrlib2.math.Vector2) -> a
    com.tyrlib2.math.Vector2 access$4(com.tyrfing.games.id17.gui.DefaultItemListEntry) -> c
com.tyrfing.games.id17.gui.DefaultItemListEntry$1 -> com.tyrfing.games.id17.gui.k:
    com.tyrfing.games.id17.gui.DefaultItemListEntry this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.DefaultItemListEntry$2 -> com.tyrfing.games.id17.gui.l:
    com.tyrfing.games.id17.gui.DefaultItemListEntry this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.DefaultItemListEntry$3 -> com.tyrfing.games.id17.gui.m:
    com.tyrfing.games.id17.gui.DefaultItemListEntry this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.DefaultItemListEntry$4 -> com.tyrfing.games.id17.gui.n:
    com.tyrfing.games.id17.gui.DefaultItemListEntry this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.DefaultItemListEntry$BG_TYPE -> com.tyrfing.games.id17.gui.DefaultItemListEntry$BG_TYPE:
    com.tyrfing.games.id17.gui.DefaultItemListEntry$BG_TYPE IMAGE -> IMAGE
    com.tyrfing.games.id17.gui.DefaultItemListEntry$BG_TYPE RECT -> RECT
    com.tyrfing.games.id17.gui.DefaultItemListEntry$BG_TYPE[] ENUM$VALUES -> a
    com.tyrfing.games.id17.gui.DefaultItemListEntry$BG_TYPE[] values() -> values
    com.tyrfing.games.id17.gui.DefaultItemListEntry$BG_TYPE valueOf(java.lang.String) -> valueOf
com.tyrfing.games.id17.gui.GUI -> com.tyrfing.games.id17.gui.o:
    void hide() -> a
    boolean isVisible() -> b
com.tyrfing.games.id17.gui.MainGUI -> com.tyrfing.games.id17.gui.p:
    com.tyrlib2.math.Vector2 HOUSE_WINDOW_POS -> a
    com.tyrlib2.math.Vector2 DIPLO_BUTTON_POS -> b
    com.tyrlib2.gui.ScaledVector2 ARMY_BUTTON_OFFSET -> c
    com.tyrlib2.gui.ScaledVector2 HOUSE_WINDOW_SIZE -> d
    com.tyrlib2.gui.ScaledVector2 DIPLO_BUTTON_SIZE -> e
    com.tyrlib2.gui.ScaledVector2 ARMY_BUTTON_SIZE -> f
    com.tyrlib2.gui.ScaledVector2 DIPLO_ICON_POS -> g
    com.tyrlib2.gui.ScaledVector2 DIPLO_ICON_SIZE -> h
    com.tyrlib2.gui.ScaledVector2 HOUSE_BUTTON_POS -> i
    com.tyrlib2.gui.ScaledVector2 HOUSE_BUTTON_SIZE -> j
    com.tyrlib2.gui.ScaledVector2 JOIN_GAME_SIZE -> k
    com.tyrlib2.math.Vector2 JOIN_GAME_POS -> l
    com.tyrfing.games.id17.gui.DateGUI dateGUI -> p
    com.tyrfing.games.id17.gui.PickerGUI pickerGUI -> m
    com.tyrfing.games.id17.gui.mails.MailboxGUI mailboxGUI -> n
    com.tyrfing.games.id17.gui.house.HouseGUI houseGUI -> o
    com.tyrlib2.gui.Window joinGame -> q
    void buildDateGUI() -> d
    void display() -> a
    void mainDisplay() -> b
    void hideAllSubGUIs() -> c
com.tyrfing.games.id17.gui.MainGUI$1 -> com.tyrfing.games.id17.gui.q:
    com.tyrfing.games.id17.gui.MainGUI this$0 -> a
    com.tyrlib2.gui.Label val$caption -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.MainGUI$2 -> com.tyrfing.games.id17.gui.r:
    com.tyrfing.games.id17.gui.MainGUI this$0 -> a
    com.tyrlib2.gui.Label val$caption -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.MainGUI$3 -> com.tyrfing.games.id17.gui.s:
    com.tyrfing.games.id17.gui.MainGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.MenuPoint -> com.tyrfing.games.id17.gui.t:
    boolean visible -> a
    java.util.List mainElements -> b
    void show() -> c
    void hide() -> a
    boolean isVisible() -> b
com.tyrfing.games.id17.gui.PaperButton -> com.tyrfing.games.id17.gui.u:
    com.tyrlib2.gui.Frame frame -> a
    com.tyrlib2.gui.Label label -> b
    boolean click -> c
    boolean enabled -> d
    void unhighlight() -> a
    void highlight() -> d
    float getAlpha() -> b
    com.tyrlib2.gui.Label getLabel() -> i_
    void enable() -> j_
    void disable() -> g
    boolean access$0(com.tyrfing.games.id17.gui.PaperButton) -> a
    com.tyrlib2.gui.Frame access$1(com.tyrfing.games.id17.gui.PaperButton) -> b
    void access$2(com.tyrfing.games.id17.gui.PaperButton,boolean) -> a
    boolean access$3(com.tyrfing.games.id17.gui.PaperButton) -> c
com.tyrfing.games.id17.gui.PaperButton$1 -> com.tyrfing.games.id17.gui.v:
    com.tyrfing.games.id17.gui.PaperButton this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.PaperButton$2 -> com.tyrfing.games.id17.gui.w:
    com.tyrfing.games.id17.gui.PaperButton this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.PaperButton$3 -> com.tyrfing.games.id17.gui.x:
    com.tyrfing.games.id17.gui.PaperButton this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.PickerGUI -> com.tyrfing.games.id17.gui.y:
    com.tyrlib2.math.Vector2 initPoint -> d
    boolean active -> e
    com.tyrfing.games.id17.gui.holding.HoldingGUI holdingGUI -> a
    com.tyrfing.games.id17.gui.war.ArmyGUI armyGUI -> b
    com.tyrfing.games.id17.holdings.Holding highlighted -> f
    com.tyrfing.games.id17.war.Army pickedArmy -> c
    com.tyrlib2.graphics.renderables.Entity selectedEntity -> g
    com.tyrlib2.graphics.materials.OutlineMaterial highlightOutline1 -> h
    com.tyrlib2.graphics.materials.OutlineMaterial highlightOutlineAnimated1 -> i
    com.tyrlib2.graphics.materials.OutlineMaterial highlightOutline2 -> j
    com.tyrlib2.graphics.materials.OutlineMaterial highlightOutlineAnimated2 -> k
    com.tyrlib2.graphics.renderables.Outline highlight -> l
    com.tyrlib2.graphics.renderables.Outline highlight2 -> m
    long getPriority() -> c
    boolean onTouchDown(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent,int) -> b
    boolean onTouchUp(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent,int) -> c
    boolean onTouchMove(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent,int) -> a
    void highlightMoveTarget(com.tyrlib2.math.Vector2) -> a
    boolean isEnabled() -> h_
    void showBattle(com.tyrfing.games.id17.war.Battle) -> a
    void hideAll() -> b
    void unhighlight() -> d
com.tyrfing.games.id17.gui.PlayerController -> com.tyrfing.games.id17.gui.PlayerController:
    long serialVersionUID -> serialVersionUID
    void informMessage(com.tyrfing.games.id17.diplomacy.Message) -> informMessage
    void informNewHolding(com.tyrfing.games.id17.holdings.Holding) -> informNewHolding
    void informLostHolding(com.tyrfing.games.id17.holdings.Holding) -> informLostHolding
    void destroy() -> destroy
    void control(com.tyrfing.games.id17.houses.House) -> control
    void updateBorderColors() -> updateBorderColors
    boolean highlightBarony(com.tyrfing.games.id17.holdings.Barony) -> highlightBarony
    com.tyrlib2.util.Color getStrategicColor() -> getStrategicColor
com.tyrfing.games.id17.gui.Scoreboard -> com.tyrfing.games.id17.gui.z:
    java.util.List playerScores -> d
    com.tyrlib2.math.Vector2 BOARD_POS -> a
    com.tyrlib2.gui.ScaledVector2 SIZE -> b
    com.tyrlib2.gui.ScaledVector2 POINT_OFFSET -> c
    boolean active -> e
    void removePlayer(int) -> a
    void addPlayer(int,int) -> a
    void onNewConnection(com.tyrlib2.networking.Connection) -> onNewConnection
    void onConnectionLost(com.tyrlib2.networking.Connection) -> onConnectionLost
    void onReceivedData(com.tyrlib2.networking.Connection,java.lang.Object) -> onReceivedData
    void onSurfaceCreated() -> onSurfaceCreated
    void onSurfaceChanged() -> onSurfaceChanged
    void onFrameRendered(float) -> onFrameRendered
    void show() -> a
    boolean access$0(com.tyrfing.games.id17.gui.Scoreboard) -> a
    void access$1(com.tyrfing.games.id17.gui.Scoreboard,int) -> a
com.tyrfing.games.id17.gui.Scoreboard$1 -> com.tyrfing.games.id17.gui.aa:
    com.tyrfing.games.id17.gui.Scoreboard this$0 -> a
    com.tyrfing.games.id17.networking.JoinGame val$jg -> b
    void run() -> run
com.tyrfing.games.id17.gui.Scoreboard$2 -> com.tyrfing.games.id17.gui.ab:
    com.tyrfing.games.id17.gui.Scoreboard this$0 -> a
    com.tyrfing.games.id17.networking.NewPlayer val$np -> b
    void run() -> run
com.tyrfing.games.id17.gui.Scoreboard$3 -> com.tyrfing.games.id17.gui.ac:
    com.tyrfing.games.id17.gui.Scoreboard this$0 -> a
    com.tyrfing.games.id17.networking.PlayerQuit val$pq -> b
    void run() -> run
com.tyrfing.games.id17.gui.Scoreboard$Score -> com.tyrfing.games.id17.gui.ad:
    com.tyrlib2.gui.Label name -> a
    com.tyrlib2.gui.Label points -> b
    int playerID -> c
com.tyrfing.games.id17.gui.TabGUI -> com.tyrfing.games.id17.gui.ae:
    com.tyrlib2.gui.ScaledVector2 HEADER_POS -> a
    com.tyrlib2.gui.ScaledVector2 TAB_POS -> b
    com.tyrlib2.gui.ScaledVector2 TAB_SIZE -> c
    com.tyrlib2.gui.ScaledVector2 TAB_PADDING -> d
    com.tyrlib2.util.Color WOOD_COLOR -> e
    com.tyrlib2.util.Color GOLD_COLOR -> f
    com.tyrlib2.gui.Paint GOLDEN_WOOD_PAINT -> g
    com.tyrlib2.gui.Paint GOLDEN_WOOD_PAINT2 -> h
    com.tyrlib2.util.Color GRAY_BORDER -> i
    com.tyrlib2.util.Color GRAY_FILL -> j
    com.tyrlib2.gui.Paint GRAY_PAINT -> k
    com.tyrlib2.gui.ScaledVector2 LEFT_LABEL_POS -> l
    com.tyrlib2.gui.ScaledVector2 RIGHT_LABEL_POS -> m
    com.tyrlib2.gui.ScaledVector2 WINDOW_SIZE -> n
    com.tyrlib2.gui.ScaledVector2 WINDOW_POS -> o
    com.tyrlib2.math.Vector2 SIGIL_HOLDER_POS -> p
    com.tyrlib2.gui.ScaledVector2 SIGIL_HOLDER_SIZE -> q
    com.tyrlib2.math.Vector2 SIGIL_POS -> r
    com.tyrlib2.gui.ScaledVector2 SIGIL_SIZE -> s
    com.tyrlib2.gui.ScaledVector2 PADDING -> t
    com.tyrlib2.math.Vector2 CANCEL_POS -> u
    com.tyrlib2.gui.ScaledVector2 CANCEL_HOLDER_OFFSET -> v
    com.tyrlib2.math.Vector2 CANCEL_HOLDER_POS -> w
    float passedUpdateTime -> I
    com.tyrlib2.gui.Window main -> x
    com.tyrlib2.gui.Window cancel -> y
    java.lang.Object displayed -> z
    boolean redisplay -> A
    java.util.List options -> B
    java.util.List subGUIs -> C
    boolean hiding -> D
    com.tyrlib2.math.Vector2 headerSize -> E
    com.tyrlib2.gui.Window header -> F
    com.tyrlib2.gui.Window subHeader -> G
    java.lang.String[] tabNames -> H
    void hideSubUIs(com.tyrfing.games.id17.gui.GUI) -> a
    void unhighlightTabs() -> c
    void setOptionsVisible(boolean) -> a
    void show(java.lang.Object) -> a
    void showOptions() -> d
    void display() -> e
    void update() -> f
    void onUpdate(float) -> onUpdate
    void hide() -> a
    void hideOptions() -> g
    void show() -> h
    boolean isVisible() -> b
    void finishedMovement() -> i
com.tyrfing.games.id17.gui.TabGUI$1 -> com.tyrfing.games.id17.gui.af:
    com.tyrfing.games.id17.gui.TabGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.TabGUI$2 -> com.tyrfing.games.id17.gui.ag:
    com.tyrfing.games.id17.gui.TabGUI this$0 -> a
    com.tyrlib2.gui.ImageBox val$tabHolder -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.charts.PieChart -> com.tyrfing.games.id17.gui.a.a:
    com.tyrlib2.bitmap.ICanvas canvas -> a
    com.tyrlib2.bitmap.IDrawableBitmap bitmap -> b
    java.util.List dataSets -> c
    float total -> d
    int width -> e
    int height -> f
    void addDataSet(float,com.tyrlib2.util.Color,java.lang.String) -> a
    com.tyrlib2.graphics.renderer.Texture build(java.lang.String) -> a
    void blurfast() -> a
com.tyrfing.games.id17.gui.charts.PieChart$DataSet -> com.tyrfing.games.id17.gui.a.b:
    float value -> a
    com.tyrlib2.util.Color color -> b
    java.lang.String label -> c
com.tyrfing.games.id17.gui.holding.BuildingEntry -> com.tyrfing.games.id17.gui.b.a:
    com.tyrlib2.gui.ScaledVector1 SIZE_X -> a
    com.tyrlib2.gui.ScaledVector1 SIZE_Y -> e
    com.tyrlib2.gui.ScaledVector2 NAME_LABEL -> f
    com.tyrlib2.gui.ScaledVector2 ICON_POS -> g
    com.tyrlib2.gui.ScaledVector2 ICON_SIZE -> h
    com.tyrlib2.gui.ScaledVector1 COST_LABEL_X -> i
    com.tyrlib2.gui.ScaledVector1 COST_ICON_POS_X -> j
    com.tyrlib2.gui.ScaledVector1 COST_LABEL_Y -> k
    com.tyrlib2.gui.ScaledVector1 COST_ICON_POS_Y -> l
    com.tyrlib2.gui.ScaledVector2 COST_ICON_SIZE -> m
    com.tyrfing.games.id17.buildings.Building$TYPE type -> n
    com.tyrfing.games.id17.gui.holding.ProductionGUI ui -> p
    com.tyrlib2.gui.Label nameLabel -> q
    com.tyrlib2.gui.Label costLabel -> r
    com.tyrfing.games.id17.holdings.Holding holding -> s
    void update() -> k_
    void onClick() -> f_
com.tyrfing.games.id17.gui.holding.HoldingGUI -> com.tyrfing.games.id17.gui.b.b:
    com.tyrlib2.math.Vector2 BUILD_HOLDER_POS -> I
    com.tyrlib2.gui.ScaledVector2 BUILD_HOLDER_OFFSET -> J
    com.tyrlib2.math.Vector2 ARMY_HOLDER_POS -> K
    com.tyrlib2.gui.ScaledVector2 ARMY_HOLDER_OFFSET -> L
    com.tyrlib2.math.Vector2 RAISE_ARMY_HOLDER_POS -> M
    com.tyrlib2.gui.ScaledVector2 RAISE_ARMY_HOLDER_OFFSET -> N
    com.tyrlib2.math.Vector2 OVERVIEW_HOLDER_POS -> O
    com.tyrlib2.gui.ScaledVector2 OVERVIEW_HOLDER_OFFSET -> P
    com.tyrlib2.gui.ScaledVector2 OVERVIEW_SIZE -> Q
    com.tyrlib2.gui.ScaledVector2 OVERVIEW_POS -> R
    java.lang.String[] HOLDING_GUI_TAB_NAMES -> S
    java.lang.String[] HOLDING_GUI_TAB_ATLAS_NAMES -> T
    java.lang.String[] HOLDING_GUI_TAB_REGION_NAMES -> U
    java.lang.String[] HOLDING_GUI_TAB_TOOLTIPS -> V
    com.tyrlib2.util.Color MERCHANT_COLOR -> W
    com.tyrlib2.util.Color SCHOLAR_COLOR -> X
    com.tyrlib2.util.Color PEASANT_COLOR -> Y
    com.tyrlib2.util.Color WORKER_COLOR -> Z
    com.tyrlib2.gui.ImageBox raiseArmyHolder -> ab
    java.util.List disableHolders -> ac
    com.tyrfing.games.id17.gui.war.ArmyBuilderGUI armyBuilderGUI -> ad
    com.tyrfing.games.id17.gui.holding.ProductionGUI productionGUI -> aa
    com.tyrlib2.gui.Window subHeader -> ae
    com.tyrlib2.gui.Window popHeader -> af
    com.tyrlib2.gui.Window subHeader2 -> ag
    com.tyrlib2.gui.ImageBox chartImage -> ah
    com.tyrlib2.gui.Label holdingName -> ai
    com.tyrlib2.gui.Label incomeLabel -> aj
    com.tyrlib2.gui.Label prodLabel -> ak
    com.tyrlib2.gui.Label researchLabel -> al
    com.tyrlib2.gui.Label revoltLabel -> am
    com.tyrlib2.gui.Label popLabel -> an
    boolean raiseEnabled -> ao
    void display() -> e
    void raise() -> j
    void displayHouse() -> l
    com.tyrfing.games.id17.holdings.Holding getDisplayed() -> k
    boolean isFinished() -> isFinished
    void update() -> f
    void showOptions() -> d
    void access$0(com.tyrfing.games.id17.gui.holding.HoldingGUI) -> a
    com.tyrfing.games.id17.gui.war.ArmyBuilderGUI access$1(com.tyrfing.games.id17.gui.holding.HoldingGUI) -> b
    boolean access$2(com.tyrfing.games.id17.gui.holding.HoldingGUI) -> c
com.tyrfing.games.id17.gui.holding.HoldingGUI$1 -> com.tyrfing.games.id17.gui.b.c:
    com.tyrfing.games.id17.gui.holding.HoldingGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.holding.HoldingGUI$2 -> com.tyrfing.games.id17.gui.b.d:
    com.tyrfing.games.id17.gui.holding.HoldingGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.holding.HoldingGUI$3 -> com.tyrfing.games.id17.gui.b.e:
    com.tyrfing.games.id17.gui.holding.HoldingGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.holding.HoldingGUI$4 -> com.tyrfing.games.id17.gui.b.f:
    com.tyrfing.games.id17.gui.holding.HoldingGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.holding.HoldingGUI$5 -> com.tyrfing.games.id17.gui.b.g:
    com.tyrfing.games.id17.gui.holding.HoldingGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.holding.OverviewGUI -> com.tyrfing.games.id17.gui.b.h:
    com.tyrlib2.gui.ScaledVector2 HOLDING_NAME_POS -> c
    com.tyrlib2.gui.ScaledVector2 HOLDING_INFO_POS -> d
    com.tyrlib2.gui.ScaledVector2 HOLDING_INFO_SIZE -> e
    com.tyrlib2.gui.ScaledVector2 HOLDING_STATS_POS -> f
    com.tyrlib2.gui.ScaledVector2 HOLDING_STATS_SIZE -> g
    com.tyrlib2.gui.ScaledVector2 INCOME_LABEL_POS -> h
    com.tyrlib2.gui.ScaledVector2 PRODUCTIVITY_LABEL_POS -> i
    com.tyrlib2.gui.ScaledVector2 RESEARCH_LABEL_POS -> j
    com.tyrlib2.gui.ScaledVector2 REVOLT_RISK_LABEL_POS -> k
    com.tyrlib2.gui.ScaledVector2 SUPPLIES_LABEL_POS -> l
com.tyrfing.games.id17.gui.holding.ProductionGUI -> com.tyrfing.games.id17.gui.b.i:
    com.tyrlib2.gui.ScaledVector2 PROD_POS -> c
    com.tyrlib2.gui.ScaledVector2 PROD_SIZE -> d
    com.tyrlib2.gui.ScaledVector2 BUILD_POS -> e
    com.tyrlib2.gui.ScaledVector1 BUILD_SIZEX -> f
    com.tyrlib2.gui.ScaledVector1 BUILD_SIZEY -> g
    com.tyrlib2.gui.ScaledVector2 PROD_LABEL_POS -> h
    com.tyrlib2.gui.ScaledVector2 PROD_BASE_POS -> i
    com.tyrlib2.gui.ScaledVector2 PROD_ARROW_POS -> j
    com.tyrlib2.gui.ScaledVector2 PROD_ARROW_SIZE -> k
    com.tyrlib2.gui.ScaledVector2 SUPPLY_BASE_POS -> l
    com.tyrlib2.gui.ScaledVector2 SUPPLY_SIZE -> m
    com.tyrlib2.gui.Window parent -> o
    com.tyrfing.games.id17.holdings.Holding displayed -> n
    java.util.List producedGoods -> p
    com.tyrlib2.gui.Window prodBG -> q
    com.tyrlib2.gui.Window buildBG -> r
    com.tyrlib2.gui.ItemList buildList -> s
    void show(com.tyrfing.games.id17.holdings.Holding) -> a
    void hide() -> a
    void unHighlightBuildings() -> d
    void createGoodProductionGUI(int,com.tyrfing.games.id17.trade.GoodProduction,java.lang.String,com.tyrlib2.gui.Window,java.util.List,com.tyrlib2.math.Vector2,com.tyrfing.games.id17.holdings.Holding) -> a
    void update() -> e
com.tyrfing.games.id17.gui.house.ActionEntry -> com.tyrfing.games.id17.gui.c.a:
    com.tyrlib2.gui.ScaledVector1 SIZE_X -> a
    com.tyrlib2.gui.ScaledVector1 SIZE_Y -> e
    com.tyrlib2.gui.ScaledVector2 NAME_LABEL -> f
    com.tyrlib2.gui.Label text -> g
    com.tyrfing.games.id17.Action action -> h
    com.tyrfing.games.id17.houses.House sender -> i
    com.tyrfing.games.id17.houses.House receiver -> j
    void onClick() -> f_
    void setSender(com.tyrfing.games.id17.houses.House) -> a
    void setReceiver(com.tyrfing.games.id17.houses.House) -> b
com.tyrfing.games.id17.gui.house.ActionGUI -> com.tyrfing.games.id17.gui.c.b:
    com.tyrlib2.gui.ScaledVector2 CATEGORY_POS -> c
    com.tyrlib2.gui.ScaledVector2 CATEGORY_SIZE -> d
    com.tyrfing.games.id17.houses.House requester -> e
    com.tyrfing.games.id17.houses.House responder -> f
    com.tyrlib2.gui.ItemList categoryItemLists -> g
    com.tyrlib2.gui.ItemList[] actionItemLists -> h
    java.util.List categories -> i
    int currentCategory -> j
    void rebuild() -> d
    void show(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> a
    void hide() -> a
    void clear() -> e
    void hideActions() -> f
    void displayActions(com.tyrfing.games.id17.ActionCategory) -> a
    void displayActions(int) -> a
    void update() -> g
com.tyrfing.games.id17.gui.house.CategoryEntry -> com.tyrfing.games.id17.gui.c.c:
    com.tyrlib2.gui.ScaledVector1 SIZE_X -> a
    com.tyrlib2.gui.ScaledVector1 SIZE_Y -> e
    com.tyrlib2.gui.ScaledVector2 NAME_LABEL -> f
    com.tyrlib2.gui.Label text -> h
    com.tyrfing.games.id17.gui.house.ActionGUI ui -> i
    com.tyrfing.games.id17.ActionCategory category -> g
    void onClick() -> f_
com.tyrfing.games.id17.gui.house.HouseEntry -> com.tyrfing.games.id17.gui.c.d:
    com.tyrlib2.gui.ScaledVector1 SIZE_X -> a
    com.tyrlib2.gui.ScaledVector1 SIZE_Y -> e
    com.tyrlib2.gui.ScaledVector2 OPINION_POS -> f
    com.tyrfing.games.id17.houses.House house1 -> g
    com.tyrfing.games.id17.houses.House house2 -> h
    boolean flipped -> i
    int countTraits -> j
    void onClick() -> f_
    void addTrait(java.lang.String) -> a
    java.lang.String getRelationText() -> l_
com.tyrfing.games.id17.gui.house.HouseGUI -> com.tyrfing.games.id17.gui.c.e:
    java.lang.String[] HOUSE_GUI_TAB_NAMES -> I
    java.lang.String[] HOUSE_GUI_TAB_ATLAS_NAMES -> J
    java.lang.String[] HOUSE_GUI_TAB_REGION_NAMES -> K
    java.lang.String[] HOUSE_GUI_TAB_TOOLTIPS -> L
    com.tyrfing.games.id17.gui.house.HouseOverviewGUI houseOverviewGUI -> M
    com.tyrfing.games.id17.gui.house.ActionGUI diploGUI -> N
    com.tyrfing.games.id17.gui.house.ActionGUI intrigueGUI -> O
    com.tyrfing.games.id17.gui.house.IntrigueProjectGUI intrigueProjectGUI -> P
    com.tyrfing.games.id17.gui.technology.TechnologyGUI techGUI -> Q
    com.tyrfing.games.id17.gui.laws.LawSetGUI lawGUI -> R
    int holdingFocus -> S
    int armyFocus -> T
    int goldLastFrame -> U
    int honorLastFrame -> V
    int malesLastFrame -> W
    int femalesLastFrame -> X
    com.tyrlib2.gui.Label currentTech -> Y
    com.tyrlib2.gui.Label currentIntrigue -> Z
    void show() -> h
    void display() -> e
    com.tyrfing.games.id17.houses.House getDisplayed() -> j
    void update() -> f
    boolean isFinished() -> isFinished
    int access$0(com.tyrfing.games.id17.gui.house.HouseGUI) -> a
    void access$1(com.tyrfing.games.id17.gui.house.HouseGUI,int) -> a
    int access$2(com.tyrfing.games.id17.gui.house.HouseGUI) -> b
    void access$3(com.tyrfing.games.id17.gui.house.HouseGUI,int) -> b
com.tyrfing.games.id17.gui.house.HouseGUI$1 -> com.tyrfing.games.id17.gui.c.f:
    com.tyrfing.games.id17.gui.house.HouseGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.house.HouseGUI$2 -> com.tyrfing.games.id17.gui.c.g:
    com.tyrfing.games.id17.gui.house.HouseGUI this$0 -> a
    com.tyrfing.games.id17.gui.TabGUI val$gui -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.house.HouseGUI$3 -> com.tyrfing.games.id17.gui.c.h:
    com.tyrfing.games.id17.gui.house.HouseGUI this$0 -> a
    com.tyrfing.games.id17.gui.TabGUI val$gui -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.house.HouseGUI$4 -> com.tyrfing.games.id17.gui.c.i:
    com.tyrfing.games.id17.gui.house.HouseGUI this$0 -> a
    com.tyrfing.games.id17.gui.TabGUI val$gui -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.house.HouseGUI$5 -> com.tyrfing.games.id17.gui.c.j:
    com.tyrfing.games.id17.gui.house.HouseGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.house.HouseGUI$6 -> com.tyrfing.games.id17.gui.c.k:
    com.tyrfing.games.id17.gui.house.HouseGUI this$0 -> a
    com.tyrfing.games.id17.gui.TabGUI val$gui -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.house.HouseOverviewGUI -> com.tyrfing.games.id17.gui.c.l:
    com.tyrlib2.gui.ScaledVector2 BG_DATA_POS -> c
    com.tyrlib2.gui.ScaledVector2 BG_DATA_SIZE -> d
    com.tyrlib2.gui.ScaledVector2 BG_BRANCH_POS -> e
    com.tyrlib2.gui.ScaledVector2 BG_BRANCH_SIZE -> f
    com.tyrlib2.gui.ScaledVector2 GOLD_ICON_SIZE -> g
    com.tyrlib2.gui.ScaledVector2 GOLD_ICON_POS -> h
    com.tyrlib2.gui.ScaledVector2 HONOR_ICON_SIZE -> i
    com.tyrlib2.gui.ScaledVector2 HONOR_ICON_POS -> j
    com.tyrlib2.gui.ScaledVector1 ICON_OFFSET -> k
    com.tyrlib2.gui.ScaledVector2 MALE_ICON_SIZE -> l
    com.tyrlib2.gui.ScaledVector2 MALE_ICON_POS -> m
    com.tyrlib2.gui.ScaledVector2 FEMALE_ICON_SIZE -> n
    com.tyrlib2.gui.ScaledVector2 FEMALE_ICON_POS -> o
    com.tyrlib2.gui.ScaledVector2 HOUSE_NAME_POS -> p
    com.tyrlib2.gui.ScaledVector2 PLAYER_DATA_POS -> q
    com.tyrlib2.gui.ScaledVector2 OVERLORD_DATA_POS -> r
    com.tyrlib2.gui.ScaledVector2 REPUTATION_POS -> s
    com.tyrlib2.gui.ScaledVector2 REPUTATION_SIZE -> t
    com.tyrlib2.gui.ScaledVector1 REPUTATION_OFFSET -> u
    com.tyrfing.games.id17.houses.House displayed -> v
    com.tyrlib2.gui.Window parent -> w
    com.tyrlib2.gui.Window bgData -> x
    com.tyrlib2.gui.Window bgBranches -> y
    com.tyrlib2.gui.Label houseName -> z
    com.tyrlib2.gui.ItemList branches -> A
    com.tyrfing.games.id17.gui.house.HouseEntry entryLord -> B
    com.tyrfing.games.id17.gui.house.HouseEntry entryPlayer -> C
    java.util.List reps -> D
    com.tyrlib2.gui.Label favorLabel -> E
    com.tyrlib2.gui.Label alliesLabel -> F
    com.tyrlib2.gui.Label reputationsLabel -> G
    java.util.List allies -> H
    void show(com.tyrfing.games.id17.houses.House) -> a
    void hide() -> a
    com.tyrfing.games.id17.gui.house.HouseEntry createEntry(com.tyrfing.games.id17.houses.House) -> b
    void clear() -> d
    void update() -> e
com.tyrfing.games.id17.gui.house.HouseOverviewGUI$1 -> com.tyrfing.games.id17.gui.c.m:
    com.tyrfing.games.id17.gui.house.HouseOverviewGUI this$0 -> a
    void onCall() -> a
    com.tyrfing.games.id17.gui.house.HouseOverviewGUI access$0(com.tyrfing.games.id17.gui.house.HouseOverviewGUI$1) -> a
com.tyrfing.games.id17.gui.house.HouseOverviewGUI$1$1 -> com.tyrfing.games.id17.gui.c.n:
    com.tyrfing.games.id17.gui.house.HouseOverviewGUI$1 this$1 -> a
    void createHeaderedContent(java.lang.String,java.lang.String,boolean,java.lang.String) -> a
com.tyrfing.games.id17.gui.house.HouseOverviewGUI$2 -> com.tyrfing.games.id17.gui.c.o:
    com.tyrfing.games.id17.gui.house.HouseOverviewGUI this$0 -> a
    void onCall() -> a
com.tyrfing.games.id17.gui.house.HouseOverviewGUI$2$1 -> com.tyrfing.games.id17.gui.c.p:
    com.tyrfing.games.id17.gui.house.HouseOverviewGUI$2 this$1 -> a
    void createHeaderedContent(java.lang.String,java.lang.String,boolean,java.lang.String) -> a
com.tyrfing.games.id17.gui.house.HouseOverviewGUI$3 -> com.tyrfing.games.id17.gui.c.q:
    com.tyrfing.games.id17.gui.house.HouseOverviewGUI this$0 -> a
    com.tyrfing.games.id17.houses.House val$h -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.house.IntrigueProjectGUI -> com.tyrfing.games.id17.gui.c.r:
    com.tyrlib2.gui.ScaledVector2 ACTION_LABEL_POS -> c
    com.tyrlib2.gui.ScaledVector2 PROGRESS_BAR_POS -> d
    com.tyrlib2.gui.ScaledVector2 PROGRESS_BAR_SIZE -> e
    com.tyrlib2.gui.ScaledVector2 PROGRESS_TEXT_POS -> f
    com.tyrlib2.gui.ScaledVector2 REMAINING_DAYS_TEXT_POS -> g
    com.tyrlib2.gui.ScaledVector2 INCREASE_TEXT_POS -> h
    com.tyrlib2.gui.ScaledVector2 SUPPORTERS_TEXT_POS -> i
    com.tyrlib2.gui.ScaledVector2 SUPPORTER_BASE_POS -> j
    com.tyrlib2.gui.ScaledVector2 SUPPORTER_SIGIL_SIZE -> k
    com.tyrlib2.gui.ScaledVector2 INVITE_POS -> l
    com.tyrlib2.gui.Window bg -> m
    com.tyrlib2.gui.ImageBox target -> n
    com.tyrfing.games.id17.gui.PaperButton action -> o
    com.tyrlib2.gui.ProgressBar progress -> p
    com.tyrlib2.gui.Label progressText -> q
    com.tyrlib2.gui.Label remainingDaysText -> r
    com.tyrlib2.gui.Label increaseText -> s
    java.util.List supporters -> t
    com.tyrfing.games.id17.gui.PaperButton invite -> u
    com.tyrlib2.gui.ImageBox inviteTarget -> v
    com.tyrfing.games.id17.houses.House house -> w
    com.tyrfing.games.id17.houses.House displayed -> x
    com.tyrfing.games.id17.intrigue.IntrigueProject project -> y
    void show(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> a
    void updateProgress() -> d
    void hide() -> a
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
    com.tyrfing.games.id17.houses.House access$0(com.tyrfing.games.id17.gui.house.IntrigueProjectGUI) -> a
    com.tyrfing.games.id17.houses.House access$1(com.tyrfing.games.id17.gui.house.IntrigueProjectGUI) -> b
com.tyrfing.games.id17.gui.house.IntrigueProjectGUI$1 -> com.tyrfing.games.id17.gui.c.s:
    com.tyrfing.games.id17.gui.house.IntrigueProjectGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
    com.tyrfing.games.id17.gui.house.IntrigueProjectGUI access$0(com.tyrfing.games.id17.gui.house.IntrigueProjectGUI$1) -> a
com.tyrfing.games.id17.gui.house.IntrigueProjectGUI$1$1 -> com.tyrfing.games.id17.gui.c.t:
    com.tyrfing.games.id17.gui.house.IntrigueProjectGUI$1 this$1 -> a
    com.tyrfing.games.id17.gui.mails.HeaderedMail val$mail -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.house.IntrigueProjectGUI$2 -> com.tyrfing.games.id17.gui.c.u:
    com.tyrfing.games.id17.gui.house.IntrigueProjectGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.house.IntrigueProjectGUI$3 -> com.tyrfing.games.id17.gui.c.v:
    com.tyrfing.games.id17.gui.house.IntrigueProjectGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.house.IntrigueProjectGUI$4 -> com.tyrfing.games.id17.gui.c.w:
    com.tyrfing.games.id17.gui.house.IntrigueProjectGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.house.IntrigueProjectGUI$5 -> com.tyrfing.games.id17.gui.c.x:
    com.tyrfing.games.id17.gui.house.IntrigueProjectGUI this$0 -> a
    com.tyrfing.games.id17.houses.House val$supportHouse -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.laws.LawCategoryGUI -> com.tyrfing.games.id17.gui.d.a:
    com.tyrfing.games.id17.laws.LawCategory category -> d
    com.tyrfing.games.id17.gui.laws.LawGUI[] lawGUIs -> e
    com.tyrlib2.gui.ScaledVector2 BASE_POS -> c
    void show(com.tyrfing.games.id17.houses.House) -> a
    void hide() -> a
com.tyrfing.games.id17.gui.laws.LawGUI -> com.tyrfing.games.id17.gui.d.b:
    com.tyrfing.games.id17.laws.Law law -> a
    com.tyrlib2.gui.ScaledVector2 BUTTON_SIZE -> b
    com.tyrfing.games.id17.gui.PaperButton[] buttons -> c
    com.tyrfing.games.id17.houses.House displayed -> e
    com.tyrlib2.gui.Label label -> d
    void show(com.tyrfing.games.id17.houses.House) -> a
    void hide() -> a
    com.tyrfing.games.id17.houses.House access$0(com.tyrfing.games.id17.gui.laws.LawGUI) -> a
com.tyrfing.games.id17.gui.laws.LawGUI$1 -> com.tyrfing.games.id17.gui.d.c:
    com.tyrfing.games.id17.gui.laws.LawGUI this$0 -> a
    com.tyrfing.games.id17.laws.Law val$law -> b
    int val$index -> c
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
    com.tyrfing.games.id17.gui.laws.LawGUI access$0(com.tyrfing.games.id17.gui.laws.LawGUI$1) -> a
com.tyrfing.games.id17.gui.laws.LawGUI$1$1 -> com.tyrfing.games.id17.gui.d.d:
    com.tyrfing.games.id17.gui.laws.LawGUI$1 this$1 -> a
    com.tyrfing.games.id17.laws.Law val$law -> b
    int val$index -> c
    void onAccept() -> a_
com.tyrfing.games.id17.gui.laws.LawGUI$2 -> com.tyrfing.games.id17.gui.d.e:
    com.tyrfing.games.id17.gui.laws.LawGUI this$0 -> a
    int val$index -> b
    com.tyrfing.games.id17.laws.Law val$law -> c
    com.tyrfing.games.id17.gui.PaperButton val$button -> d
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.laws.LawSetGUI -> com.tyrfing.games.id17.gui.d.f:
    com.tyrlib2.gui.Window economyHolder -> K
    com.tyrlib2.gui.Window vassalHolder -> L
    com.tyrlib2.gui.Window armyHolder -> M
    com.tyrfing.games.id17.gui.laws.LawCategoryGUI economy -> N
    com.tyrfing.games.id17.gui.laws.LawCategoryGUI vassal -> O
    com.tyrfing.games.id17.gui.laws.LawCategoryGUI army -> P
    int currentCategory -> I
    java.util.List categories -> J
    void display() -> e
    void hideAllLaws() -> j
    void showCategory(int) -> a
    void resetHighlights() -> l
    com.tyrfing.games.id17.houses.House getDisplayed() -> k
    void update() -> f
    boolean isFinished() -> isFinished
com.tyrfing.games.id17.gui.laws.LawSetGUI$1 -> com.tyrfing.games.id17.gui.d.g:
    com.tyrfing.games.id17.gui.laws.LawSetGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.laws.LawSetGUI$2 -> com.tyrfing.games.id17.gui.d.h:
    com.tyrfing.games.id17.gui.laws.LawSetGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.laws.LawSetGUI$3 -> com.tyrfing.games.id17.gui.d.i:
    com.tyrfing.games.id17.gui.laws.LawSetGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.mails.BaronyEntry -> com.tyrfing.games.id17.gui.mails.a:
    com.tyrlib2.gui.ScaledVector2 NAME_LABEL -> a
    com.tyrfing.games.id17.gui.mails.HeaderedMail mail -> e
    com.tyrfing.games.id17.holdings.Barony barony -> f
    boolean addedSubHoldings -> g
    void onClick() -> f_
com.tyrfing.games.id17.gui.mails.BattleMail -> com.tyrfing.games.id17.gui.mails.b:
    com.tyrlib2.gui.ScaledVector2 TOTAL_LABEL_POS -> a
    com.tyrlib2.gui.ScaledVector2 LOSSES_BASE_POS -> b
    float PADDING_X -> c
    com.tyrlib2.gui.ScaledVector2 ICON_SIZE -> d
    com.tyrlib2.gui.ScaledVector2 LABEL_PADDING -> e
    com.tyrfing.games.id17.war.Battle battle -> ae
    java.lang.String result -> aq
    void createFrameContent() -> p
    void createStatistics(com.tyrfing.games.id17.war.Army,com.tyrlib2.gui.Window) -> a
    java.lang.String getTooltipText() -> d
com.tyrfing.games.id17.gui.mails.DiploYesNoMail -> com.tyrfing.games.id17.gui.mails.c:
    com.tyrfing.games.id17.diplomacy.Message message -> d
    com.tyrfing.games.id17.diplomacy.actions.DiploAction action -> e
    void onAccept() -> a_
    void onReject() -> c_
com.tyrfing.games.id17.gui.mails.GiftMail -> com.tyrfing.games.id17.gui.mails.GiftMail:
    com.tyrlib2.gui.ScaledVector2 BASE_TEXT_POS -> a
    com.tyrlib2.gui.ScaledVector2 PRICE_LABEL_POS -> b
    com.tyrfing.games.id17.diplomacy.Message message -> c
    void onAccept() -> a_
com.tyrfing.games.id17.gui.mails.GiftMail$STATUS -> com.tyrfing.games.id17.gui.mails.GiftMail$STATUS:
    com.tyrfing.games.id17.gui.mails.GiftMail$STATUS GIFT_RECEIVED -> GIFT_RECEIVED
    com.tyrfing.games.id17.gui.mails.GiftMail$STATUS GIFT_SEND -> GIFT_SEND
    com.tyrfing.games.id17.gui.mails.GiftMail$STATUS[] ENUM$VALUES -> a
    com.tyrfing.games.id17.gui.mails.GiftMail$STATUS[] values() -> values
    com.tyrfing.games.id17.gui.mails.GiftMail$STATUS valueOf(java.lang.String) -> valueOf
com.tyrfing.games.id17.gui.mails.HeaderedMail -> com.tyrfing.games.id17.gui.mails.d:
    com.tyrlib2.gui.ScaledVector2 HEADER_POS -> f
    com.tyrlib2.gui.ScaledVector2 HEADER_SIZE -> g
    com.tyrlib2.gui.ScaledVector2 PARTIES_POS -> h
    com.tyrlib2.gui.ScaledVector2 SIGIL_ATTACKER_POS -> i
    com.tyrlib2.gui.ScaledVector2 SIGIL_DEFENDER_POS -> j
    com.tyrlib2.gui.ScaledVector2 SIGIL_SIZE -> k
    com.tyrlib2.gui.ScaledVector2 ATTACKER_PAPER_POS -> l
    com.tyrlib2.gui.ScaledVector2 ATTACKER_PAPER_SIZE -> m
    com.tyrlib2.gui.ScaledVector2 MAIN_PAPER_POS -> n
    com.tyrlib2.gui.ScaledVector2 MAIN_PAPER_SIZE -> o
    com.tyrlib2.gui.ScaledVector2 DEFENDER_PAPER_POS -> p
    com.tyrlib2.gui.ScaledVector2 COLUMN_POS -> q
    com.tyrlib2.gui.ScaledVector2 COLUMN_SIZE -> r
    com.tyrlib2.gui.ScaledVector2 LEFT_COLUMN_LABEL -> s
    com.tyrlib2.gui.ScaledVector2 RIGHT_COLUMN_LABEL -> t
    com.tyrlib2.gui.ScaledVector2 ACCEPT_SIZE -> u
    com.tyrlib2.gui.ScaledVector2 ACCEPT_POS -> v
    com.tyrlib2.gui.ScaledVector2 ACCEPT_POS_OFFSET -> w
    com.tyrlib2.gui.ScaledVector2 ACCEPT_BORDER_SIZE -> x
    com.tyrlib2.gui.ScaledVector2 ACCEPT2_POS -> y
    com.tyrlib2.gui.ScaledVector2 REJECT2_POS -> z
    com.tyrlib2.gui.Window header -> A
    com.tyrlib2.gui.Window mainPaper -> B
    com.tyrlib2.gui.Window left -> C
    com.tyrlib2.gui.Window right -> D
    com.tyrlib2.gui.Label titleLabelRight -> E
    com.tyrlib2.gui.Label titleLabelLeft -> F
    com.tyrlib2.gui.ItemList rightColumn -> G
    com.tyrlib2.gui.ItemList leftColumn -> H
    int choiceLeft -> I
    int choiceRight -> J
    com.tyrfing.games.id17.gui.PaperButton accept -> K
    com.tyrfing.games.id17.gui.PaperButton reject -> L
    com.tyrlib2.gui.Label mainLabel -> a
    void createHeaderedContent(java.lang.String,java.lang.String,boolean,java.lang.String) -> a
    void addRightColumnList(java.lang.String) -> a
    void addLeftColumnList(java.lang.String) -> b
    void unhighlightRightColumn() -> b_
    void unhighlightLeftColumn() -> g
    void addMainLabel(java.lang.String) -> c
    void addAcceptButton() -> h
    void addAcceptAndRejectButtons() -> i
    void onAccept() -> a_
    void onReject() -> c_
    void selectRight(int) -> a
    void selectLeft(int) -> b
    java.lang.String getTooltipText() -> d
    void setAcceptText(java.lang.String) -> d
    com.tyrfing.games.id17.gui.PaperButton getAcceptButton() -> j
com.tyrfing.games.id17.gui.mails.HeaderedMail$1 -> com.tyrfing.games.id17.gui.mails.e:
    com.tyrfing.games.id17.gui.mails.HeaderedMail this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.mails.HeaderedMail$2 -> com.tyrfing.games.id17.gui.mails.f:
    com.tyrfing.games.id17.gui.mails.HeaderedMail this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.mails.HeaderedMail$3 -> com.tyrfing.games.id17.gui.mails.g:
    com.tyrfing.games.id17.gui.mails.HeaderedMail this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.mails.HoldingEntry -> com.tyrfing.games.id17.gui.mails.h:
    com.tyrlib2.gui.ScaledVector1 SIZE_X -> e
    com.tyrlib2.gui.ScaledVector1 SIZE_Y -> f
    com.tyrlib2.gui.ScaledVector2 NAME_LABEL -> g
    com.tyrfing.games.id17.gui.mails.HeaderedMail mail -> a
    com.tyrfing.games.id17.holdings.Holding holding -> h
    void onClick() -> f_
com.tyrfing.games.id17.gui.mails.HoldingMail -> com.tyrfing.games.id17.gui.mails.HoldingMail:
    com.tyrfing.games.id17.diplomacy.Message message -> a
    com.tyrfing.games.id17.gui.mails.HoldingMail$MailType type -> b
    com.tyrlib2.gui.Label effects -> c
    void createFrameContent() -> p
    void onAccept() -> a_
    void selectRight(int) -> a
com.tyrfing.games.id17.gui.mails.HoldingMail$MailType -> com.tyrfing.games.id17.gui.mails.HoldingMail$MailType:
    com.tyrfing.games.id17.gui.mails.HoldingMail$MailType GRANT_HOLDING_SEND -> GRANT_HOLDING_SEND
    com.tyrfing.games.id17.gui.mails.HoldingMail$MailType GRANT_HOLDING_RECEIVED -> GRANT_HOLDING_RECEIVED
    com.tyrfing.games.id17.gui.mails.HoldingMail$MailType GRANT_HOLDING_RESPONSE -> GRANT_HOLDING_RESPONSE
    com.tyrfing.games.id17.gui.mails.HoldingMail$MailType REVOKE_HOLDING_SEND -> REVOKE_HOLDING_SEND
    com.tyrfing.games.id17.gui.mails.HoldingMail$MailType REVOKE_HOLDING_RECEIVED -> REVOKE_HOLDING_RECEIVED
    com.tyrfing.games.id17.gui.mails.HoldingMail$MailType REVOKE_HOLDING_RESPONSE -> REVOKE_HOLDING_RESPONSE
    com.tyrfing.games.id17.gui.mails.HoldingMail$MailType[] ENUM$VALUES -> a
    com.tyrfing.games.id17.gui.mails.HoldingMail$MailType[] values() -> values
    com.tyrfing.games.id17.gui.mails.HoldingMail$MailType valueOf(java.lang.String) -> valueOf
com.tyrfing.games.id17.gui.mails.JustificationEntry -> com.tyrfing.games.id17.gui.mails.i:
    com.tyrlib2.gui.ScaledVector1 SIZE_X -> a
    com.tyrlib2.gui.ScaledVector1 SIZE_Y -> e
    com.tyrlib2.gui.ScaledVector2 NAME_LABEL -> f
    com.tyrlib2.gui.ScaledVector2 SIGIL_POS -> g
    com.tyrlib2.gui.ScaledVector2 SIGIL_SIZE -> h
    com.tyrlib2.gui.ScaledVector2 HONOR_POS -> i
    com.tyrlib2.gui.ScaledVector2 HONOR_LABEL_POS -> j
    com.tyrfing.games.id17.gui.mails.WarMail mail -> k
    com.tyrfing.games.id17.war.WarJustification justification -> l
    void onClick() -> f_
com.tyrfing.games.id17.gui.mails.Mail -> com.tyrfing.games.id17.gui.mails.j:
    com.tyrlib2.gui.ScaledVector2 SIZE -> M
    com.tyrlib2.math.Vector2 SHOW_POS -> N
    com.tyrlib2.gui.ScaledVector2 SHOW_POS_OFFSET -> O
    com.tyrlib2.math.Vector2 HIDE_POS -> P
    com.tyrlib2.gui.ScaledVector2 BUTTON_SIZE -> Q
    com.tyrlib2.gui.ScaledVector2 CANCEL_HOLDER_POS -> R
    com.tyrlib2.gui.ScaledVector2 CANCEL_HOLDER_POS_OFFSET -> S
    com.tyrlib2.gui.ScaledVector2 CANCEL_POS -> T
    com.tyrlib2.gui.ScaledVector2 CANCEL_POS_OFFSET -> U
    com.tyrlib2.gui.ScaledVector2 MINIMIZE_HOLDER_POS -> V
    com.tyrlib2.gui.ScaledVector2 MINIMIZE_POS_OFFSET -> W
    com.tyrlib2.gui.ScaledVector2 MINIMIZE_POS -> X
    com.tyrlib2.gui.ScaledVector2 BACK_HOLDER_POS -> Y
    com.tyrlib2.gui.ScaledVector2 BACK_POS_OFFSET -> Z
    com.tyrlib2.gui.ScaledVector2 BACK_POS -> aa
    float passedTime -> a
    com.tyrlib2.gui.Frame frame -> ab
    com.tyrlib2.gui.ImageBox cancel -> b
    com.tyrfing.games.id17.gui.mails.MailboxGUI gui -> c
    java.lang.String identity -> d
    com.tyrfing.games.id17.gui.mails.Mail backMail -> e
    com.tyrlib2.gui.ImageBox back -> f
    com.tyrlib2.gui.Window mailHolder -> ac
    java.lang.String iconName -> ad
    void setIconName(java.lang.String) -> e
    void setIdentity(java.lang.String) -> f
    java.lang.String getIdentity() -> k
    void remove() -> d_
    void setMailbox(com.tyrfing.games.id17.gui.mails.MailboxGUI) -> a
    void show() -> m
    void hide() -> n
    void createFrameContent() -> g
    void createButtons() -> o
    void setBackMail(com.tyrfing.games.id17.gui.mails.Mail) -> a
    java.lang.String getTooltipText() -> d
    void onUpdate(float) -> onUpdate
    com.tyrfing.games.id17.gui.mails.MailboxGUI access$0(com.tyrfing.games.id17.gui.mails.Mail) -> b
    com.tyrfing.games.id17.gui.mails.Mail access$1(com.tyrfing.games.id17.gui.mails.Mail) -> c
com.tyrfing.games.id17.gui.mails.Mail$1 -> com.tyrfing.games.id17.gui.mails.k:
    com.tyrfing.games.id17.gui.mails.Mail this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.mails.Mail$2 -> com.tyrfing.games.id17.gui.mails.l:
    com.tyrfing.games.id17.gui.mails.Mail this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.mails.Mail$3 -> com.tyrfing.games.id17.gui.mails.m:
    com.tyrfing.games.id17.gui.mails.Mail this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.mails.MailboxGUI -> com.tyrfing.games.id17.gui.mails.n:
    com.tyrlib2.gui.ScaledVector2 MAILBOX_SIZE -> a
    com.tyrlib2.math.Vector2 MAILBOX_POS -> b
    com.tyrlib2.gui.ScaledVector2 MAILBOX_OFFSET -> c
    com.tyrlib2.gui.ScaledVector2 INFO_LABEL_POS -> d
    int current -> e
    com.tyrfing.games.id17.gui.mails.Mail currentMail -> f
    java.util.List mails -> g
    int size() -> a
    com.tyrfing.games.id17.gui.mails.Mail getCurrentMail() -> b
    void showMail(int) -> a
    boolean showIdentity(java.lang.String) -> a
    boolean isIdentityPrefixShown(java.lang.String) -> b
    void addMail(com.tyrfing.games.id17.gui.mails.Mail,boolean) -> a
    void addMailIcon(com.tyrfing.games.id17.gui.mails.Mail) -> c
    void removeMail(com.tyrfing.games.id17.gui.mails.Mail) -> a
    void hideMail(com.tyrfing.games.id17.gui.mails.Mail) -> b
    void removeMailByPrefix(java.lang.String) -> c
    com.tyrfing.games.id17.gui.mails.Mail access$0(com.tyrfing.games.id17.gui.mails.MailboxGUI) -> a
    void access$1(com.tyrfing.games.id17.gui.mails.MailboxGUI,com.tyrfing.games.id17.gui.mails.Mail) -> a
com.tyrfing.games.id17.gui.mails.MailboxGUI$1 -> com.tyrfing.games.id17.gui.mails.o:
    com.tyrfing.games.id17.gui.mails.MailboxGUI this$0 -> a
    com.tyrfing.games.id17.gui.mails.Mail val$mail -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.mails.MarriageMail -> com.tyrfing.games.id17.gui.mails.MarriageMail:
    com.tyrlib2.gui.ScaledVector2 MALE_POS -> a
    com.tyrlib2.gui.ScaledVector2 FEMALE_POS -> b
    com.tyrlib2.gui.ScaledVector2 OFFER_POS -> c
    com.tyrlib2.gui.ScaledVector2 PRICE_LABEL_POS -> d
    com.tyrlib2.gui.ScaledVector2 PRICE_LABEL_POS_R -> e
    com.tyrlib2.gui.ScaledVector2 OFFER_TIME_LABEL_POS -> ae
    com.tyrfing.games.id17.gui.mails.MarriageMail$MailType type -> aq
    com.tyrfing.games.id17.diplomacy.Message message -> ar
    com.tyrfing.games.id17.gui.PaperButton male -> as
    com.tyrfing.games.id17.gui.PaperButton female -> at
    com.tyrlib2.gui.Label offer -> au
    com.tyrlib2.gui.Label priceLabel -> av
    com.tyrlib2.gui.Window price -> aw
    com.tyrlib2.gui.Label offerTime -> ax
    int choice -> ay
    int cost -> az
    boolean responded -> aA
    int daysLastFrame -> aB
    void createFrameContent() -> p
    void selectMale() -> q
    void selectFemale() -> D
    void onAccept() -> a_
    void onReject() -> c_
    void onUpdate(float) -> onUpdate
    java.lang.String getTooltipText() -> d
    void access$0(com.tyrfing.games.id17.gui.mails.MarriageMail) -> a
    void access$1(com.tyrfing.games.id17.gui.mails.MarriageMail) -> b
com.tyrfing.games.id17.gui.mails.MarriageMail$1 -> com.tyrfing.games.id17.gui.mails.p:
    com.tyrfing.games.id17.gui.mails.MarriageMail this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.mails.MarriageMail$2 -> com.tyrfing.games.id17.gui.mails.q:
    com.tyrfing.games.id17.gui.mails.MarriageMail this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.mails.MarriageMail$MailType -> com.tyrfing.games.id17.gui.mails.MarriageMail$MailType:
    com.tyrfing.games.id17.gui.mails.MarriageMail$MailType MARRIAGE_OFFER_SEND -> MARRIAGE_OFFER_SEND
    com.tyrfing.games.id17.gui.mails.MarriageMail$MailType MARRIAGE_OFFER_RECEIVED -> MARRIAGE_OFFER_RECEIVED
    com.tyrfing.games.id17.gui.mails.MarriageMail$MailType MARRIAGE_OFFER_RESPONSE -> MARRIAGE_OFFER_RESPONSE
    com.tyrfing.games.id17.gui.mails.MarriageMail$MailType[] ENUM$VALUES -> a
    com.tyrfing.games.id17.gui.mails.MarriageMail$MailType[] values() -> values
    com.tyrfing.games.id17.gui.mails.MarriageMail$MailType valueOf(java.lang.String) -> valueOf
com.tyrfing.games.id17.gui.mails.TechEntry -> com.tyrfing.games.id17.gui.mails.r:
    com.tyrfing.games.id17.gui.mails.HeaderedMail mail -> a
    int techIndex -> e
    void onClick() -> f_
com.tyrfing.games.id17.gui.mails.UnitMail -> com.tyrfing.games.id17.gui.mails.s:
    com.tyrfing.games.id17.war.UnitType type -> a
    com.tyrfing.games.id17.war.Army army -> b
    int pos -> c
    com.tyrfing.games.id17.gui.war.FormationWindow window -> d
    com.tyrfing.games.id17.gui.war.ArmyBuilderGUI gui -> e
    void onAccept() -> a_
com.tyrfing.games.id17.gui.mails.WarMail -> com.tyrfing.games.id17.gui.mails.WarMail:
    com.tyrfing.games.id17.war.War war -> a
    com.tyrfing.games.id17.gui.mails.WarMail$WarMailType warMailType -> b
    com.tyrfing.games.id17.diplomacy.Message message -> c
    int[] $SWITCH_TABLE$com$tyrfing$games$id17$gui$mails$WarMail$WarMailType -> d
    com.tyrfing.games.id17.diplomacy.Message getMessage() -> p
    void createFrameContent() -> D
    void addWarGoalBaronies(com.tyrfing.games.id17.houses.House) -> a
    void onAccept() -> a_
    void selectRight(int) -> a
    void selectLeft(int) -> b
    java.lang.String getTooltipText() -> d
    int[] $SWITCH_TABLE$com$tyrfing$games$id17$gui$mails$WarMail$WarMailType() -> q
com.tyrfing.games.id17.gui.mails.WarMail$WarMailType -> com.tyrfing.games.id17.gui.mails.WarMail$WarMailType:
    com.tyrfing.games.id17.gui.mails.WarMail$WarMailType WHITE_PEACE_SEND -> WHITE_PEACE_SEND
    com.tyrfing.games.id17.gui.mails.WarMail$WarMailType WHITE_PEACE_RECEIVE -> WHITE_PEACE_RECEIVE
    com.tyrfing.games.id17.gui.mails.WarMail$WarMailType ADMIT_DEFEAT -> ADMIT_DEFEAT
    com.tyrfing.games.id17.gui.mails.WarMail$WarMailType DICTATE_DEMANDS -> DICTATE_DEMANDS
    com.tyrfing.games.id17.gui.mails.WarMail$WarMailType DECLARE_WAR_SEND -> DECLARE_WAR_SEND
    com.tyrfing.games.id17.gui.mails.WarMail$WarMailType DECLARE_WAR_RECEIVE -> DECLARE_WAR_RECEIVE
    int[] $SWITCH_TABLE$com$tyrfing$games$id17$gui$mails$WarMail$WarMailType -> a
    com.tyrfing.games.id17.gui.mails.WarMail$WarMailType[] ENUM$VALUES -> b
    java.lang.String toString() -> toString
    com.tyrfing.games.id17.gui.mails.WarMail$WarMailType[] values() -> values
    com.tyrfing.games.id17.gui.mails.WarMail$WarMailType valueOf(java.lang.String) -> valueOf
    int[] $SWITCH_TABLE$com$tyrfing$games$id17$gui$mails$WarMail$WarMailType() -> $SWITCH_TABLE$com$tyrfing$games$id17$gui$mails$WarMail$WarMailType
com.tyrfing.games.id17.gui.mails.YesNoMail -> com.tyrfing.games.id17.gui.mails.t:
    boolean responded -> a
    com.tyrlib2.gui.Label offerTime -> d
    float timeStamp -> e
    com.tyrfing.games.id17.houses.House sender -> b
    com.tyrfing.games.id17.houses.House receiver -> c
    void onUpdate(float) -> onUpdate
com.tyrfing.games.id17.gui.technology.TechArrow -> com.tyrfing.games.id17.gui.e.a:
    com.tyrlib2.gui.ImageBox block -> a
    com.tyrfing.games.id17.gui.technology.TechMaterial mat -> b
    boolean finished -> d
    com.tyrfing.games.id17.gui.technology.TechnologyGUI ui -> e
    com.tyrfing.games.id17.technology.Technology t -> f
    com.tyrfing.games.id17.technology.Technology t2 -> g
    com.tyrlib2.gui.ScaledVector2 HEAD_SIZE -> c
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
com.tyrfing.games.id17.gui.technology.TechMail -> com.tyrfing.games.id17.gui.e.b:
    com.tyrfing.games.id17.technology.Technology t -> a
    com.tyrfing.games.id17.houses.House house -> b
    void onAccept() -> a_
    com.tyrfing.games.id17.gui.mails.Mail createMail(com.tyrfing.games.id17.technology.Technology,com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.gui.technology.TechMaterial -> com.tyrfing.games.id17.gui.e.c:
    float progress -> f
    int progressHandle -> g
    int bgHandle -> h
    com.tyrlib2.util.Color bgColor -> a
    void render(com.tyrlib2.graphics.renderer.Mesh,float[]) -> a
    void setProgress(float) -> a_
com.tyrfing.games.id17.gui.technology.TechnologyGUI -> com.tyrfing.games.id17.gui.e.d:
    com.tyrlib2.gui.ImageBox[] icons -> I
    com.tyrfing.games.id17.gui.technology.TechArrow[][] techArrows -> J
    void display() -> e
    void hide() -> a
    com.tyrfing.games.id17.houses.House getDisplayed() -> j
    boolean isFinished() -> isFinished
    void update() -> f
    void displayHouse() -> k
    void access$0(com.tyrfing.games.id17.gui.technology.TechnologyGUI) -> a
com.tyrfing.games.id17.gui.technology.TechnologyGUI$1 -> com.tyrfing.games.id17.gui.e.e:
    com.tyrfing.games.id17.gui.technology.TechnologyGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.technology.TechnologyGUI$2 -> com.tyrfing.games.id17.gui.e.f:
    com.tyrfing.games.id17.gui.technology.TechnologyGUI this$0 -> a
    com.tyrfing.games.id17.technology.Technology val$tech -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.war.ArmyBuilderGUI -> com.tyrfing.games.id17.gui.f.a:
    com.tyrlib2.gui.ScaledVector2 FORMATION_SIZE -> c
    com.tyrlib2.gui.ScaledVector2 FORMATION_POS -> d
    com.tyrlib2.gui.ScaledVector2 BUILD_UNITS_POS -> e
    com.tyrlib2.gui.ScaledVector2 BUILD_UNITS_SIZE -> f
    com.tyrlib2.gui.ScaledVector2 ARMY_COUNT_POS -> g
    com.tyrlib2.gui.ScaledVector2 ARMY_POS -> h
    com.tyrfing.games.id17.holdings.Barony barony -> k
    com.tyrfing.games.id17.gui.war.FormationWindow formationWindowLevy -> l
    com.tyrfing.games.id17.gui.war.FormationWindow formationWindowGarrison -> m
    com.tyrlib2.gui.Window parent -> n
    com.tyrlib2.gui.Label nameLabel -> o
    com.tyrlib2.gui.Label nameLabelGarrison -> p
    com.tyrlib2.gui.ScaledVector2 UPGRADE_REGIMENT_POS -> i
    com.tyrlib2.gui.ScaledVector2 DESTROY_REGIMENT_POS -> j
    com.tyrlib2.gui.ImageBox upgradeRegiment -> q
    com.tyrlib2.gui.Label upgradeCost -> r
    int selected -> s
    com.tyrlib2.gui.ItemList unitMenu -> t
    boolean upgradeClick -> u
    com.tyrfing.games.id17.war.Army selectedArmy -> v
    void setupFormationWindow(com.tyrfing.games.id17.gui.war.FormationWindow) -> a
    void show(com.tyrfing.games.id17.holdings.Barony) -> a
    void hide() -> a
    void showUnitBuildMenu(com.tyrfing.games.id17.war.Army,com.tyrfing.games.id17.gui.war.FormationWindow) -> a
    void hideUnitBuildMenu() -> d
    void selectRegiment(int,com.tyrfing.games.id17.war.Army,com.tyrfing.games.id17.gui.war.FormationWindow) -> a
    void upgradeRegiment() -> e
    void update() -> f
    void unHighlightUnitTypes() -> g
    boolean access$0(com.tyrfing.games.id17.gui.war.ArmyBuilderGUI) -> a
    com.tyrlib2.gui.ImageBox access$1(com.tyrfing.games.id17.gui.war.ArmyBuilderGUI) -> b
    void access$2(com.tyrfing.games.id17.gui.war.ArmyBuilderGUI,boolean) -> a
    com.tyrfing.games.id17.holdings.Barony access$3(com.tyrfing.games.id17.gui.war.ArmyBuilderGUI) -> c
    void access$4(com.tyrfing.games.id17.gui.war.ArmyBuilderGUI,int,com.tyrfing.games.id17.war.Army,com.tyrfing.games.id17.gui.war.FormationWindow) -> a
com.tyrfing.games.id17.gui.war.ArmyBuilderGUI$1 -> com.tyrfing.games.id17.gui.f.b:
    com.tyrfing.games.id17.gui.war.ArmyBuilderGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.war.ArmyBuilderGUI$2 -> com.tyrfing.games.id17.gui.f.c:
    com.tyrfing.games.id17.gui.war.ArmyBuilderGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.war.ArmyBuilderGUI$3 -> com.tyrfing.games.id17.gui.f.d:
    com.tyrfing.games.id17.gui.war.ArmyBuilderGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.war.ArmyBuilderGUI$4 -> com.tyrfing.games.id17.gui.f.e:
    com.tyrfing.games.id17.gui.war.ArmyBuilderGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.war.ArmyBuilderGUI$5 -> com.tyrfing.games.id17.gui.f.f:
    com.tyrfing.games.id17.gui.war.ArmyBuilderGUI this$0 -> a
    com.tyrfing.games.id17.gui.war.FormationWindow val$formationWindow -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.war.ArmyGUI -> com.tyrfing.games.id17.gui.f.g:
    com.tyrlib2.gui.ImageBox pillage -> U
    com.tyrlib2.gui.ImageBox unraise -> V
    com.tyrlib2.gui.ImageBox cancel -> W
    com.tyrfing.games.id17.gui.war.BattleGUI battleGUI -> X
    com.tyrfing.games.id17.gui.war.FormationWindow formationWindow -> Y
    java.lang.String[] ARMY_GUI_TAB_NAMES -> I
    java.lang.String[] ARMY_GUI_TAB_ATLAS_NAMES -> J
    java.lang.String[] ARMY_GUI_TAB_REGION_NAMES -> K
    java.lang.String[] ARMY_GUI_TAB_TOOLTIPS -> L
    com.tyrlib2.gui.ScaledVector2 FORMATION_SIZE -> M
    com.tyrlib2.gui.ScaledVector2 FORMATION_POS -> N
    com.tyrlib2.gui.ScaledVector2 INFO_SIZE -> O
    com.tyrlib2.gui.ScaledVector2 INFO_POS -> P
    com.tyrlib2.gui.ScaledVector2 ARMY_NAME_POS -> Q
    com.tyrlib2.gui.Window subHeader -> Z
    com.tyrlib2.gui.Window formationHeader -> aa
    com.tyrlib2.gui.Window nameHeader -> ab
    com.tyrlib2.gui.Label stateLabel -> ac
    com.tyrlib2.gui.Label armyMaint -> ad
    com.tyrlib2.gui.Label armyReinf -> ae
    com.tyrlib2.gui.Label armyName -> af
    com.tyrlib2.gui.Label armyTroops -> ag
    com.tyrlib2.gui.ProgressBar armyMoral -> ah
    com.tyrlib2.gui.Label armyMoralRegen -> ai
    com.tyrlib2.math.Vector2 PILLAGE_POS -> R
    com.tyrlib2.math.Vector2 UNRAISE_POS -> S
    com.tyrlib2.math.Vector2 CANCEL_POS -> T
    java.util.List disable -> aj
    boolean enablePillage -> ak
    boolean isFinished() -> isFinished
    void hide() -> a
    void show(com.tyrfing.games.id17.war.Army) -> a
    void display() -> e
    void update() -> f
    com.tyrfing.games.id17.war.Army getDisplayed() -> j
    void show(java.lang.Object) -> a
    boolean access$1(com.tyrfing.games.id17.gui.war.ArmyGUI) -> a
com.tyrfing.games.id17.gui.war.ArmyGUI$1 -> com.tyrfing.games.id17.gui.f.h:
    com.tyrfing.games.id17.gui.war.ArmyGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.war.ArmyGUI$2 -> com.tyrfing.games.id17.gui.f.i:
    com.tyrfing.games.id17.gui.war.ArmyGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.war.ArmyGUI$3 -> com.tyrfing.games.id17.gui.f.j:
    com.tyrfing.games.id17.gui.war.ArmyGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.war.ArmyGUI$4 -> com.tyrfing.games.id17.gui.f.k:
    com.tyrfing.games.id17.gui.war.ArmyGUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.gui.war.BattleGUI -> com.tyrfing.games.id17.gui.f.l:
    com.tyrlib2.math.Vector2 ATTACKER_FORMATION_POS -> a
    com.tyrlib2.math.Vector2 DEFENDER_FORMATION_POS -> b
    com.tyrfing.games.id17.gui.war.FormationWindow formationWindowAttacker -> h
    com.tyrfing.games.id17.gui.war.FormationWindow formationWindowDefender -> i
    boolean redisplay -> j
    boolean hiding -> k
    com.tyrfing.games.id17.war.Battle displayed -> l
    com.tyrlib2.gui.Window main -> m
    com.tyrlib2.gui.Window infoBox -> n
    com.tyrlib2.gui.Label attackerName -> o
    com.tyrlib2.gui.Label defenderName -> p
    com.tyrlib2.gui.Label phaseLabel -> q
    com.tyrlib2.gui.ScaledVector2 INFO_BOX_SIZE -> c
    com.tyrlib2.gui.ScaledVector2 INFO_BOX_POS -> d
    com.tyrlib2.gui.ScaledVector2 ATTACKER_NAME_POS -> e
    com.tyrlib2.gui.ScaledVector2 DEFENDER_NAME_POS -> f
    com.tyrlib2.gui.ScaledVector2 PHASE_LABEL_POS -> g
    void show(com.tyrfing.games.id17.war.Battle) -> a
    void hide() -> a
    void displayBattle() -> b
    void displayResult(com.tyrfing.games.id17.war.Army) -> a
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
    void displaySkirmishs(java.util.List) -> a
    void displayRegimentRetreat(java.util.List) -> b
    void displayFlanking(java.util.List) -> c
    void displayPhase() -> c
    void highlightAttackers(java.util.List) -> d
    void unhighlightAttackers() -> e
    void unhighlightAttackers(com.tyrfing.games.id17.gui.war.FormationWindow) -> a
    void updateFormation() -> d
com.tyrfing.games.id17.gui.war.BuildUnitGUI -> com.tyrfing.games.id17.gui.f.m:
    com.tyrlib2.gui.ScaledVector1 SIZE_X -> a
    com.tyrlib2.gui.ScaledVector1 SIZE_Y -> e
    com.tyrlib2.gui.ScaledVector2 ICON_POS -> f
    com.tyrlib2.gui.ScaledVector2 ICON_SIZE -> g
    com.tyrlib2.gui.ScaledVector2 NAME_LABEL -> h
    com.tyrlib2.gui.ScaledVector1 COST_LABEL_X -> i
    com.tyrlib2.gui.ScaledVector1 COST_ICON_POS_X -> j
    com.tyrlib2.gui.ScaledVector1 COST_LABEL_Y -> k
    com.tyrlib2.gui.ScaledVector1 COST_ICON_POS_Y -> l
    com.tyrlib2.gui.ScaledVector2 COST_ICON_SIZE -> m
    com.tyrfing.games.id17.war.Army army -> p
    java.lang.String name -> n
    int pos -> q
    com.tyrfing.games.id17.gui.war.FormationWindow formationWindow -> r
    com.tyrfing.games.id17.gui.war.ArmyBuilderGUI gui -> s
    com.tyrfing.games.id17.war.UnitType type -> t
    void setInfo(com.tyrfing.games.id17.war.Army,com.tyrfing.games.id17.holdings.Barony,com.tyrfing.games.id17.gui.war.FormationWindow) -> a
    void setPos(int) -> a
    void onClick() -> f_
    com.tyrfing.games.id17.gui.mails.Mail createUnitMail(com.tyrfing.games.id17.war.UnitType) -> a
    void update() -> m_
com.tyrfing.games.id17.gui.war.FormationWindow -> com.tyrfing.games.id17.gui.f.n:
    com.tyrlib2.gui.ScaledVector2 ICON_SIZE_SMALL -> a
    com.tyrlib2.gui.ScaledVector2 ICON_SIZE_BIG -> b
    float offsetX -> d
    float offsetY -> e
    java.util.List icons -> f
    java.util.List healths -> g
    java.util.List attacking -> h
    java.util.List labels -> i
    com.tyrlib2.util.Color GREEN -> c
    com.tyrlib2.util.Color YELLOW -> j
    com.tyrlib2.util.Color RED -> k
    com.tyrfing.games.id17.war.Army army -> l
    com.tyrlib2.math.Vector2 basePos -> m
    int direction -> n
    com.tyrlib2.gui.ImageBox getIcon(int) -> a
    void setArmy(com.tyrfing.games.id17.war.Army,boolean) -> a
    com.tyrlib2.math.Vector2 getIconPos(int) -> b
    com.tyrfing.games.id17.war.Army getDisplayed() -> a
    void setAttacking(int,boolean) -> a
    void setDefending(int,boolean) -> b
    void fadeOut(float) -> a
com.tyrfing.games.id17.gui.war.WarGUI -> com.tyrfing.games.id17.gui.f.o:
    com.tyrfing.games.id17.war.War war -> h
    com.tyrfing.games.id17.houses.House playerHouse -> i
    com.tyrlib2.gui.ImageBox warGUIOpener -> j
    com.tyrlib2.gui.Label progress -> k
    com.tyrlib2.gui.ScaledVector2 WAR_GUI_OPENER_SIGIL_SIZE -> a
    com.tyrlib2.gui.ScaledVector2 WAR_GUI_OPENER_SIGIL_POS -> b
    com.tyrlib2.gui.ScaledVector2 WAR_GUI_OPENER_SIZE -> c
    com.tyrlib2.gui.ScaledVector2 WAR_GUI_OPENER_POS -> d
    com.tyrlib2.gui.ScaledVector2 WAR_GUI_OPENER_LABEL_POS -> e
    com.tyrlib2.util.Color COLOR_WINNING -> f
    com.tyrlib2.util.Color COLOR_LOOSING -> g
    int warID -> l
    long timestamp -> m
    void destroy() -> a
    void updateProgress() -> b
com.tyrfing.games.id17.gui.war.WarGUI$1 -> com.tyrfing.games.id17.gui.f.p:
    com.tyrfing.games.id17.gui.war.WarGUI this$0 -> a
    com.tyrfing.games.id17.houses.House val$enemyHouse -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.holdings.Barony -> com.tyrfing.games.id17.holdings.Barony:
    long serialVersionUID -> serialVersionUID
    float REINFORCEMENT_TICK -> REINFORCEMENT_TICK
    float MERC_COST -> MERC_COST
    float[] stats -> stats
    java.util.List waterfallSystems -> a
    com.tyrlib2.graphics.particles.Particle occupeeParticle -> b
    com.tyrfing.games.id17.world.WorldChunk worldChunk -> c
    com.tyrlib2.graphics.scene.SceneNode node -> d
    boolean explored -> explored
    int index -> index
    com.tyrfing.games.id17.war.Army garrison -> garrison
    com.tyrfing.games.id17.war.Army levy -> levy
    com.tyrfing.games.id17.holdings.Holding[] subHoldings -> subHoldings
    int countSubHoldings -> countSubHoldings
    java.util.List suppliedGoods -> suppliedGoods
    java.util.List suppliedGoodsTmp -> suppliedGoodsTmp
    float reinforcementTime -> reinforcementTime
    com.tyrfing.games.id17.houses.House occupee -> occupee
    com.tyrfing.games.id17.world.MapFile mapFile -> mapFile
    com.tyrfing.games.id17.holdings.BaronyWindow baronyWindow -> baronyWindow
    float mercCosts -> mercCosts
    com.tyrlib2.graphics.scene.SceneNode getNode() -> getNode
    void build(com.tyrfing.games.id17.world.MapFile,com.tyrfing.games.id17.holdings.BaronyWindow) -> build
    void build() -> build
    com.tyrfing.games.id17.world.WorldChunk getWorldChunk() -> getWorldChunk
    java.lang.String toString() -> toString
    void onUpdate(float) -> onUpdate
    float getFreeTroops() -> a
    void reinforce(float,float,int) -> a
    boolean isFinished() -> isFinished
    void addHolding(com.tyrfing.games.id17.holdings.Holding) -> addHolding
    void raiseArmy() -> raiseArmy
    com.tyrfing.games.id17.war.Army getGarrison() -> getGarrison
    com.tyrfing.games.id17.war.Army getLevy() -> getLevy
    void setLevy(com.tyrfing.games.id17.war.Army) -> setLevy
    void setGarrison(com.tyrfing.games.id17.war.Army) -> setGarrison
    void controleBy(com.tyrfing.games.id17.houses.House) -> controleBy
    int getIndex() -> getIndex
    void setIndex(int) -> setIndex
    int getCountSubHoldings() -> getCountSubHoldings
    com.tyrfing.games.id17.holdings.Holding getSubHolding(int) -> getSubHolding
    void addGoodAdditive(com.tyrfing.games.id17.trade.Good,int) -> addGoodAdditive
    void addGood(com.tyrfing.games.id17.trade.Good,int) -> addGood
    void resetGoods() -> resetGoods
    void spreadGoods() -> spreadGoods
    void spreadGoodTo(com.tyrfing.games.id17.trade.Good,com.tyrfing.games.id17.holdings.Barony,int) -> spreadGoodTo
    void spreadGoodsFinished() -> spreadGoodsFinished
    boolean hasGood(com.tyrfing.games.id17.trade.Good) -> hasGood
    com.tyrfing.games.id17.trade.Good getGood(java.lang.String) -> getGood
    com.tyrfing.games.id17.trade.Good getGood(int) -> getGood
    int getCountSuppliedGoods() -> getCountSuppliedGoods
    com.tyrfing.games.id17.trade.Good getSuppliedGood(int) -> getSuppliedGood
    void createOccupeeParticle(com.tyrfing.games.id17.houses.House) -> createOccupeeParticle
    void updateOccupeeParticlePos() -> updateOccupeeParticlePos
    void setOccupied(com.tyrfing.games.id17.houses.House) -> setOccupied
    com.tyrfing.games.id17.houses.House getOccupee() -> getOccupee
    boolean hasSubHolding(com.tyrfing.games.id17.holdings.Holding) -> hasSubHolding
    void setWorldChunk(com.tyrfing.games.id17.world.WorldChunk) -> setWorldChunk
    float getInfluence(com.tyrfing.games.id17.houses.House) -> getInfluence
    void setExplored(boolean) -> setExplored
    boolean isExplored() -> isExplored
    void explore(com.tyrfing.games.id17.houses.House,boolean) -> explore
    void addWaterfall(com.tyrlib2.graphics.particles.ParticleSystem,com.tyrlib2.graphics.particles.ParticleSystem) -> addWaterfall
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeInternalsToStream(java.io.ObjectOutputStream) -> writeInternalsToStream
    void readInternalsFromStream(java.io.ObjectInputStream) -> readInternalsFromStream
    void setWaterfallSystemsVisible(boolean) -> setWaterfallSystemsVisible
com.tyrfing.games.id17.holdings.BaronyWindow -> com.tyrfing.games.id17.holdings.BaronyWindow:
    long serialVersionUID -> serialVersionUID
    short x -> x
    short y -> y
    short w -> w
    short h -> h
    long color -> color
com.tyrfing.games.id17.holdings.Farm -> com.tyrfing.games.id17.holdings.Farm:
    long serialVersionUID -> serialVersionUID
    float[] stats -> stats
com.tyrfing.games.id17.holdings.Forest -> com.tyrfing.games.id17.holdings.Forest:
    long serialVersionUID -> serialVersionUID
    float[] stats -> stats
com.tyrfing.games.id17.holdings.GreatForest -> com.tyrfing.games.id17.holdings.GreatForest:
    long serialVersionUID -> serialVersionUID
    float[] stats -> stats
com.tyrfing.games.id17.holdings.Holding -> com.tyrfing.games.id17.holdings.Holding:
    long serialVersionUID -> serialVersionUID
    float PILLAGED_DURATION -> PILLAGED_DURATION
    float PILLAGE_DEATH -> PILLAGE_DEATH
    float PILLAGE_MONEY -> PILLAGE_MONEY
    com.tyrfing.games.id17.holdings.HoldingData holdingData -> holdingData
    com.tyrfing.games.id17.houses.House owner -> owner
    float passedTime -> passedTime
    float incomeTime -> incomeTime
    com.tyrlib2.math.Vector3 armyBasePos -> armyBasePos
    com.tyrlib2.math.Vector3 armyOffset -> armyOffset
    com.tyrlib2.math.Vector3 OFFSET -> OFFSET
    com.tyrlib2.math.Vector3 OFFSET_PROGRESS -> OFFSET_PROGRESS
    float WANDER_OFF -> WANDER_OFF
    float WANDER_FACTOR -> WANDER_FACTOR
    com.tyrlib2.math.Vector2 OWNERSHIP_SIGIL_SIZE -> OWNERSHIP_SIGIL_SIZE
    float REVOLT_DELAY -> REVOLT_DELAY
    float passedRevoltDelay -> passedRevoltDelay
    java.util.List productions -> productions
    java.util.List buildings -> buildings
    float[] localStats -> localStats
    float[] remainingAttractivity -> remainingAttractivity
    com.tyrfing.games.id17.holdings.projects.IProject project -> project
    com.tyrlib2.graphics.particles.ParticleSystem projectSystem -> projectSystem
    com.tyrlib2.graphics.particles.ParticleSystem ownerSystem -> ownerSystem
    com.tyrlib2.graphics.renderer.TextureRegion projectProgressRegion -> projectProgressRegion
    com.tyrlib2.graphics.particles.ParticleSystem smokeTrail -> smokeTrail
    java.util.List positionedArmies -> positionedArmies
    float hungerTime -> hungerTime
    boolean pillaged -> pillaged
    float pillageTimestamp -> pillageTimestamp
    float HUNGER_POVERTY_INC -> HUNGER_POVERTY_INC
    float PILLAGED_POVERTY -> PILLAGED_POVERTY
    float MAX_POVERTY -> MAX_POVERTY
    float TECH_SPREAD_HOLDING -> TECH_SPREAD_HOLDING
    float TECH_SPREAD_BARONY -> TECH_SPREAD_BARONY
    float TECH_SPREAD_OUTSIDE_DYNASTY -> TECH_SPREAD_OUTSIDE_DYNASTY
    java.util.List unrestSources -> unrestSources
    java.util.List tradeNeighbours -> tradeNeighbours
    java.lang.String fullName -> fullName
    float growth -> growth
    float hunger -> hunger
    float totalWander -> totalWander
    float trackWander -> trackWander
    java.util.Map HUD_OFFSET -> a
    gnu.trove.map.hash.TIntFloatHashMap demandMap -> demandMap
    com.tyrlib2.graphics.materials.ParticleMaterial ownerMaterial -> b
    com.tyrfing.games.id17.houses.House getOwner() -> getOwner
    void controleBy(com.tyrfing.games.id17.houses.House) -> controleBy
    java.lang.String getName() -> getName
    java.lang.String getLinkedName() -> getLinkedName
    int getCountInhabitants() -> getCountInhabitants
    java.lang.String getFullName() -> getFullName
    void onUpdate(float) -> onUpdate
    int getGrowth() -> getGrowth
    int getHunger() -> getHunger
    boolean isPillaged() -> isPillaged
    void updateAttractivities() -> a
    void wanderOff(com.tyrfing.games.id17.holdings.Barony) -> a
    int getWander() -> getWander
    com.tyrfing.games.id17.holdings.HoldingData getHoldingData() -> getHoldingData
    boolean isFinished() -> isFinished
    int getCountProductions() -> getCountProductions
    com.tyrfing.games.id17.trade.GoodProduction getProduction(int) -> getProduction
    void startProject(com.tyrfing.games.id17.holdings.projects.IProject) -> startProject
    boolean isProjectVisibleFor(com.tyrfing.games.id17.houses.House) -> isProjectVisibleFor
    void createProjectIcon() -> b
    void createProjectBar() -> c
    boolean hasActiveProject() -> hasActiveProject
    com.tyrfing.games.id17.holdings.projects.IProject getProject() -> getProject
    void upgradeBuilding(int) -> upgradeBuilding
    com.tyrfing.games.id17.buildings.Building getBuilding(int) -> getBuilding
    com.tyrfing.games.id17.buildings.Building isBuilt(com.tyrfing.games.id17.buildings.Building$TYPE) -> isBuilt
    int getBuildingLevel(com.tyrfing.games.id17.buildings.Building$TYPE) -> getBuildingLevel
    void addBuilding(com.tyrfing.games.id17.buildings.Building) -> addBuilding
    float[] getStats() -> getStats
    com.tyrfing.games.id17.war.Army getMainPositionedArmy() -> getMainPositionedArmy
    void addPositionedArmy(com.tyrfing.games.id17.war.Army) -> addPositionedArmy
    void removePositionedArmy(com.tyrfing.games.id17.war.Army) -> removePositionedArmy
    int getCountPositionedArmies() -> getCountPositionedArmies
    com.tyrlib2.math.Vector3 getArmyBasePos() -> getArmyBasePos
    com.tyrlib2.math.Vector3 getArmyOffset() -> getArmyOffset
    void initOffsets() -> initOffsets
    boolean isPillageableByArmy(com.tyrfing.games.id17.war.Army) -> isPillageableByArmy
    void setPillaged(boolean) -> setPillaged
    void addUnrestSource(com.tyrfing.games.id17.holdings.UnrestSource) -> addUnrestSource
    void removeUnrestSource(com.tyrfing.games.id17.holdings.UnrestSource) -> removeUnrestSource
    void removeUnrestSource(java.lang.String) -> removeUnrestSource
    com.tyrfing.games.id17.holdings.UnrestSource getUnrestSource(int) -> getUnrestSource
    void clearUnrest() -> clearUnrest
    float getRevoltRisk(com.tyrfing.games.id17.holdings.UnrestSource) -> getRevoltRisk
    void updateRevoltRisks() -> updateRevoltRisks
    void checkRevolts() -> checkRevolts
    void addProductionAdditive(com.tyrfing.games.id17.trade.GoodProduction) -> addProductionAdditive
    void removeProduction(com.tyrfing.games.id17.trade.GoodProduction) -> removeProduction
    void checkTechSpread() -> checkTechSpread
    void checkTechSpread(com.tyrfing.games.id17.holdings.Barony,float) -> checkTechSpread
    void addTradeNeighbour(com.tyrfing.games.id17.holdings.Barony) -> addTradeNeighbour
    void removeTradeNeighbour(com.tyrfing.games.id17.holdings.Barony) -> removeTradeNeighbour
    com.tyrfing.games.id17.holdings.Barony getTradeNeighbour(int) -> getTradeNeighbour
    void displayProject() -> displayProject
    void hideProject() -> hideProject
    void finishActiveProject() -> finishActiveProject
    void displayOwner() -> displayOwner
    void hideOwner() -> hideOwner
    java.lang.String toString() -> toString
    short getHoldingID() -> getHoldingID
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeInternalsToStream(java.io.ObjectOutputStream) -> writeInternalsToStream
    void readInternalsFromStream(java.io.ObjectInputStream) -> readInternalsFromStream
    void addDemand(int,float) -> addDemand
    float getDemand(int) -> getDemand
    float getSupply(int) -> getSupply
    float getFoodDemand() -> getFoodDemand
    float getFoodSupply() -> getFoodSupply
    float getSupplyAttractivity() -> getSupplyAttractivity
    int getCountUnrestSources() -> getCountUnrestSources
    com.tyrlib2.graphics.particles.ParticleSystem getOwnerSystem() -> getOwnerSystem
    com.tyrfing.games.id17.war.Army getPositionedArmy(int) -> getPositionedArmy
com.tyrfing.games.id17.holdings.HoldingData -> com.tyrfing.games.id17.holdings.HoldingData:
    long serialVersionUID -> serialVersionUID
    float[] population -> population
    float inhabitants -> inhabitants
    float growth -> growth
    java.lang.String name -> name
    java.lang.String typeName -> typeName
    com.tyrfing.games.id17.holdings.Barony barony -> barony
    com.tyrlib2.graphics.renderables.Entity worldEntity -> worldEntity
    int objectNo -> objectNo
    float incomeMult -> incomeMult
    float incomeBonus -> incomeBonus
    float tradeIncome -> tradeIncome
    float prodMult -> prodMult
    float prodBuildings -> prodBuildings
    float prodPop -> prodPop
    float prodTrade -> prodTrade
    int storeGrainMax -> storeGrainMax
    int storeGrain -> storeGrain
    int storedGrain -> storedGrain
    float research -> research
    float researchMult -> researchMult
    float researchBonus -> researchBonus
    float researchBuildings -> researchBuildings
    float researchPop -> researchPop
    float income -> income
    float prod -> prod
    int supplies -> supplies
    float baseSupplies -> baseSupplies
    float tradeSupplies -> tradeSupplies
    float revoltRisk -> revoltRisk
    float atkMult -> atkMult
    float defMult -> defMult
    float[] typeMult -> typeMult
    float tradeBonus -> tradeBonus
    float trade -> trade
    float taxes -> taxes
    float maint -> maint
    short index -> index
    float troopRevoltStop -> troopRevoltStop
    float education -> education
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    void changePop(int,float) -> changePop
com.tyrfing.games.id17.holdings.HoldingTypes -> com.tyrfing.games.id17.holdings.HoldingTypes:
    long serialVersionUID -> serialVersionUID
    java.util.HashMap holdingStats -> holdingStats
    int INHABITANTS -> INHABITANTS
    int GROWTH -> GROWTH
    int INCOME -> INCOME
    int POPULATION -> POPULATION
    int MERCHANTS -> MERCHANTS
    int SCHOLARS -> SCHOLARS
    int WORKERS -> WORKERS
    int PEASANTS -> PEASANTS
    int ATTRACTIVITY -> ATTRACTIVITY
    int MERCHANT_ATTRACTIVITY -> MERCHANT_ATTRACTIVITY
    int SCHOLAR_ATTRACTIVITY -> SCHOLAR_ATTRACTIVITY
    int WORKERS_ATTRACTIVITY -> WORKERS_ATTRACTIVITY
    int PEASANTS_ATTRACTIVITY -> PEASANTS_ATTRACTIVITY
    int MERCHANT_TAX_BONUS -> MERCHANT_TAX_BONUS
    int SCHOLAR_TAX_BONUS -> SCHOLAR_TAX_BONUS
    int WORKERS_TAX_BONUS -> WORKERS_TAX_BONUS
    int PEASANTS_TAX_BONUS -> PEASANTS_TAX_BONUS
    int COUNT_STATS -> COUNT_STATS
    int TAX_BONUS -> TAX_BONUS
    float[] getStats(java.lang.String) -> getStats
    com.tyrfing.games.id17.holdings.Holding createHolding(com.tyrfing.games.id17.holdings.HoldingData) -> createHolding
com.tyrfing.games.id17.holdings.Mine -> com.tyrfing.games.id17.holdings.Mine:
    long serialVersionUID -> serialVersionUID
    float[] stats -> stats
com.tyrfing.games.id17.holdings.Pasture -> com.tyrfing.games.id17.holdings.Pasture:
    long serialVersionUID -> serialVersionUID
    float[] stats -> stats
com.tyrfing.games.id17.holdings.PopulationType -> com.tyrfing.games.id17.holdings.PopulationType:
    com.tyrfing.games.id17.holdings.PopulationType Traders -> Traders
    com.tyrfing.games.id17.holdings.PopulationType Scholars -> Scholars
    com.tyrfing.games.id17.holdings.PopulationType Workers -> Workers
    com.tyrfing.games.id17.holdings.PopulationType Peasants -> Peasants
    int BASE_TAX -> BASE_TAX
    int ARMY_PROB -> ARMY_PROB
    int PRODUCTIVITY -> PRODUCTIVITY
    int RESEARCH -> RESEARCH
    int TRADE -> TRADE
    com.tyrfing.games.id17.holdings.PopulationType[] VALUES -> VALUES
    int COUNT_STATS -> COUNT_STATS
    float[][] POP_STATS -> POP_STATS
    com.tyrfing.games.id17.holdings.PopulationType[] ENUM$VALUES -> a
    com.tyrfing.games.id17.holdings.PopulationType[] values() -> values
    com.tyrfing.games.id17.holdings.PopulationType valueOf(java.lang.String) -> valueOf
com.tyrfing.games.id17.holdings.Quarry -> com.tyrfing.games.id17.holdings.Quarry:
    long serialVersionUID -> serialVersionUID
    float[] stats -> stats
com.tyrfing.games.id17.holdings.Ranch -> com.tyrfing.games.id17.holdings.Ranch:
    long serialVersionUID -> serialVersionUID
    float[] stats -> stats
com.tyrfing.games.id17.holdings.UnrestSource -> com.tyrfing.games.id17.holdings.UnrestSource:
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    float probability -> probability
    float strength -> strength
    java.lang.String headline -> headline
    java.lang.String text -> text
    com.tyrfing.games.id17.holdings.UnrestSource copy() -> copy
    void comply(com.tyrfing.games.id17.houses.House) -> comply
com.tyrfing.games.id17.holdings.Village -> com.tyrfing.games.id17.holdings.Village:
    long serialVersionUID -> serialVersionUID
    float[] stats -> stats
com.tyrfing.games.id17.holdings.Windmill -> com.tyrfing.games.id17.holdings.Windmill:
    long serialVersionUID -> serialVersionUID
    float[] stats -> stats
com.tyrfing.games.id17.holdings.XMLBaronyFactory -> com.tyrfing.games.id17.holdings.a:
    org.xmlpull.v1.XmlPullParser parser -> a
    com.tyrfing.games.id17.world.MapFile mapFile -> b
    com.tyrfing.games.id17.holdings.Barony barony -> c
    com.tyrfing.games.id17.holdings.Holding create() -> a
    void parseBarony() -> b
    void parseHolding() -> c
com.tyrfing.games.id17.holdings.XMLBaronySetFactory -> com.tyrfing.games.id17.holdings.b:
    org.xmlpull.v1.XmlPullParser parser -> a
    com.tyrfing.games.id17.world.MapFile mapFile -> b
    void create() -> a
    void parseBarony() -> b
com.tyrfing.games.id17.holdings.projects.BuildingProject -> com.tyrfing.games.id17.holdings.projects.BuildingProject:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.houses.House orderer -> orderer
    com.tyrfing.games.id17.buildings.Building$TYPE type -> type
    com.tyrfing.games.id17.holdings.Holding holding -> holding
    float progress -> progress
    float prod -> prod
    float cost -> cost
    float progressLast -> progressLast
    float progressSpeedInterpolated -> progressSpeedInterpolated
    float timeSinceLastUpdate -> timeSinceLastUpdate
    boolean aborted -> aborted
    int WEALTHY_CONSTRUCTION -> WEALTHY_CONSTRUCTION
    float WEALTHY_CONSTRUCTION_DECAY -> WEALTHY_CONSTRUCTION_DECAY
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
    float getProgress() -> getProgress
    int getExpectedDays() -> getExpectedDays
    void abort() -> abort
    java.lang.String getIconAtlasName() -> getIconAtlasName
    java.lang.String getIconRegionName() -> getIconRegionName
    void setProgress(float) -> setProgress
    com.tyrfing.games.id17.networking.Build getPacket() -> getPacket
    void finish() -> finish
com.tyrfing.games.id17.holdings.projects.IProject -> com.tyrfing.games.id17.holdings.projects.IProject:
    float getProgress() -> getProgress
    void abort() -> abort
    void finish() -> finish
    java.lang.String getIconAtlasName() -> getIconAtlasName
    java.lang.String getIconRegionName() -> getIconRegionName
    void setProgress(float) -> setProgress
com.tyrfing.games.id17.holdings.projects.UpgradeRegimentProject -> com.tyrfing.games.id17.holdings.projects.UpgradeRegimentProject:
    long serialVersionUID -> serialVersionUID
    int MAX_INCREASE_PER_UPGRADE -> MAX_INCREASE_PER_UPGRADE
    int WEALTHY_CONSTRUCTION -> WEALTHY_CONSTRUCTION
    float WEALTHY_CONSTRUCTION_DECAY -> WEALTHY_CONSTRUCTION_DECAY
    float progress -> progress
    float prod -> prod
    com.tyrfing.games.id17.war.Regiment regiment -> regiment
    float cost -> cost
    com.tyrfing.games.id17.war.Army army -> army
    float progressLast -> progressLast
    float progressSpeedInterpolated -> progressSpeedInterpolated
    float timeSinceLastUpdate -> timeSinceLastUpdate
    boolean aborted -> aborted
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
    float getProgress() -> getProgress
    void abort() -> abort
    java.lang.String getIconAtlasName() -> getIconAtlasName
    java.lang.String getIconRegionName() -> getIconRegionName
    void setProgress(float) -> setProgress
    com.tyrfing.games.id17.networking.UpgradeRegiment getPacket() -> getPacket
    void finish() -> finish
com.tyrfing.games.id17.houses.Claim -> com.tyrfing.games.id17.houses.Claim:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.holdings.Holding holding -> holding
com.tyrfing.games.id17.houses.House -> com.tyrfing.games.id17.houses.House:
    long serialVersionUID -> serialVersionUID
    int RELATION_STAT -> RELATION_STAT
    int HAS_DIPLOMAT -> HAS_DIPLOMAT
    int HAS_MARRIAGE -> HAS_MARRIAGE
    int HAS_DEFENSIVE_PACT -> HAS_DEFENSIVE_PACT
    int HAS_TRADE_AGREEMENT -> HAS_TRADE_AGREEMENT
    int HAS_TRUCE -> HAS_TRUCE
    int FAVOR_STAT -> FAVOR_STAT
    int COURT_POWER -> COURT_POWER
    int HAS_SPY -> HAS_SPY
    int OFFERS_PROTECTION -> OFFERS_PROTECTION
    int COUNT_STATS -> COUNT_STATS
    int POP_TAXES -> POP_TAXES
    int TRADE_TAXES -> TRADE_TAXES
    int CONSCRIPTION -> CONSCRIPTION
    int MERCENARIES -> MERCENARIES
    int VASSAL_TAXES -> VASSAL_TAXES
    int VASSAL_ARMY -> VASSAL_ARMY
    int WARMONGERER -> WARMONGERER
    int DIPLOMATIC_REPUTATION -> DIPLOMATIC_REPUTATION
    int HONORABLE -> HONORABLE
    int UNSTABLE -> UNSTABLE
    int INCOME_MULT -> INCOME_MULT
    int ARMY_MAINT_MULT -> ARMY_MAINT_MULT
    int PROD_COST_MULT -> PROD_COST_MULT
    int ARMY_SPEED_MULT -> ARMY_SPEED_MULT
    int SUPPLY_MULT -> SUPPLY_MULT
    int IS_PROTECTED -> IS_PROTECTED
    int PROGRESS -> PROGRESS
    int WEALTH -> WEALTH
    int CONSTRUCTION -> CONSTRUCTION
    int TYRANNY -> TYRANNY
    int RESEARCH_MULT -> RESEARCH_MULT
    int SCORE_MULT -> SCORE_MULT
    java.lang.String[] STAT_NAMES -> STAT_NAMES
    int RELATION_HIT_TAXES -> RELATION_HIT_TAXES
    int RELATION_HIT_ARMY -> RELATION_HIT_ARMY
    int MAX_RELATIONS -> MAX_RELATIONS
    int MIN_RELATIONS -> MIN_RELATIONS
    int MAX_HONOR -> MAX_HONOR
    int MIN_HONOR -> MIN_HONOR
    int DEFAULT_GOLD -> DEFAULT_GOLD
    int DEFAULT_HONOR -> DEFAULT_HONOR
    int DIPLO_COOLDOWN -> DIPLO_COOLDOWN
    float SPY_COURT_POWER -> SPY_COURT_POWER
    float NEIGHBOUR_COURT_POWER -> NEIGHBOUR_COURT_POWER
    float SAME_DYNASTY_COURT_POWER -> SAME_DYNASTY_COURT_POWER
    float LAW_TIMER -> LAW_TIMER
    float FERTILITY_PER_PAIR -> FERTILITY_PER_PAIR
    float FERTILITY_PER_MARRIAGE -> FERTILITY_PER_MARRIAGE
    int INTELLECTUAL_EXPLORATION -> INTELLECTUAL_EXPLORATION
    float INTELLECTUAL_EXPLORATION_DECAY -> INTELLECTUAL_EXPLORATION_DECAY
    float gold -> gold
    float honor -> honor
    float income -> income
    float newIncome -> newIncome
    float fertility -> fertility
    float accGrowth -> accGrowth
    float research -> research
    float newResearch -> newResearch
    float passedLawTime -> passedLawTime
    int males -> males
    int females -> females
    java.lang.String name -> name
    gnu.trove.map.hash.TIntObjectHashMap houseRelations -> houseRelations
    float[] stats -> stats
    java.util.List subHouses -> subHouses
    java.util.List holdings -> holdings
    java.util.List baronies -> baronies
    java.util.List holdingIDs -> holdingIDs
    java.util.List claims -> claims
    com.tyrfing.games.id17.houses.House overlord -> a
    java.util.List wars -> wars
    com.tyrfing.games.id17.houses.HouseController controller -> controller
    boolean isOnCooldown -> isOnCooldown
    float passedCooldown -> passedCooldown
    boolean updateReputation -> updateReputation
    java.util.List statModifiers -> statModifiers
    com.tyrlib2.game.Updater statUpdater -> statUpdater
    java.util.List loans -> loans
    gnu.trove.list.array.TShortArrayList armies -> armies
    com.tyrfing.games.id17.houses.House supremeOverlord -> supremeOverlord
    short id -> id
    com.tyrfing.games.id17.intrigue.IntrigueProject intrigueProject -> intrigueProject
    com.tyrfing.games.id17.technology.TechnologyProject techProject -> techProject
    byte[] lawSettings -> lawSettings
    int maxHoldings -> maxHoldings
    int MAX_REPUTATIONS -> MAX_REPUTATIONS
    com.tyrfing.games.id17.houses.reputation.Reputation[] activeReputations -> activeReputations
    java.util.Set neighbours -> neighbours
    java.util.List houseNeighbours -> houseNeighbours
    int rank -> rank
    float points -> points
    float holdingPoints -> holdingPoints
    float troopPoints -> troopPoints
    float incomePoints -> incomePoints
    float honorPoints -> honorPoints
    float techPoints -> techPoints
    int REALM_POINTS -> REALM_POINTS
    int ECONOMY_POINTS -> ECONOMY_POINTS
    int MILITARY_POINTS -> MILITARY_POINTS
    int DIPLOMACY_POINTS -> DIPLOMACY_POINTS
    int HOUSE_POINTS -> HOUSE_POINTS
    int EXPLORATION_POINTS -> EXPLORATION_POINTS
    float POINTS_PER_HOLDING -> POINTS_PER_HOLDING
    float POINTS_PER_VASSAL_HOLDING -> POINTS_PER_VASSAL_HOLDING
    float HOLDINGS_PER_MEMBER -> HOLDINGS_PER_MEMBER
    float HOLDING_BOOST_CASTLE -> HOLDING_BOOST_CASTLE
    int LAW_TYRANNY -> LAW_TYRANNY
    java.lang.String[] pointCategories -> pointCategories
    float[] pointsInc -> pointsInc
    boolean[] researched -> researched
    boolean[] discovered -> discovered
    com.tyrfing.games.id17.technology.Technology[] techs -> techs
    int countTechs -> countTechs
    int exploredBaronies -> exploredBaronies
    int totalTroops -> totalTroops
    java.util.Map enabledBuildings -> enabledBuildings
    boolean[] enabledUnits -> enabledUnits
    float[] unitTypeMult -> unitTypeMult
    float[][] buildingMult -> buildingMult
    float[][] goodsMult -> goodsMult
    java.lang.String REBEL_FACTION_NAME -> REBEL_FACTION_NAME
    int INITIAL_DIPLO_POINTS -> INITIAL_DIPLO_POINTS
    gnu.trove.list.array.TIntArrayList visibleBaronies -> visibleBaronies
    gnu.trove.list.array.TIntArrayList visibleHouses -> visibleHouses
    float finalIncome -> finalIncome
    float tradeIncome -> tradeIncome
    float taxIncome -> taxIncome
    float armyMaint -> armyMaint
    float mercCosts -> mercCosts
    float holdingMaint -> holdingMaint
    int countMarriages -> countMarriages
    float vassalIncome -> vassalIncome
    int interest -> interest
    float greatBuildingPoints -> greatBuildingPoints
    void findVisibleBaronies() -> findVisibleBaronies
    boolean isVisible(int) -> isVisible
    void addVisibleBarony(com.tyrfing.games.id17.holdings.Barony,boolean) -> addVisibleBarony
    void propagateVisibleBarony(com.tyrfing.games.id17.holdings.Barony) -> a
    int getCountVisibleBaronies() -> getCountVisibleBaronies
    int getVisibleBarony(int) -> getVisibleBarony
    void enableUnit(com.tyrfing.games.id17.war.UnitType) -> enableUnit
    void disableUnit(com.tyrfing.games.id17.war.UnitType) -> disableUnit
    boolean isUnitEnabled(com.tyrfing.games.id17.war.UnitType) -> isUnitEnabled
    void enableBuilding(java.lang.String,int) -> enableBuilding
    void disableBuilding(java.lang.String,int) -> disableBuilding
    boolean isBuildingEnabled(java.lang.String,int) -> isBuildingEnabled
    int getLawSetting(int) -> getLawSetting
    void setLawSetting(int,int) -> setLawSetting
    void createBorders() -> createBorders
    java.util.List getSubHouses() -> getSubHouses
    void addSubHouse(com.tyrfing.games.id17.houses.House) -> addSubHouse
    void removeSubject(com.tyrfing.games.id17.houses.House) -> removeSubject
    void updateSupremeOverlord(com.tyrfing.games.id17.houses.House) -> a
    void removeSubHouse(com.tyrfing.games.id17.houses.House) -> removeSubHouse
    void updateBorders() -> updateBorders
    java.util.List getBaronies() -> getBaronies
    java.util.List getAllBaronies() -> getAllBaronies
    java.util.List getAllHoldings() -> getAllHoldings
    int getWeighedTotalTroopCount() -> getWeighedTotalTroopCount
    java.util.List getHoldings() -> getHoldings
    void addHolding(com.tyrfing.games.id17.holdings.Holding) -> addHolding
    void transferHolding(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.holdings.Holding) -> transferHolding
    void notifyOverlordVassalHoldingLost(com.tyrfing.games.id17.holdings.Holding) -> notifyOverlordVassalHoldingLost
    void removeHolding(com.tyrfing.games.id17.holdings.Holding) -> removeHolding
    void updateNeighbours() -> updateNeighbours
    boolean isRealmNeighbour(com.tyrfing.games.id17.houses.House) -> isRealmNeighbour
    int getMaxHoldings() -> getMaxHoldings
    float getTaxFactor() -> getTaxFactor
    void updateFamily() -> updateFamily
    boolean hasOverlord(com.tyrfing.games.id17.houses.House) -> hasOverlord
    void addIncome(float) -> addIncome
    void addResearch(float) -> addResearch
    float getIncome() -> getIncome
    float getResearch() -> getResearch
    int getMales() -> getMales
    int getFemales() -> getFemales
    void changeMales(int) -> changeMales
    void changeFemales(int) -> changeFemales
    void updateFertility() -> a
    boolean canPassLaws() -> canPassLaws
    void onUpdate(float) -> onUpdate
    boolean isRebel() -> isRebel
    float getTotalPointInc() -> getTotalPointInc
    void updatePointInc() -> updatePointInc
    float getHoldingPoints() -> getHoldingPoints
    float getVassalHoldingPoints() -> getVassalHoldingPoints
    boolean isFinished() -> isFinished
    java.lang.String getName() -> getName
    java.lang.String getLinkedName() -> getLinkedName
    com.tyrfing.games.id17.houses.HouseController getController() -> getController
    void setHouseController(com.tyrfing.games.id17.houses.HouseController) -> setHouseController
    void makePlayerBorders() -> b
    void addWar(com.tyrfing.games.id17.war.War) -> addWar
    void removeWar(com.tyrfing.games.id17.war.War) -> removeWar
    com.tyrfing.games.id17.war.War getWar(int) -> getWar
    com.tyrfing.games.id17.war.War getWarByAttackerID(int) -> getWarByAttackerID
    int getCountWars() -> getCountWars
    com.tyrfing.games.id17.war.War isEnemy(com.tyrfing.games.id17.houses.House) -> isEnemy
    com.tyrfing.games.id17.war.War isEnemy(com.tyrfing.games.id17.houses.House,int) -> isEnemy
    void makeEnemy(com.tyrfing.games.id17.houses.House) -> makeEnemy
    void endPacts(com.tyrfing.games.id17.houses.House) -> endPacts
    int getTotalTroops() -> getTotalTroops
    boolean isSubjectOf(com.tyrfing.games.id17.houses.House) -> isSubjectOf
    boolean isIndependend() -> isIndependend
    com.tyrfing.games.id17.houses.House getSupremeOverlord() -> getSupremeOverlord
    com.tyrfing.games.id17.houses.House getOverlord() -> getOverlord
    boolean haveSameOverlordWith(com.tyrfing.games.id17.houses.House) -> haveSameOverlordWith
    void changeGold(float) -> changeGold
    float getGold() -> getGold
    float getHonor() -> getHonor
    void changeHonor(float) -> changeHonor
    float getRelation(com.tyrfing.games.id17.houses.House) -> getRelation
    float getLawRelation() -> getLawRelation
    void changeRelation(com.tyrfing.games.id17.houses.House,float) -> changeRelation
    void setHouseStat(com.tyrfing.games.id17.houses.House,int,float) -> setHouseStat
    float getHouseStat(com.tyrfing.games.id17.houses.House,int) -> getHouseStat
    void changeHouseStat(com.tyrfing.games.id17.houses.House,int,float) -> changeHouseStat
    boolean isOnCooldown() -> isOnCooldown
    void isOnCooldown(boolean) -> isOnCooldown
    int hasWarReason(com.tyrfing.games.id17.holdings.Holding) -> hasWarReason
    boolean hasClaim(com.tyrfing.games.id17.holdings.Holding) -> hasClaim
    int getCountStartModifiers() -> getCountStartModifiers
    com.tyrfing.games.id17.houses.StatModifier getStatModifier(int) -> getStatModifier
    void addStatModifier(com.tyrfing.games.id17.houses.StatModifier) -> addStatModifier
    void removeStatModfifier(java.lang.String,com.tyrfing.games.id17.houses.House) -> removeStatModfifier
    float getModifierValue(java.lang.String,com.tyrfing.games.id17.houses.House) -> getModifierValue
    com.tyrfing.games.id17.houses.StatModifier getStatModifier(java.lang.String) -> getStatModifier
    com.tyrfing.games.id17.houses.StatModifier getStatModifier(java.lang.String,com.tyrfing.games.id17.houses.House) -> getStatModifier
    void addLoan(com.tyrfing.games.id17.houses.Loan) -> addLoan
    void removeLoan(com.tyrfing.games.id17.houses.Loan) -> removeLoan
    com.tyrfing.games.id17.houses.Loan getLoan(com.tyrfing.games.id17.houses.House) -> getLoan
    void endLoan(com.tyrfing.games.id17.houses.Loan) -> endLoan
    void addSpy(com.tyrfing.games.id17.houses.House) -> addSpy
    void removeSpy(com.tyrfing.games.id17.houses.House) -> removeSpy
    boolean hasSpy(com.tyrfing.games.id17.houses.House) -> hasSpy
    int getCourtPower(com.tyrfing.games.id17.houses.House) -> getCourtPower
    void addTaxedGold(float) -> addTaxedGold
    void changeReputation(int,float) -> changeReputation
    boolean isActive(com.tyrfing.games.id17.houses.reputation.Reputation) -> isActive
    boolean isActive(java.lang.String) -> isActive
    void startTechnologyProject(com.tyrfing.games.id17.technology.TechnologyProject) -> startTechnologyProject
    boolean hasResearched(com.tyrfing.games.id17.technology.Technology) -> hasResearched
    boolean canResearch(com.tyrfing.games.id17.technology.Technology) -> canResearch
    void rebuild() -> rebuild
    void setOverlord(com.tyrfing.games.id17.houses.House) -> setOverlord
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeInternalsToStream(java.io.ObjectOutputStream) -> writeInternalsToStream
    void readInternalsFromStream(java.io.ObjectInputStream) -> readInternalsFromStream
    boolean hasMarriage(com.tyrfing.games.id17.houses.House) -> hasMarriage
    boolean hasDiplomaticRelation(com.tyrfing.games.id17.houses.House) -> hasDiplomaticRelation
    boolean hasDefensivePact(com.tyrfing.games.id17.houses.House) -> hasDefensivePact
    boolean hasTradeAgreement(com.tyrfing.games.id17.houses.House) -> hasTradeAgreement
    java.lang.String getAffectorString(int) -> getAffectorString
    gnu.trove.list.array.TIntArrayList getExploredHouses() -> getExploredHouses
    float getFertility() -> getFertility
    void startMarriage(com.tyrfing.games.id17.houses.House) -> startMarriage
    com.tyrfing.games.id17.technology.Technology getTechnology(int) -> getTechnology
    int getCountTechnologies() -> getCountTechnologies
    void research(com.tyrfing.games.id17.technology.Technology) -> research
    boolean isProtector(com.tyrfing.games.id17.houses.House) -> isProtector
    java.lang.String toString() -> toString
    boolean hasReputation(java.lang.String) -> hasReputation
    float getAccGrowth() -> getAccGrowth
    void setResearch(float) -> setResearch
com.tyrfing.games.id17.houses.House$1 -> com.tyrfing.games.id17.houses.House$1:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.houses.House this$0 -> this$0
    void apply() -> apply
    void unapply() -> unapply
com.tyrfing.games.id17.houses.HouseController -> com.tyrfing.games.id17.houses.HouseController:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.houses.House house -> house
    boolean hasJoined -> hasJoined
    int playerID -> playerID
    com.tyrlib2.util.Color DEFAULT_STRATEGIC_COLOR -> DEFAULT_STRATEGIC_COLOR
    void control(com.tyrfing.games.id17.houses.House) -> control
    com.tyrfing.games.id17.houses.House getHouse() -> getHouse
    void informMessage(com.tyrfing.games.id17.diplomacy.Message) -> informMessage
    void informNewHolding(com.tyrfing.games.id17.holdings.Holding) -> informNewHolding
    void informLostHolding(com.tyrfing.games.id17.holdings.Holding) -> informLostHolding
    void informWarStart(com.tyrfing.games.id17.war.War) -> informWarStart
    void informWarEnd(com.tyrfing.games.id17.war.War) -> informWarEnd
    void informAddAlly(com.tyrfing.games.id17.houses.House) -> informAddAlly
    void informRemoveAlly(com.tyrfing.games.id17.houses.House) -> informRemoveAlly
    void destroy() -> destroy
    void unmarkControlledHouse() -> unmarkControlledHouse
    void markControlledHouse() -> markControlledHouse
    com.tyrlib2.util.Color getStrategicColor() -> getStrategicColor
com.tyrfing.games.id17.houses.Loan -> com.tyrfing.games.id17.houses.Loan:
    long serialVersionUID -> serialVersionUID
    int YEARS -> YEARS
    float PAYBACK_FACTOR -> PAYBACK_FACTOR
    float SEASONAL_INTEREST -> SEASONAL_INTEREST
    int loanSize -> loanSize
    int payback -> payback
    int interest -> interest
    com.tyrfing.games.id17.houses.House giver -> giver
    com.tyrfing.games.id17.houses.House taker -> taker
    float endDate -> endDate
    boolean ended -> ended
    int getLoanSize(com.tyrfing.games.id17.houses.House) -> getLoanSize
    int getInterest(int) -> getInterest
    int getPayback(int) -> getPayback
    com.tyrfing.games.id17.houses.House getOther(com.tyrfing.games.id17.houses.House) -> getOther
com.tyrfing.games.id17.houses.StatModifier -> com.tyrfing.games.id17.houses.StatModifier:
    long serialVersionUID -> serialVersionUID
    int stat -> stat
    int affected -> affected
    int target -> target
    float duration -> duration
    float value -> value
    java.lang.String name -> name
    float timestampStart -> timestampStart
    boolean finished -> finished
    void apply() -> apply
    void unapply() -> unapply
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
com.tyrfing.games.id17.houses.TaxUnrest -> com.tyrfing.games.id17.houses.TaxUnrest:
    long serialVersionUID -> serialVersionUID
    java.lang.String HIGH_TAXES_HEADLINE -> HIGH_TAXES_HEADLINE
    java.lang.String HIGH_TAXES_TEXT -> HIGH_TAXES_TEXT
    float STRENGTH -> STRENGTH
    void comply(com.tyrfing.games.id17.houses.House) -> comply
    com.tyrfing.games.id17.holdings.UnrestSource copy() -> copy
com.tyrfing.games.id17.houses.VaryingStatModifier -> com.tyrfing.games.id17.houses.VaryingStatModifier:
    long serialVersionUID -> serialVersionUID
    float changeSpeed -> changeSpeed
    float limit -> limit
    void onUpdate(float) -> onUpdate
com.tyrfing.games.id17.houses.XMLHouseFactory -> com.tyrfing.games.id17.houses.a:
    org.xmlpull.v1.XmlPullParser parser -> b
    java.lang.String source -> c
    com.tyrfing.games.id17.houses.House house -> d
    com.tyrfing.games.id17.houses.HouseController controller -> e
    boolean added -> f
    short ID -> a
    com.tyrfing.games.id17.houses.House create() -> a
    void parseHouse() -> b
    void parseHoldingInformation() -> c
com.tyrfing.games.id17.houses.XMLHouseSetFactory -> com.tyrfing.games.id17.houses.b:
    org.xmlpull.v1.XmlPullParser parser -> a
    java.lang.String source -> b
    void create() -> a
com.tyrfing.games.id17.houses.reputation.Reputation -> com.tyrfing.games.id17.houses.reputation.Reputation:
    long serialVersionUID -> serialVersionUID
    int MAX_POINTS -> MAX_POINTS
    int MIN_POINTS -> MIN_POINTS
    java.lang.String name -> name
    int houseStatNeed -> houseStatNeed
    int houseStatAffect -> houseStatAffect
    float value -> value
    com.tyrfing.games.id17.houses.reputation.Reputation$ReputationType type -> type
    void onGain(com.tyrfing.games.id17.houses.House) -> onGain
    void OnLoss(com.tyrfing.games.id17.houses.House) -> OnLoss
    java.lang.String getTooltip(com.tyrfing.games.id17.houses.House) -> getTooltip
com.tyrfing.games.id17.houses.reputation.Reputation$ReputationType -> com.tyrfing.games.id17.houses.reputation.Reputation$ReputationType:
    com.tyrfing.games.id17.houses.reputation.Reputation$ReputationType GOOD -> GOOD
    com.tyrfing.games.id17.houses.reputation.Reputation$ReputationType NEUTRAL -> NEUTRAL
    com.tyrfing.games.id17.houses.reputation.Reputation$ReputationType BAD -> BAD
    com.tyrfing.games.id17.houses.reputation.Reputation$ReputationType[] ENUM$VALUES -> a
    com.tyrfing.games.id17.houses.reputation.Reputation$ReputationType[] values() -> values
    com.tyrfing.games.id17.houses.reputation.Reputation$ReputationType valueOf(java.lang.String) -> valueOf
com.tyrfing.games.id17.houses.reputation.ReputationSet -> com.tyrfing.games.id17.houses.reputation.a:
    com.tyrfing.games.id17.houses.reputation.Reputation[] reputations -> a
com.tyrfing.games.id17.intrigue.Intrigue -> com.tyrfing.games.id17.intrigue.a:
    java.util.List categories -> a
    java.util.List actions -> b
    com.tyrfing.games.id17.intrigue.Intrigue instance -> c
    com.tyrfing.games.id17.intrigue.Intrigue getInstance() -> a
    java.util.List getActions() -> b
com.tyrfing.games.id17.intrigue.IntrigueProject -> com.tyrfing.games.id17.intrigue.IntrigueProject:
    long serialVersionUID -> serialVersionUID
    java.util.List supporters -> supporters
    float points -> points
    float plotSpeed -> plotSpeed
    com.tyrfing.games.id17.intrigue.actions.IntrigueAction action -> action
    com.tyrfing.games.id17.houses.House sender -> sender
    com.tyrfing.games.id17.houses.House receiver -> receiver
    int[] options -> options
    float BASE_PLOT_POWER -> BASE_PLOT_POWER
    boolean finished -> finished
    boolean revealed -> revealed
    void addSupporter(com.tyrfing.games.id17.houses.House) -> addSupporter
    void removeSupporter(com.tyrfing.games.id17.houses.House) -> removeSupporter
    void acceptInvite(com.tyrfing.games.id17.houses.House) -> acceptInvite
    void rejectInvite(com.tyrfing.games.id17.houses.House) -> rejectInvite
    float getPoints() -> getPoints
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
    void abort(com.tyrfing.games.id17.houses.House) -> abort
    void execute() -> execute
    void reveal() -> reveal
    int getMaxPoints() -> getMaxPoints
    float getPlotSpeed() -> getPlotSpeed
    java.lang.String toString() -> toString
    int getEstimatedRemainingDays() -> getEstimatedRemainingDays
com.tyrfing.games.id17.intrigue.IntrigueStarter -> com.tyrfing.games.id17.intrigue.IntrigueStarter:
    long serialVersionUID -> serialVersionUID
    java.util.List projects -> projects
    void addProject(com.tyrfing.games.id17.intrigue.IntrigueProject) -> addProject
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
com.tyrfing.games.id17.intrigue.actions.Assassinate -> com.tyrfing.games.id17.intrigue.actions.Assassinate:
    long serialVersionUID -> serialVersionUID
    int MAX_POINTS -> MAX_POINTS
    com.tyrfing.games.id17.gui.mails.Mail getStartMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getStartMail
    com.tyrfing.games.id17.gui.mails.Mail getSuccessMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getSuccessMail
    com.tyrfing.games.id17.gui.mails.Mail getInviteMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getInviteMail
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[],java.util.List) -> execute
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    void setDisabledText(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> setDisabledText
    int getMaxPoints(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getMaxPoints
    java.lang.String toString(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> toString
    com.tyrfing.games.id17.gui.mails.Mail getInformMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getInformMail
    com.tyrfing.games.id17.gui.mails.HeaderedMail showInfo(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> showInfo
com.tyrfing.games.id17.intrigue.actions.Assassinate$1 -> com.tyrfing.games.id17.intrigue.actions.a:
    com.tyrfing.games.id17.intrigue.actions.Assassinate this$0 -> a
    com.tyrfing.games.id17.houses.House val$sender -> b
    com.tyrfing.games.id17.houses.House val$receiver -> c
    void createHeaderedContent(java.lang.String,java.lang.String,boolean,java.lang.String) -> a
    com.tyrfing.games.id17.intrigue.actions.Assassinate access$0(com.tyrfing.games.id17.intrigue.actions.Assassinate$1) -> a
com.tyrfing.games.id17.intrigue.actions.Assassinate$1$1 -> com.tyrfing.games.id17.intrigue.actions.b:
    com.tyrfing.games.id17.intrigue.actions.Assassinate$1 this$1 -> a
    com.tyrfing.games.id17.houses.House val$sender -> b
    com.tyrfing.games.id17.houses.House val$receiver -> c
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.intrigue.actions.CreateIncident -> com.tyrfing.games.id17.intrigue.actions.CreateIncident:
    long serialVersionUID -> serialVersionUID
    int MAX_POINTS -> MAX_POINTS
    int REASON_HONORABLE -> REASON_HONORABLE
    com.tyrfing.games.id17.gui.mails.Mail getStartMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getStartMail
    com.tyrfing.games.id17.gui.mails.Mail getSuccessMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getSuccessMail
    com.tyrfing.games.id17.gui.mails.Mail getInviteMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getInviteMail
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[],java.util.List) -> execute
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    int getMaxPoints(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getMaxPoints
    java.lang.String toString(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> toString
    com.tyrfing.games.id17.gui.mails.Mail getInformMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getInformMail
    com.tyrfing.games.id17.gui.mails.HeaderedMail showInfo(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> showInfo
    java.lang.String access$0(com.tyrfing.games.id17.intrigue.actions.CreateIncident) -> access$0
com.tyrfing.games.id17.intrigue.actions.CreateIncident$1 -> com.tyrfing.games.id17.intrigue.actions.c:
    int selection -> b
    int reason -> c
    com.tyrlib2.gui.Label text -> d
    com.tyrfing.games.id17.intrigue.actions.CreateIncident this$0 -> a
    com.tyrfing.games.id17.houses.House val$receiver -> e
    com.tyrfing.games.id17.houses.House val$sender -> ae
    void createHeaderedContent(java.lang.String,java.lang.String,boolean,java.lang.String) -> a
    int access$0(com.tyrfing.games.id17.intrigue.actions.CreateIncident$1) -> a
    com.tyrfing.games.id17.intrigue.actions.CreateIncident access$1(com.tyrfing.games.id17.intrigue.actions.CreateIncident$1) -> b
com.tyrfing.games.id17.intrigue.actions.CreateIncident$1$1 -> com.tyrfing.games.id17.intrigue.actions.d:
    com.tyrfing.games.id17.intrigue.actions.CreateIncident$1 this$1 -> a
    com.tyrfing.games.id17.houses.House val$sender -> b
    com.tyrfing.games.id17.houses.House val$receiver -> c
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.intrigue.actions.Destabilize -> com.tyrfing.games.id17.intrigue.actions.Destabilize:
    long serialVersionUID -> serialVersionUID
    int MAX_POINTS -> MAX_POINTS
    com.tyrfing.games.id17.gui.mails.Mail getStartMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getStartMail
    com.tyrfing.games.id17.gui.mails.Mail getSuccessMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getSuccessMail
    com.tyrfing.games.id17.gui.mails.Mail getInviteMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getInviteMail
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[],java.util.List) -> execute
    void setDisabledText(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> setDisabledText
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    int getMaxPoints(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getMaxPoints
    java.lang.String toString(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> toString
    com.tyrfing.games.id17.gui.mails.Mail getInformMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getInformMail
    com.tyrfing.games.id17.gui.mails.HeaderedMail showInfo(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> showInfo
com.tyrfing.games.id17.intrigue.actions.Destabilize$1 -> com.tyrfing.games.id17.intrigue.actions.e:
    com.tyrfing.games.id17.intrigue.actions.Destabilize this$0 -> a
    com.tyrfing.games.id17.houses.House val$sender -> b
    com.tyrfing.games.id17.houses.House val$receiver -> c
    void createHeaderedContent(java.lang.String,java.lang.String,boolean,java.lang.String) -> a
    com.tyrfing.games.id17.intrigue.actions.Destabilize access$0(com.tyrfing.games.id17.intrigue.actions.Destabilize$1) -> a
com.tyrfing.games.id17.intrigue.actions.Destabilize$1$1 -> com.tyrfing.games.id17.intrigue.actions.f:
    com.tyrfing.games.id17.intrigue.actions.Destabilize$1 this$1 -> a
    com.tyrfing.games.id17.houses.House val$sender -> b
    com.tyrfing.games.id17.houses.House val$receiver -> c
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.intrigue.actions.Destabilize$2 -> com.tyrfing.games.id17.intrigue.actions.Destabilize$2:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.intrigue.actions.Destabilize this$0 -> this$0
    void apply() -> apply
    void unapply() -> unapply
com.tyrfing.games.id17.intrigue.actions.FabricateClaim -> com.tyrfing.games.id17.intrigue.actions.FabricateClaim:
    long serialVersionUID -> serialVersionUID
    int MAX_POINTS_BARONY -> MAX_POINTS_BARONY
    int MAX_POINTS_HOLDING -> MAX_POINTS_HOLDING
    java.lang.String MSG -> MSG
    int getMaxPoints(com.tyrfing.games.id17.holdings.Holding) -> getMaxPoints
    com.tyrfing.games.id17.gui.mails.Mail getStartMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getStartMail
    com.tyrfing.games.id17.gui.mails.Mail getSuccessMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getSuccessMail
    com.tyrfing.games.id17.gui.mails.Mail getInviteMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getInviteMail
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[],java.util.List) -> execute
    void setDisabledText(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> setDisabledText
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    int getMaxPoints(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getMaxPoints
    java.lang.String toString(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> toString
    void onUpdate(com.tyrfing.games.id17.intrigue.IntrigueProject) -> onUpdate
    com.tyrfing.games.id17.gui.mails.Mail getInformMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getInformMail
    com.tyrfing.games.id17.gui.mails.HeaderedMail showInfo(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> showInfo
    java.lang.String access$0(com.tyrfing.games.id17.intrigue.actions.FabricateClaim) -> access$0
com.tyrfing.games.id17.intrigue.actions.FabricateClaim$1 -> com.tyrfing.games.id17.intrigue.actions.g:
    int selection -> b
    com.tyrlib2.gui.Label text -> c
    com.tyrfing.games.id17.intrigue.actions.FabricateClaim this$0 -> a
    com.tyrfing.games.id17.houses.House val$receiver -> d
    com.tyrfing.games.id17.houses.House val$sender -> e
    void createHeaderedContent(java.lang.String,java.lang.String,boolean,java.lang.String) -> a
    void selectRight(int) -> a
    void onAccept() -> a_
com.tyrfing.games.id17.intrigue.actions.IncidentUnrest -> com.tyrfing.games.id17.intrigue.actions.IncidentUnrest:
    long serialVersionUID -> serialVersionUID
    java.lang.String HEADLINE -> HEADLINE
    java.lang.String TEXT -> TEXT
    com.tyrfing.games.id17.holdings.Holding holding -> holding
    com.tyrfing.games.id17.houses.House preferredRuler -> preferredRuler
    void comply(com.tyrfing.games.id17.houses.House) -> comply
    com.tyrfing.games.id17.holdings.UnrestSource copy() -> copy
com.tyrfing.games.id17.intrigue.actions.Infiltrate -> com.tyrfing.games.id17.intrigue.actions.Infiltrate:
    long serialVersionUID -> serialVersionUID
    com.tyrlib2.gui.ScaledVector2 MALE_POS -> MALE_POS
    com.tyrlib2.gui.ScaledVector2 FEMALE_POS -> FEMALE_POS
    int MAX_POINTS -> MAX_POINTS
    com.tyrfing.games.id17.gui.mails.Mail getStartMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getStartMail
    com.tyrfing.games.id17.gui.mails.Mail getSuccessMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getSuccessMail
    com.tyrfing.games.id17.gui.mails.Mail getInviteMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getInviteMail
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[],java.util.List) -> execute
    void setDisabledText(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> setDisabledText
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    int getMaxPoints(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getMaxPoints
    java.lang.String toString(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> toString
    com.tyrfing.games.id17.gui.mails.Mail getInformMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getInformMail
    com.tyrfing.games.id17.gui.mails.HeaderedMail showInfo(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> showInfo
com.tyrfing.games.id17.intrigue.actions.Infiltrate$1 -> com.tyrfing.games.id17.intrigue.actions.h:
    com.tyrfing.games.id17.intrigue.actions.Infiltrate this$0 -> a
    com.tyrfing.games.id17.houses.House val$sender -> b
    com.tyrfing.games.id17.houses.House val$receiver -> c
    void createHeaderedContent(java.lang.String,java.lang.String,boolean,java.lang.String) -> a
    com.tyrfing.games.id17.intrigue.actions.Infiltrate access$0(com.tyrfing.games.id17.intrigue.actions.Infiltrate$1) -> a
com.tyrfing.games.id17.intrigue.actions.Infiltrate$1$1 -> com.tyrfing.games.id17.intrigue.actions.i:
    com.tyrfing.games.id17.intrigue.actions.Infiltrate$1 this$1 -> a
    com.tyrfing.games.id17.houses.House val$sender -> b
    com.tyrfing.games.id17.houses.House val$receiver -> c
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.intrigue.actions.Infiltrate$1$2 -> com.tyrfing.games.id17.intrigue.actions.j:
    com.tyrfing.games.id17.intrigue.actions.Infiltrate$1 this$1 -> a
    com.tyrfing.games.id17.houses.House val$sender -> b
    com.tyrfing.games.id17.houses.House val$receiver -> c
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.intrigue.actions.IntrigueAction -> com.tyrfing.games.id17.intrigue.actions.IntrigueAction:
    long serialVersionUID -> serialVersionUID
    void selectedByUser(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> selectedByUser
    void startProject(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> startProject
    void startProjectNoNetwork(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> startProjectNoNetwork
    com.tyrfing.games.id17.gui.mails.Mail getStartMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getStartMail
    com.tyrfing.games.id17.gui.mails.Mail getSuccessMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getSuccessMail
    com.tyrfing.games.id17.gui.mails.Mail getInformMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getInformMail
    com.tyrfing.games.id17.gui.mails.Mail getInviteMail(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getInviteMail
    void execute(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[],java.util.List) -> execute
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> isEnabled
    java.lang.String toString(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> toString
    int getMaxPoints(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> getMaxPoints
    void onUpdate(com.tyrfing.games.id17.intrigue.IntrigueProject) -> onUpdate
    com.tyrfing.games.id17.gui.mails.HeaderedMail showInfo(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,int[]) -> showInfo
com.tyrfing.games.id17.intrigue.category.EspionageCategory -> com.tyrfing.games.id17.intrigue.a.a:
    void addAction(com.tyrfing.games.id17.intrigue.actions.IntrigueAction) -> a
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.intrigue.category.HoldingsCategory -> com.tyrfing.games.id17.intrigue.a.b:
    void addAction(com.tyrfing.games.id17.intrigue.actions.IntrigueAction) -> a
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.intrigue.category.RevoltsCategory -> com.tyrfing.games.id17.intrigue.a.c:
    void addAction(com.tyrfing.games.id17.intrigue.actions.IntrigueAction) -> a
    boolean isEnabled(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.laws.ArmyCategory -> com.tyrfing.games.id17.c.a:
com.tyrfing.games.id17.laws.EconomyCategory -> com.tyrfing.games.id17.c.b:
    com.tyrfing.games.id17.holdings.UnrestSource[] HIGH_TAXES -> a
    float revolRiskTaxesPop(int) -> a
com.tyrfing.games.id17.laws.Law -> com.tyrfing.games.id17.c.c:
    int COUNT_LAWS -> a
    int[] stats -> b
    java.lang.String name -> c
    com.tyrfing.games.id17.laws.LawOption[] options -> d
    int defaultOption -> e
    int ID -> f
    java.lang.String desc -> g
    boolean needsAcknowledgement -> h
    void selectOption(int,com.tyrfing.games.id17.houses.House) -> a
com.tyrfing.games.id17.laws.LawCategory -> com.tyrfing.games.id17.c.d:
    com.tyrfing.games.id17.laws.Law[] laws -> b
    java.lang.String name -> c
com.tyrfing.games.id17.laws.LawOption -> com.tyrfing.games.id17.c.e:
    java.lang.String optionName -> a
    float[] values -> b
    com.tyrfing.games.id17.laws.Law law -> c
    int ID -> d
    java.lang.String tooltip -> e
    boolean isTyrannical -> f
    void select(com.tyrfing.games.id17.houses.House) -> a
    void unselect(com.tyrfing.games.id17.houses.House) -> b
com.tyrfing.games.id17.laws.LawSet -> com.tyrfing.games.id17.c.f:
    com.tyrfing.games.id17.laws.LawCategory[] categories -> a
    void init() -> a
    com.tyrfing.games.id17.laws.Law getLaw(int) -> a
com.tyrfing.games.id17.laws.VasallCategory -> com.tyrfing.games.id17.c.g:
com.tyrfing.games.id17.networking.AddVisibleBarony -> com.tyrfing.games.id17.networking.AddVisibleBarony:
    long serialVersionUID -> serialVersionUID
    short houseID -> houseID
    short baronyID -> baronyID
    boolean discovery -> discovery
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.BattleResult -> com.tyrfing.games.id17.networking.BattleResult:
    long serialVersionUID -> serialVersionUID
    short winner -> winner
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.Build -> com.tyrfing.games.id17.networking.Build:
    long serialVersionUID -> serialVersionUID
    byte type -> type
    short holdingID -> holdingID
    short days -> days
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.ChangeHoldingOwner -> com.tyrfing.games.id17.networking.ChangeHoldingOwner:
    long serialVersionUID -> serialVersionUID
    short holdingID -> holdingID
    short targetID -> targetID
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.ChangeLaw -> com.tyrfing.games.id17.networking.ChangeLaw:
    long serialVersionUID -> serialVersionUID
    short houseID -> houseID
    byte lawID -> lawID
    byte optionID -> optionID
    java.lang.String toString() -> toString
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.ChangeStatModifier -> com.tyrfing.games.id17.networking.ChangeStatModifier:
    long serialVersionUID -> serialVersionUID
com.tyrfing.games.id17.networking.ChooseHouse -> com.tyrfing.games.id17.networking.ChooseHouse:
    long serialVersionUID -> serialVersionUID
    int houseID -> houseID
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.DisplayedArmyStats -> com.tyrfing.games.id17.networking.DisplayedArmyStats:
    long serialVersionUID -> serialVersionUID
    float[] reinf -> reinf
    float ownerHonor -> ownerHonor
    float ownerGold -> ownerGold
    int maint -> maint
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.DisplayedHoldingStats -> com.tyrfing.games.id17.networking.DisplayedHoldingStats:
    long serialVersionUID -> serialVersionUID
    float[] population -> population
    short supplies -> supplies
    float growth -> growth
    float baseSupplies -> baseSupplies
    float tradeSupplies -> tradeSupplies
    float hunger -> hunger
    float taxes -> taxes
    float maint -> maint
    float trade -> trade
    float income -> income
    float incomeMult -> incomeMult
    float research -> research
    float researchMult -> researchMult
    float researchBuildings -> researchBuildings
    float researchPop -> researchPop
    float prod -> prod
    float prodBuildings -> prodBuildings
    float prodPop -> prodPop
    float prodTrade -> prodTrade
    float revoltRisk -> revoltRisk
    float troopRevoltStop -> troopRevoltStop
    float totalWander -> totalWander
    gnu.trove.map.hash.TIntFloatHashMap demands -> demands
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.DisplayedHouseStats -> com.tyrfing.games.id17.networking.DisplayedHouseStats:
    long serialVersionUID -> serialVersionUID
    short id -> id
    float gold -> gold
    float income -> income
    float tradeIncome -> tradeIncome
    float mercCosts -> mercCosts
    float taxIncome -> taxIncome
    float vassalIncome -> vassalIncome
    float fertility -> fertility
    float accGrowth -> accGrowth
    float research -> research
    float armyMaint -> armyMaint
    int interest -> interest
    short honor -> honor
    byte males -> males
    byte females -> females
    float[] opinions -> opinions
    float favor -> favor
    float[] stats -> stats
    float[] modifierValues -> modifierValues
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.DisplayedLawStats -> com.tyrfing.games.id17.networking.DisplayedLawStats:
    long serialVersionUID -> serialVersionUID
    boolean canPassLaws -> canPassLaws
    byte[] lawSettings -> lawSettings
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.DisplayedTechStats -> com.tyrfing.games.id17.networking.DisplayedTechStats:
    long serialVersionUID -> serialVersionUID
    float progress -> progress
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.EndWar -> com.tyrfing.games.id17.networking.EndWar:
    long serialVersionUID -> serialVersionUID
    short warID -> warID
    short houseID -> houseID
    void process(com.tyrlib2.networking.Connection) -> process
    java.lang.String toString() -> toString
com.tyrfing.games.id17.networking.HoldingState -> com.tyrfing.games.id17.networking.HoldingState:
    long serialVersionUID -> serialVersionUID
    short holdingID -> holdingID
    short houseID -> houseID
    float pillagedTimestamp -> pillagedTimestamp
    byte[] buildings -> buildings
    byte guildType -> guildType
    short guildTarget -> guildTarget
    short occupied -> occupied
    int[] troops -> troops
    byte[] types -> types
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.HouseStatChange -> com.tyrfing.games.id17.networking.HouseStatChange:
    long serialVersionUID -> serialVersionUID
    byte ADD -> ADD
    byte REMOVE -> REMOVE
    byte ADD_VARYING -> ADD_VARYING
    byte action -> action
    java.lang.String name -> name
    byte stat -> stat
    float value -> value
    float timestampStart -> timestampStart
    float duration -> duration
    short houseAffectedID -> houseAffectedID
    short houseTargetID -> houseTargetID
    float changeSpeed -> changeSpeed
    float limit -> limit
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.HouseState -> com.tyrfing.games.id17.networking.HouseState:
    long serialVersionUID -> serialVersionUID
    short houseID -> houseID
    short overlordID -> overlordID
    short intrigueTarget -> intrigueTarget
    byte intrigueID -> intrigueID
    int[] intrigueOptions -> intrigueOptions
    boolean[] researched -> researched
    boolean[] discovered -> discovered
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.JoinGame -> com.tyrfing.games.id17.networking.JoinGame:
    long serialVersionUID -> serialVersionUID
    int houseID -> houseID
    int playerID -> playerID
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.JoinIntrigue -> com.tyrfing.games.id17.networking.JoinIntrigue:
    long serialVersionUID -> serialVersionUID
    short supporterID -> supporterID
    short supportedID -> supportedID
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.LevyAction -> com.tyrfing.games.id17.networking.LevyAction:
    long serialVersionUID -> serialVersionUID
    byte RAISE -> RAISE
    byte UNRAISE -> UNRAISE
    byte MOVETO -> MOVETO
    byte ARRIVE -> ARRIVE
    byte PILLAGE -> PILLAGE
    byte KILL -> KILL
    byte DESTROY -> DESTROY
    byte CHANGE_FORMATION -> CHANGE_FORMATION
    byte TRANSFER -> TRANSFER
    byte STOP -> STOP
    byte RETREATTO -> RETREATTO
    short levyID -> levyID
    byte actionID -> actionID
    short param -> param
    java.lang.String toString() -> toString
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.LevyState -> com.tyrfing.games.id17.networking.LevyState:
    long serialVersionUID -> serialVersionUID
    short[] holdingIDs -> holdingIDs
    boolean[] raised -> raised
    short[] movingTo -> movingTo
    byte[] unitType -> unitType
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.LoanChange -> com.tyrfing.games.id17.networking.LoanChange:
    long serialVersionUID -> serialVersionUID
    byte ADD -> ADD
    byte REMOVE -> REMOVE
    short giverID -> giverID
    short takerID -> takerID
    int loanSize -> loanSize
    float endDate -> endDate
    byte action -> action
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.MapInfo -> com.tyrfing.games.id17.networking.MapInfo:
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
com.tyrfing.games.id17.networking.NetworkAction -> com.tyrfing.games.id17.networking.NetworkAction:
    long serialVersionUID -> serialVersionUID
    int DIPLO_ID -> DIPLO_ID
    int INTRIGUE_ID -> INTRIGUE_ID
    int INTRIGUE_EXECUTE_ID -> INTRIGUE_EXECUTE_ID
    int type -> type
    int id -> id
    int senderID -> senderID
    int receiverID -> receiverID
    int[] options -> options
    int response -> response
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.NetworkController -> com.tyrfing.games.id17.networking.NetworkController:
    long serialVersionUID -> serialVersionUID
    com.tyrlib2.networking.Network network -> network
    byte displayRequest -> displayRequest
    short displayParam -> displayParam
    com.tyrlib2.networking.Connection connection -> connection
    void informMessage(com.tyrfing.games.id17.diplomacy.Message) -> informMessage
    void informNewHolding(com.tyrfing.games.id17.holdings.Holding) -> informNewHolding
    void informLostHolding(com.tyrfing.games.id17.holdings.Holding) -> informLostHolding
    void destroy() -> destroy
    com.tyrlib2.networking.Connection getConnection() -> getConnection
    com.tyrlib2.util.Color getStrategicColor() -> getStrategicColor
com.tyrfing.games.id17.networking.NetworkMessage -> com.tyrfing.games.id17.networking.NetworkMessage:
    long serialVersionUID -> serialVersionUID
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.NewConnection -> com.tyrfing.games.id17.networking.NewConnection:
    long serialVersionUID -> serialVersionUID
    short houseID -> houseID
    byte playerID -> playerID
    boolean randomJoin -> randomJoin
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.NewPlayer -> com.tyrfing.games.id17.networking.NewPlayer:
    long serialVersionUID -> serialVersionUID
    int houseID -> houseID
    int playerID -> playerID
    boolean hasJoined -> hasJoined
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.NewWar -> com.tyrfing.games.id17.networking.NewWar:
    long serialVersionUID -> serialVersionUID
    short goalHolding -> goalHolding
    short forHouse -> forHouse
    byte warMode -> warMode
    float totalProgress -> totalProgress
    float occupyProgress -> occupyProgress
    float battleProgress -> battleProgress
    float pillageProgress -> pillageProgress
    short[] attackers -> attackers
    short[] defenders -> defenders
    short[] occupied -> occupied
    java.lang.String toString() -> toString
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.PlayerQuit -> com.tyrfing.games.id17.networking.PlayerQuit:
    long serialVersionUID -> serialVersionUID
    int playerID -> playerID
com.tyrfing.games.id17.networking.ProjectCompleted -> com.tyrfing.games.id17.networking.ProjectCompleted:
    long serialVersionUID -> serialVersionUID
    short holdingID -> holdingID
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.RequestDisplayData -> com.tyrfing.games.id17.networking.RequestDisplayData:
    long serialVersionUID -> serialVersionUID
    byte NONE -> NONE
    byte HOLDING_DATA -> HOLDING_DATA
    byte TECH_DATA -> TECH_DATA
    byte HOUSE_DATA -> HOUSE_DATA
    byte LAW_STATS -> LAW_STATS
    byte ARMY_STATS -> ARMY_STATS
    byte type -> type
    short param -> param
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.RequestWorld -> com.tyrfing.games.id17.networking.RequestWorld:
    long serialVersionUID -> serialVersionUID
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.Revolt -> com.tyrfing.games.id17.networking.Revolt:
    long serialVersionUID -> serialVersionUID
    int revoltees -> revoltees
    short houseID -> houseID
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.TechnologyEvent -> com.tyrfing.games.id17.networking.TechnologyEvent:
    long serialVersionUID -> serialVersionUID
    byte techID -> techID
    short houseID -> houseID
    short fromHouseID -> fromHouseID
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.UnrestSourceChange -> com.tyrfing.games.id17.networking.UnrestSourceChange:
    long serialVersionUID -> serialVersionUID
    byte ADD -> ADD
    byte REMOVE -> REMOVE
    byte CLEAR -> CLEAR
    com.tyrfing.games.id17.holdings.UnrestSource unrest -> unrest
    byte action -> action
    short holdingID -> holdingID
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.UpgradeRegiment -> com.tyrfing.games.id17.networking.UpgradeRegiment:
    long serialVersionUID -> serialVersionUID
    short holdingID -> holdingID
    byte regimentID -> regimentID
    byte unitType -> unitType
    boolean levy -> levy
    void process(com.tyrlib2.networking.Connection) -> process
com.tyrfing.games.id17.networking.WorldState -> com.tyrfing.games.id17.networking.WorldState:
    long serialVersionUID -> serialVersionUID
    float timeStamp -> timeStamp
    float gold -> gold
    float honor -> honor
    float taxIncome -> taxIncome
    float tradeIncome -> tradeIncome
    float armyMaint -> armyMaint
    float holdingMaint -> holdingMaint
    int males -> males
    int females -> females
    int countMarriages -> countMarriages
    short visibleProjectCount -> visibleProjectCount
    float[] projectProgress -> projectProgress
    short[] projectHolding -> projectHolding
    float[] moral -> moral
    float[][] troops -> troops
    short[] points -> points
    float[] income -> income
    void process(com.tyrlib2.networking.Connection) -> process
    java.lang.String toString() -> toString
com.tyrfing.games.id17.save.WorldFactoryFromFile -> com.tyrfing.games.id17.d.a:
    void init() -> a
    void fillObjectType(int) -> a
    void initWorldMap() -> b
    void fillInRenderables() -> c
    void setupWiki() -> d
com.tyrfing.games.id17.save.WorldFactoryFromFile$1 -> com.tyrfing.games.id17.d.b:
    int holdingFocus -> a
    com.tyrfing.games.id17.save.WorldFactoryFromFile this$0 -> b
    java.lang.String val$holdingType -> c
    void onCall() -> a
    com.tyrfing.games.id17.holdings.Holding nextHolding() -> b
com.tyrfing.games.id17.save.WorldFactoryFromFile$2 -> com.tyrfing.games.id17.d.c:
    com.tyrfing.games.id17.save.WorldFactoryFromFile this$0 -> a
    com.tyrfing.games.id17.holdings.Holding val$holding -> b
    void onCall() -> a
com.tyrfing.games.id17.save.WorldFactoryMapFile -> com.tyrfing.games.id17.d.d:
    java.lang.String mapName -> a
    com.tyrfing.games.id17.world.World create() -> e
com.tyrfing.games.id17.save.WorldFactoryMapFile$1 -> com.tyrfing.games.id17.d.e:
    com.tyrfing.games.id17.save.WorldFactoryMapFile this$0 -> a
    com.tyrfing.games.id17.houses.House val$house -> b
    void onCall() -> a
com.tyrfing.games.id17.save.WorldFactorySaveFile -> com.tyrfing.games.id17.d.f:
    java.lang.String saveName -> a
    com.tyrfing.games.id17.world.World create() -> e
com.tyrfing.games.id17.save.WorldFactorySaveFile$1 -> com.tyrfing.games.id17.d.g:
    com.tyrfing.games.id17.save.WorldFactorySaveFile this$0 -> a
    com.tyrfing.games.id17.houses.House val$house -> b
    void onCall() -> a
com.tyrfing.games.id17.startmenu.GameEntry -> com.tyrfing.games.id17.startmenu.a:
    boolean click -> g
    com.tyrlib2.math.Vector2 clickPoint -> h
    com.tyrlib2.graphics.renderables.Rectangle2 rect -> a
    com.tyrlib2.util.Color NORMAL -> b
    com.tyrlib2.util.Color HIGHLIGHT -> c
    com.tyrlib2.gui.ScaledVector1 SIZE_Y -> d
    com.tyrlib2.gui.ScaledVector2 NAME_POS -> e
    float alpha -> i
    boolean enabled -> j
    boolean activated -> f
    com.tyrlib2.gui.Label nameLabel -> k
    com.tyrlib2.gui.Label playersLabel -> l
    int id -> m
    com.tyrfing.games.id17.startmenu.MatchMakerUI ui -> n
    java.lang.String address -> p
    float getAlpha() -> b
    void setAlpha(float) -> a
    void onClick() -> d
    void unhighlight() -> n_
    void highlight() -> o_
    int getID() -> g
    void setCountPlayers(int,int) -> a
    java.lang.String getAddress() -> h
    boolean access$0(com.tyrfing.games.id17.startmenu.GameEntry) -> a
    void access$1(com.tyrfing.games.id17.startmenu.GameEntry,boolean) -> a
    boolean access$2(com.tyrfing.games.id17.startmenu.GameEntry) -> b
    void access$3(com.tyrfing.games.id17.startmenu.GameEntry,com.tyrlib2.math.Vector2) -> a
    com.tyrlib2.math.Vector2 access$4(com.tyrfing.games.id17.startmenu.GameEntry) -> c
com.tyrfing.games.id17.startmenu.GameEntry$1 -> com.tyrfing.games.id17.startmenu.b:
    com.tyrfing.games.id17.startmenu.GameEntry this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.startmenu.GameEntry$2 -> com.tyrfing.games.id17.startmenu.c:
    com.tyrfing.games.id17.startmenu.GameEntry this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.startmenu.GameEntry$3 -> com.tyrfing.games.id17.startmenu.d:
    com.tyrfing.games.id17.startmenu.GameEntry this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.startmenu.GameEntry$4 -> com.tyrfing.games.id17.startmenu.e:
    com.tyrfing.games.id17.startmenu.GameEntry this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.startmenu.HostedGameUpdate -> com.tyrfing.games.id17.startmenu.HostedGameUpdate:
    long serialVersionUID -> serialVersionUID
    int players -> players
    int maxPlayers -> maxPlayers
    int port -> port
com.tyrfing.games.id17.startmenu.IPField -> com.tyrfing.games.id17.startmenu.f:
    com.tyrlib2.gui.Label ip -> b
    java.lang.String text -> c
    boolean flip -> d
    boolean destroyed -> a
    float passedTime -> e
    boolean active -> f
    void build(com.tyrlib2.gui.Window) -> a
    void onSurfaceCreated() -> onSurfaceCreated
    void onSurfaceChanged() -> onSurfaceChanged
    void onFrameRendered(float) -> onFrameRendered
    boolean onPress(com.tyrlib2.input.IKeyboardEvent) -> a
    void destroy() -> a
    boolean onRelease(com.tyrlib2.input.IKeyboardEvent) -> b
    java.lang.String getAddress() -> b
    void activate() -> c
com.tyrfing.games.id17.startmenu.MatchMakerUI -> com.tyrfing.games.id17.startmenu.g:
    com.tyrlib2.math.Vector2 POS -> a
    com.tyrlib2.math.Vector2 SIZE -> b
    com.tyrlib2.math.Vector2 GAME_LIST_POS -> c
    com.tyrlib2.math.Vector2 GAME_LIST_SIZE -> d
    com.tyrlib2.math.Vector2 IP_FIELD_POS -> e
    com.tyrlib2.gui.ScaledVector2 IP_FIELD_SIZE -> f
    com.tyrlib2.gui.ScaledVector2 OK_BUTTON_POS -> g
    com.tyrlib2.gui.ScaledVector2 OK_BUTTON_SIZE -> h
    com.tyrlib2.gui.ScaledVector2 NAME_POS -> i
    com.tyrlib2.gui.ScaledVector2 GAME_POS -> j
    com.tyrlib2.gui.Frame frame -> k
    com.tyrlib2.gui.ItemList games -> l
    com.tyrlib2.gui.Frame gameFrame -> m
    com.tyrlib2.gui.ImageBox okButton -> n
    com.tyrlib2.gui.Frame ipFrame -> o
    com.tyrfing.games.id17.startmenu.IPField ipField -> p
    com.tyrlib2.gui.Label gameName -> q
    com.tyrlib2.gui.Label gamePlayers -> r
    boolean visible -> s
    com.tyrfing.games.id17.startmenu.GameEntry selected -> t
    void show() -> a
    void hide() -> b
    boolean isVisible() -> c
    void onNewConnection(com.tyrlib2.networking.Connection) -> onNewConnection
    void onConnectionLost(com.tyrlib2.networking.Connection) -> onConnectionLost
    void onReceivedData(com.tyrlib2.networking.Connection,java.lang.Object) -> onReceivedData
    void setSelected(com.tyrfing.games.id17.startmenu.GameEntry) -> a
    void deselectAll() -> d
    void join(java.lang.String) -> a
    com.tyrfing.games.id17.startmenu.IPField access$0(com.tyrfing.games.id17.startmenu.MatchMakerUI) -> a
    com.tyrfing.games.id17.startmenu.GameEntry access$1(com.tyrfing.games.id17.startmenu.MatchMakerUI) -> b
    com.tyrlib2.gui.ItemList access$2(com.tyrfing.games.id17.startmenu.MatchMakerUI) -> c
    boolean access$3(com.tyrfing.games.id17.startmenu.MatchMakerUI) -> d
com.tyrfing.games.id17.startmenu.MatchMakerUI$1 -> com.tyrfing.games.id17.startmenu.h:
    com.tyrfing.games.id17.startmenu.MatchMakerUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.startmenu.MatchMakerUI$2 -> com.tyrfing.games.id17.startmenu.i:
    com.tyrfing.games.id17.startmenu.MatchMakerUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.startmenu.MatchMakerUI$3 -> com.tyrfing.games.id17.startmenu.j:
    com.tyrfing.games.id17.startmenu.MatchMakerUI this$0 -> a
    com.tyrlib2.gui.Label val$caption -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.startmenu.MatchMakerUI$4 -> com.tyrfing.games.id17.startmenu.k:
    com.tyrfing.games.id17.startmenu.MatchMakerUI this$0 -> a
    com.tyrlib2.gui.Label val$caption -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.startmenu.MatchMakerUI$5 -> com.tyrfing.games.id17.startmenu.l:
    com.tyrfing.games.id17.startmenu.MatchMakerUI this$0 -> a
    com.tyrfing.games.id17.startmenu.PlayerUpdate val$u -> b
    com.tyrfing.games.id17.startmenu.MatchMakerUI val$ui -> c
    void run() -> run
com.tyrfing.games.id17.startmenu.Menu -> com.tyrfing.games.id17.startmenu.m:
    com.tyrlib2.gui.ScaledVector2 OPTION_SIZE -> a
    com.tyrlib2.math.Vector2 BASE_POS -> b
    com.tyrlib2.gui.ScaledVector2 OFFSET -> c
    java.util.List subMenus -> d
    com.tyrfing.games.id17.startmenu.MatchMakerUI matchmaker -> e
    com.tyrfing.games.id17.startmenu.NewGameUI newGameUI -> f
    com.tyrlib2.networking.Network matchmakerNetwork -> g
    void hostGame(java.lang.String) -> a
    void hide() -> a
    void connectToMatchmaker() -> b
    com.tyrfing.games.id17.startmenu.NewGameUI access$0(com.tyrfing.games.id17.startmenu.Menu) -> a
    com.tyrfing.games.id17.startmenu.MatchMakerUI access$1(com.tyrfing.games.id17.startmenu.Menu) -> b
    com.tyrlib2.networking.Network access$2(com.tyrfing.games.id17.startmenu.Menu) -> c
com.tyrfing.games.id17.startmenu.Menu$1 -> com.tyrfing.games.id17.startmenu.n:
    com.tyrfing.games.id17.startmenu.Menu this$0 -> a
    com.tyrlib2.gui.ImageBox val$option1 -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.startmenu.Menu$2 -> com.tyrfing.games.id17.startmenu.o:
    com.tyrfing.games.id17.startmenu.Menu this$0 -> a
    com.tyrlib2.gui.ImageBox val$option2 -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.startmenu.Menu$3 -> com.tyrfing.games.id17.startmenu.p:
    com.tyrfing.games.id17.startmenu.Menu this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.startmenu.Menu$4 -> com.tyrfing.games.id17.startmenu.q:
    com.tyrfing.games.id17.startmenu.Menu this$0 -> a
    com.tyrlib2.gui.Label val$cap -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.startmenu.Menu$5 -> com.tyrfing.games.id17.startmenu.r:
    com.tyrfing.games.id17.startmenu.Menu this$0 -> a
    com.tyrlib2.gui.Label val$cap -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.startmenu.Menu$6 -> com.tyrfing.games.id17.startmenu.s:
    com.tyrfing.games.id17.startmenu.Menu this$0 -> a
    void run() -> run
com.tyrfing.games.id17.startmenu.NewGameUI -> com.tyrfing.games.id17.startmenu.t:
    com.tyrlib2.math.Vector2 MAIN_WINDOW_POS -> a
    com.tyrlib2.math.Vector2 MAIN_WINDOW_SIZE -> b
    java.lang.String[] MAPS -> c
    java.lang.String[] MAP_SIZE_OPTIONS -> d
    java.lang.String[] RANDOM_JOIN_OPTIONS -> e
    java.lang.String[] ALLOW_JOINS_OPTIONS -> f
    com.tyrlib2.gui.ScaledVector1 HEADER_OFFSET -> g
    com.tyrlib2.gui.ScaledVector1 OPTION_OFFSET -> h
    com.tyrlib2.gui.ScaledVector2 MAP_SIZE_OPTIONS_HEADER_POS -> i
    com.tyrlib2.gui.ScaledVector2 GAME_SPEED_OPTIONS_HEADER_POS -> j
    com.tyrlib2.gui.ScaledVector2 ALLOW_JOINS_OPTIONS_HEADER_POS -> k
    com.tyrlib2.gui.ScaledVector2 OPTION_SIZE -> l
    com.tyrlib2.gui.ScaledVector2 ACCEPT_SIZE -> m
    com.tyrlib2.gui.ImageBox[] sizeOptions -> o
    com.tyrlib2.gui.ImageBox[] randomOptions -> p
    com.tyrlib2.gui.ImageBox[] allowJoinsOptions -> q
    com.tyrlib2.gui.ImageBox selectedSizeOption -> r
    com.tyrlib2.gui.ImageBox selectedSpeedOption -> s
    com.tyrlib2.gui.ImageBox selectedAllowJoinOption -> t
    int selectedSize -> u
    int selectedRandomJoin -> v
    int selectedAllowJoins -> w
    com.tyrfing.games.id17.gui.PaperButton accept -> x
    com.tyrlib2.gui.Label allowJoins -> y
    com.tyrlib2.gui.Window main -> n
    boolean allowJoinsEnabled -> z
    void disableAllowJoins() -> d
    void enableAllowJoins() -> e
    void show() -> a
    void hide() -> b
    void optionsReceiveTouchEvents(boolean,com.tyrlib2.gui.ImageBox[]) -> a
    void selectMapSize(int) -> a
    void selectRandomJoin(int) -> b
    void selectAllowJoins(int) -> c
    void hostGame() -> c
    void onNewConnection(com.tyrlib2.networking.Connection) -> onNewConnection
    void onConnectionLost(com.tyrlib2.networking.Connection) -> onConnectionLost
    void onReceivedData(com.tyrlib2.networking.Connection,java.lang.Object) -> onReceivedData
com.tyrfing.games.id17.startmenu.NewGameUI$1 -> com.tyrfing.games.id17.startmenu.u:
    com.tyrfing.games.id17.startmenu.NewGameUI this$0 -> a
    int val$optionID -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.startmenu.NewGameUI$2 -> com.tyrfing.games.id17.startmenu.v:
    com.tyrfing.games.id17.startmenu.NewGameUI this$0 -> a
    int val$optionID -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.startmenu.NewGameUI$3 -> com.tyrfing.games.id17.startmenu.w:
    com.tyrfing.games.id17.startmenu.NewGameUI this$0 -> a
    int val$optionID -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.startmenu.NewGameUI$4 -> com.tyrfing.games.id17.startmenu.x:
    com.tyrfing.games.id17.startmenu.NewGameUI this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrfing.games.id17.startmenu.PlayerUpdate -> com.tyrfing.games.id17.startmenu.PlayerUpdate:
    long serialVersionUID -> serialVersionUID
    int[] current -> current
    int[] max -> max
    int[] id -> id
    java.lang.String[] address -> address
    java.lang.String toString() -> toString
com.tyrfing.games.id17.technology.Technology -> com.tyrfing.games.id17.technology.Technology:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.technology.Technology[] pre -> pre
    int scienceMax -> scienceMax
    int funds -> funds
    int ID -> ID
    java.lang.String name -> name
    java.lang.String researchDesc -> researchDesc
    java.lang.String discoverDesc -> discoverDesc
    com.tyrfing.games.id17.effects.IEffect[] researchEffects -> researchEffects
    com.tyrfing.games.id17.effects.IEffect[] discoverEffects -> discoverEffects
    com.tyrlib2.gui.ScaledVector2 iconPos -> iconPos
    boolean discovered -> discovered
    int COUNT_TECHS -> COUNT_TECHS
    int INTELLECTUAL_DISCOVERY -> INTELLECTUAL_DISCOVERY
    float INTELLECTUAL_DISCOVERY_DECAY -> INTELLECTUAL_DISCOVERY_DECAY
    int INTELLECTUAL_RESEARCH -> INTELLECTUAL_RESEARCH
    float INTELLECTUAL_RESEARCH_DECAY -> INTELLECTUAL_RESEARCH_DECAY
    void update(java.lang.String,int,int,com.tyrfing.games.id17.technology.Technology[],java.lang.String,java.lang.String,com.tyrfing.games.id17.effects.IEffect[],com.tyrfing.games.id17.effects.IEffect[],com.tyrlib2.gui.ScaledVector2) -> update
    void onApply(com.tyrfing.games.id17.houses.House,boolean) -> onApply
    void onResarch(com.tyrfing.games.id17.houses.House) -> onResarch
    void onSpread(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> onSpread
    void onDiscover(com.tyrfing.games.id17.houses.House) -> onDiscover
    java.lang.String getLinkedName() -> getLinkedName
com.tyrfing.games.id17.technology.Technology$1 -> com.tyrfing.games.id17.technology.a:
    com.tyrfing.games.id17.technology.Technology this$0 -> a
    com.tyrfing.games.id17.technology.Technology val$tech -> b
    void onCall() -> a
com.tyrfing.games.id17.technology.TechnologyProject -> com.tyrfing.games.id17.technology.TechnologyProject:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.technology.Technology tech -> tech
    com.tyrfing.games.id17.houses.House house -> house
    float progress -> progress
    boolean finished -> finished
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
    float getProgress() -> getProgress
    void abort() -> abort
    java.lang.String getIconAtlasName() -> getIconAtlasName
    java.lang.String getIconRegionName() -> getIconRegionName
    void setProgress(float) -> setProgress
    void finish() -> finish
    int getEstimatedRemainingDays() -> getEstimatedRemainingDays
com.tyrfing.games.id17.technology.TechnologyTree -> com.tyrfing.games.id17.technology.TechnologyTree:
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    com.tyrfing.games.id17.technology.Technology[] techs -> techs
com.tyrfing.games.id17.technology.TechnologyTreeSet -> com.tyrfing.games.id17.technology.TechnologyTreeSet:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.technology.TechnologyTree[] trees -> trees
    void update() -> update
com.tyrfing.games.id17.technology.XMLTechnologyTreeFactory -> com.tyrfing.games.id17.technology.b:
    org.xmlpull.v1.XmlPullParser parser -> a
    java.lang.String source -> b
    com.tyrfing.games.id17.technology.TechnologyTree tree -> c
    int currentTech -> d
    com.tyrfing.games.id17.technology.TechnologyTree create() -> a
    void createTree() -> b
    void parseTech() -> c
    com.tyrfing.games.id17.effects.IEffect[] parseEffs(java.lang.String) -> a
    com.tyrfing.games.id17.effects.IEffect parseEffect() -> d
com.tyrfing.games.id17.technology.XMLTechnologyTreeUpdater -> com.tyrfing.games.id17.technology.c:
    org.xmlpull.v1.XmlPullParser parser -> a
    java.lang.String source -> b
    com.tyrfing.games.id17.technology.TechnologyTree tree -> c
    int currentTech -> d
    void update(com.tyrfing.games.id17.technology.TechnologyTree) -> a
    void parseTech() -> a
    com.tyrfing.games.id17.effects.IEffect[] parseEffs(java.lang.String) -> a
    com.tyrfing.games.id17.effects.IEffect parseEffect() -> b
com.tyrfing.games.id17.trade.Bread -> com.tyrfing.games.id17.trade.Bread:
    long serialVersionUID -> serialVersionUID
    java.lang.String NAME -> NAME
    float BASE_VALUE -> BASE_VALUE
    int ID -> ID
    float change -> change
    void onAddSupply(com.tyrfing.games.id17.holdings.Holding) -> onAddSupply
    void onRemoveSupply(com.tyrfing.games.id17.holdings.Holding) -> onRemoveSupply
    com.tyrfing.games.id17.trade.Good copy() -> copy
    com.tyrfing.games.id17.trade.Good create() -> create
    java.lang.String getTooltip(com.tyrfing.games.id17.holdings.Holding) -> getTooltip
com.tyrfing.games.id17.trade.Flour -> com.tyrfing.games.id17.trade.Flour:
    long serialVersionUID -> serialVersionUID
    java.lang.String NAME -> NAME
    float BASE_VALUE -> BASE_VALUE
    int ID -> ID
    float change -> change
    void onAddSupply(com.tyrfing.games.id17.holdings.Holding) -> onAddSupply
    void onRemoveSupply(com.tyrfing.games.id17.holdings.Holding) -> onRemoveSupply
    com.tyrfing.games.id17.trade.Good copy() -> copy
    com.tyrfing.games.id17.trade.Good create() -> create
    java.lang.String getTooltip(com.tyrfing.games.id17.holdings.Holding) -> getTooltip
com.tyrfing.games.id17.trade.Good -> com.tyrfing.games.id17.trade.Good:
    long serialVersionUID -> serialVersionUID
    int COUNT_GOODS -> COUNT_GOODS
    int[] FOOD_IDS -> FOOD_IDS
    java.lang.String name -> name
    float baseValue -> baseValue
    int quantity -> quantity
    java.util.List producers -> producers
    gnu.trove.list.array.TIntArrayList quantities -> quantities
    int id -> id
    java.lang.String getName() -> getName
    float getBaseValue() -> getBaseValue
    float getQuantity() -> getQuantity
    int getQuantity(int) -> getQuantity
    void changeQuantity(int,int) -> changeQuantity
    void changeQuantity(int,com.tyrfing.games.id17.holdings.Holding) -> changeQuantity
    com.tyrfing.games.id17.trade.Good copy() -> copy
    com.tyrfing.games.id17.trade.Good create() -> create
    com.tyrfing.games.id17.trade.Good copy(int) -> copy
    float getValue(com.tyrfing.games.id17.holdings.Holding) -> getValue
    void onAddSupply(com.tyrfing.games.id17.holdings.Holding) -> onAddSupply
    void onRemoveSupply(com.tyrfing.games.id17.holdings.Holding) -> onRemoveSupply
    java.util.List getProducers() -> getProducers
    int getProducentID(com.tyrfing.games.id17.holdings.Holding) -> getProducentID
    void addProducent(int,com.tyrfing.games.id17.holdings.Holding) -> addProducent
    com.tyrfing.games.id17.trade.Good createGood(java.lang.String,int,com.tyrfing.games.id17.holdings.Holding) -> createGood
    com.tyrfing.games.id17.trade.Good createGood(java.lang.String,int) -> createGood
    java.lang.String getTooltip(com.tyrfing.games.id17.holdings.Holding) -> getTooltip
    com.tyrfing.games.id17.trade.Good createGood(int,int,com.tyrfing.games.id17.holdings.Holding) -> createGood
    java.lang.String getName(int) -> getName
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    float getMult(com.tyrfing.games.id17.holdings.Holding,int) -> getMult
    float getNecessaryQuantity() -> getNecessaryQuantity
    int getID() -> getID
com.tyrfing.games.id17.trade.GoodProduction -> com.tyrfing.games.id17.trade.GoodProduction:
    long serialVersionUID -> serialVersionUID
    java.util.List in -> in
    java.util.List out -> out
    boolean[] producesInSeason -> producesInSeason
    void addInputGood(com.tyrfing.games.id17.trade.Good) -> addInputGood
    void addOutputGood(com.tyrfing.games.id17.trade.Good) -> addOutputGood
    void checkProduction(com.tyrfing.games.id17.holdings.Holding) -> checkProduction
    int getCountInputGoods() -> getCountInputGoods
    int getCountOutputGoods() -> getCountOutputGoods
    com.tyrfing.games.id17.trade.Good getInputGood(int) -> getInputGood
    com.tyrfing.games.id17.trade.Good getOutputGood(int) -> getOutputGood
    com.tyrfing.games.id17.trade.GoodProduction createProduction(java.lang.String[],int[],java.lang.String[],int[],com.tyrfing.games.id17.holdings.Holding) -> createProduction
    com.tyrfing.games.id17.trade.GoodProduction createProduction(com.tyrfing.games.id17.trade.ProdData,com.tyrfing.games.id17.holdings.Holding) -> createProduction
    com.tyrfing.games.id17.trade.GoodProduction createProduction(java.lang.String[],int[],java.lang.String[],int[]) -> createProduction
    com.tyrfing.games.id17.trade.GoodProduction createProduction(com.tyrfing.games.id17.trade.ProdData) -> createProduction
com.tyrfing.games.id17.trade.Grain -> com.tyrfing.games.id17.trade.Grain:
    long serialVersionUID -> serialVersionUID
    java.lang.String NAME -> NAME
    float BASE_VALUE -> BASE_VALUE
    int ID -> ID
    float change -> change
    void onAddSupply(com.tyrfing.games.id17.holdings.Holding) -> onAddSupply
    void onRemoveSupply(com.tyrfing.games.id17.holdings.Holding) -> onRemoveSupply
    com.tyrfing.games.id17.trade.Good copy() -> copy
    com.tyrfing.games.id17.trade.Good create() -> create
    java.lang.String getTooltip(com.tyrfing.games.id17.holdings.Holding) -> getTooltip
com.tyrfing.games.id17.trade.Horse -> com.tyrfing.games.id17.trade.Horse:
    long serialVersionUID -> serialVersionUID
    java.lang.String NAME -> NAME
    float BASE_VALUE -> BASE_VALUE
    int ID -> ID
    void onAddSupply(com.tyrfing.games.id17.holdings.Holding) -> onAddSupply
    void onRemoveSupply(com.tyrfing.games.id17.holdings.Holding) -> onRemoveSupply
    com.tyrfing.games.id17.trade.Good copy() -> copy
    com.tyrfing.games.id17.trade.Good create() -> create
    java.lang.String getTooltip(com.tyrfing.games.id17.holdings.Holding) -> getTooltip
com.tyrfing.games.id17.trade.Iron -> com.tyrfing.games.id17.trade.Iron:
    long serialVersionUID -> serialVersionUID
    java.lang.String NAME -> NAME
    float BASE_VALUE -> BASE_VALUE
    int ID -> ID
    void onAddSupply(com.tyrfing.games.id17.holdings.Holding) -> onAddSupply
    void onRemoveSupply(com.tyrfing.games.id17.holdings.Holding) -> onRemoveSupply
    com.tyrfing.games.id17.trade.Good copy() -> copy
    com.tyrfing.games.id17.trade.Good create() -> create
    java.lang.String getTooltip(com.tyrfing.games.id17.holdings.Holding) -> getTooltip
com.tyrfing.games.id17.trade.Meat -> com.tyrfing.games.id17.trade.Meat:
    long serialVersionUID -> serialVersionUID
    java.lang.String NAME -> NAME
    float BASE_VALUE -> BASE_VALUE
    int ID -> ID
    float change -> change
    void onAddSupply(com.tyrfing.games.id17.holdings.Holding) -> onAddSupply
    void onRemoveSupply(com.tyrfing.games.id17.holdings.Holding) -> onRemoveSupply
    com.tyrfing.games.id17.trade.Good copy() -> copy
    com.tyrfing.games.id17.trade.Good create() -> create
    java.lang.String getTooltip(com.tyrfing.games.id17.holdings.Holding) -> getTooltip
com.tyrfing.games.id17.trade.ProdData -> com.tyrfing.games.id17.trade.a:
    java.lang.String[] in -> a
    int[] qIn -> b
    java.lang.String[] out -> c
    int[] qOut -> d
com.tyrfing.games.id17.trade.Stone -> com.tyrfing.games.id17.trade.Stone:
    long serialVersionUID -> serialVersionUID
    java.lang.String NAME -> NAME
    float BASE_VALUE -> BASE_VALUE
    int ID -> ID
    void onAddSupply(com.tyrfing.games.id17.holdings.Holding) -> onAddSupply
    void onRemoveSupply(com.tyrfing.games.id17.holdings.Holding) -> onRemoveSupply
    com.tyrfing.games.id17.trade.Good copy() -> copy
    com.tyrfing.games.id17.trade.Good create() -> create
    java.lang.String getTooltip(com.tyrfing.games.id17.holdings.Holding) -> getTooltip
com.tyrfing.games.id17.trade.Weaponry -> com.tyrfing.games.id17.trade.Weaponry:
    long serialVersionUID -> serialVersionUID
    java.lang.String NAME -> NAME
    float BASE_VALUE -> BASE_VALUE
    int ID -> ID
    void onAddSupply(com.tyrfing.games.id17.holdings.Holding) -> onAddSupply
    void onRemoveSupply(com.tyrfing.games.id17.holdings.Holding) -> onRemoveSupply
    com.tyrfing.games.id17.trade.Good copy() -> copy
    com.tyrfing.games.id17.trade.Good create() -> create
    java.lang.String getTooltip(com.tyrfing.games.id17.holdings.Holding) -> getTooltip
com.tyrfing.games.id17.trade.Wood -> com.tyrfing.games.id17.trade.Wood:
    long serialVersionUID -> serialVersionUID
    java.lang.String NAME -> NAME
    float BASE_VALUE -> BASE_VALUE
    int ID -> ID
    void onAddSupply(com.tyrfing.games.id17.holdings.Holding) -> onAddSupply
    void onRemoveSupply(com.tyrfing.games.id17.holdings.Holding) -> onRemoveSupply
    com.tyrfing.games.id17.trade.Good copy() -> copy
    com.tyrfing.games.id17.trade.Good create() -> create
    java.lang.String getTooltip(com.tyrfing.games.id17.holdings.Holding) -> getTooltip
com.tyrfing.games.id17.war.Army -> com.tyrfing.games.id17.war.Army:
    long serialVersionUID -> serialVersionUID
    int ARMY_REINF_VOLUNTEER -> ARMY_REINF_VOLUNTEER
    int ARMY_REINF_CONSCRIPT -> ARMY_REINF_CONSCRIPT
    int ARMY_REINF_MERC -> ARMY_REINF_MERC
    int ARMY_REINF_VASSAL -> ARMY_REINF_VASSAL
    float PILLAGE_MORAL -> PILLAGE_MORAL
    float PILLAGE_RULER_FACTOR -> PILLAGE_RULER_FACTOR
    float PILLAGE_RELATION_HIT_ENEMY -> PILLAGE_RELATION_HIT_ENEMY
    float PILLAGE_RELATION_HIT_VASSAL -> PILLAGE_RELATION_HIT_VASSAL
    float PILLAGE_VASSAL_TYRANNY -> PILLAGE_VASSAL_TYRANNY
    float PILLAGE_RELATION_HIT_DURATION -> PILLAGE_RELATION_HIT_DURATION
    float PILLAGE_HONOR_HIT -> PILLAGE_HONOR_HIT
    int MAX_REGIMENTS -> MAX_REGIMENTS
    float SCALE -> SCALE
    float MORAL_REGEN -> MORAL_REGEN
    float MAINTANANCE -> MAINTANANCE
    float STATIONED_FACTOR -> STATIONED_FACTOR
    float PILLAGE_TIME -> PILLAGE_TIME
    float DESERTION_NO_MONEY -> DESERTION_NO_MONEY
    boolean retreating -> retreating
    com.tyrfing.games.id17.war.Regiment[] regiments -> regiments
    com.tyrlib2.graphics.renderables.Entity entity -> entity
    float SPEED -> SPEED
    float moral -> moral
    boolean headerVisible -> headerVisible
    com.tyrlib2.graphics.scene.SceneNode infoNode -> infoNode
    com.tyrlib2.graphics.particles.Particle particle -> a
    com.tyrlib2.graphics.particles.Particle ownerParticle -> b
    com.tyrlib2.graphics.materials.ParticleMaterial mat -> c
    com.tyrlib2.graphics.renderables.Text2 text -> d
    com.tyrlib2.graphics.scene.SceneNode textNode -> e
    com.tyrfing.games.id17.houses.House owner -> owner
    com.tyrfing.games.id17.holdings.Barony home -> home
    com.tyrfing.games.id17.holdings.Holding current -> current
    java.util.List path -> path
    java.lang.Integer nextTarget -> nextTarget
    com.tyrlib2.graphics.scene.SceneNode node -> node
    float travelled -> travelled
    boolean travelling -> travelling
    com.tyrfing.games.id17.war.Battle battle -> battle
    float totalTroops -> totalTroops
    int troopsLastFrame -> troopsLastFrame
    com.tyrlib2.math.Vector3 forward -> forward
    java.util.List arrowPaths -> f
    float EPS -> EPS
    com.tyrlib2.graphics.renderer.TextureRegion green -> green
    com.tyrlib2.graphics.renderer.TextureRegion brown -> brown
    com.tyrlib2.graphics.renderer.TextureRegion moralRegion -> moralRegion
    com.tyrlib2.graphics.renderer.TextureRegion pillageRegion -> pillageRegion
    com.tyrlib2.math.Vector3 BATTLE_OFFSET -> BATTLE_OFFSET
    com.tyrlib2.graphics.particles.ParticleSystem system -> g
    com.tyrlib2.graphics.particles.ComplexParticleSystem pillageSystem -> h
    boolean dead -> dead
    boolean raised -> raised
    int countRegiments -> countRegiments
    float desertionRate -> desertionRate
    float pillageProgress -> pillageProgress
    float pillageFactor -> pillageFactor
    short id -> id
    int maint -> maint
    float reinforcements -> reinforcements
    float[] reinf -> reinf
    float MIN_SCALE -> MIN_SCALE
    float MAX_SCALE -> MAX_SCALE
    float getMaintainanceCosts() -> getMaintainanceCosts
    float getDesertionRate() -> getDesertionRate
    float getTroopChangeRate() -> getTroopChangeRate
    void setOwner(com.tyrfing.games.id17.houses.House) -> setOwner
    void setHome(com.tyrfing.games.id17.holdings.Barony) -> setHome
    com.tyrfing.games.id17.holdings.Barony getHome() -> getHome
    void addRegiment(com.tyrfing.games.id17.war.Regiment) -> addRegiment
    void changeTroops(int,float) -> changeTroops
    int getCountRegiments() -> getCountRegiments
    void raise() -> raise
    void raise(com.tyrfing.games.id17.holdings.Holding) -> raise
    void reposition() -> reposition
    void createOn(com.tyrfing.games.id17.holdings.Holding) -> createOn
    void setCurrentBarony(com.tyrfing.games.id17.holdings.Barony) -> setCurrentBarony
    void unraise() -> unraise
    boolean isRaised() -> isRaised
    com.tyrlib2.graphics.renderables.Entity getEntity() -> getEntity
    float getMoral() -> getMoral
    void setMoral(float) -> setMoral
    com.tyrlib2.graphics.particles.Particle getParticle() -> getParticle
    com.tyrlib2.graphics.particles.Particle getOwnerParticle() -> getOwnerParticle
    com.tyrlib2.graphics.renderables.Text2 getText2() -> getText2
    int getTotalTroops() -> getTotalTroops
    int getTotalTroopsMax() -> getTotalTroopsMax
    void select() -> select
    void deselect() -> deselect
    com.tyrfing.games.id17.houses.House getOwner() -> getOwner
    java.lang.String toString() -> toString
    com.tyrfing.games.id17.war.Regiment getRegiment(int) -> getRegiment
    float getRegimentAverage() -> getRegimentAverage
    float getRegimentAverage(int) -> getRegimentAverage
    void moveTo(com.tyrfing.games.id17.holdings.Holding) -> moveTo
    void createArrowPaths() -> createArrowPaths
    void buildArrowPaths() -> a
    float getMoralRegen() -> getMoralRegen
    void onUpdate(float) -> onUpdate
    int getPillagePotential() -> getPillagePotential
    boolean isInExploredBarony() -> isInExploredBarony
    void arriveAtWaypoint() -> arriveAtWaypoint
    void updateMoral(float) -> updateMoral
    void arrive() -> arrive
    void endTravel() -> endTravel
    void positionAsAttacker() -> positionAsAttacker
    void positionAsDefender() -> positionAsDefender
    void initSiege(com.tyrfing.games.id17.war.War) -> a
    void setBesieged(boolean) -> setBesieged
    void regenMoral(float) -> regenMoral
    boolean isFighting() -> isFighting
    void next() -> b
    void rotate(com.tyrlib2.math.Quaternion) -> rotate
    void setRotation(com.tyrlib2.math.Quaternion) -> setRotation
    boolean isFinished() -> isFinished
    void position(com.tyrfing.games.id17.holdings.Holding) -> position
    void checkCreateHeader() -> checkCreateHeader
    com.tyrlib2.graphics.renderables.Text2 getTroopText() -> getTroopText
    void updateTroopTextRot() -> updateTroopTextRot
    void checkDestroyHeader() -> checkDestroyHeader
    void setBattle(com.tyrfing.games.id17.war.Battle) -> setBattle
    com.tyrfing.games.id17.war.Battle getBattle() -> getBattle
    void receiveDamage(float) -> receiveDamage
    void randomRetreat() -> randomRetreat
    void kill() -> kill
    void destroy() -> destroy
    com.tyrfing.games.id17.holdings.Holding getCurrentHolding() -> getCurrentHolding
    boolean isTravelling() -> isTravelling
    void switchRegiments(int,int) -> switchRegiments
    void switchRegiments(int,com.tyrfing.games.id17.war.Army,int) -> switchRegiments
    int getMoveTarget() -> getMoveTarget
    void setReinforcementEnabled(boolean) -> setReinforcementEnabled
    void pillage() -> pillage
    boolean isPillaging() -> isPillaging
    void endPillage() -> endPillage
    float getAtkMult() -> getAtkMult
    float getDefMult() -> getDefMult
    float getTypeMult(int) -> getTypeMult
    void addReinforcements(float,int) -> addReinforcements
    void resetReinforcements() -> resetReinforcements
    int getEstimatedTravelTime() -> getEstimatedTravelTime
    java.lang.String getReinforcementTooltip() -> getReinforcementTooltip
    void updateHeader(com.tyrfing.games.id17.holdings.Holding) -> updateHeader
    void updateHeader() -> updateHeader
    void hide() -> hide
com.tyrfing.games.id17.war.ArrowPath -> com.tyrfing.games.id17.war.a:
    java.util.List segments -> b
    com.tyrlib2.math.Vector3 INIT_DIRECTION -> a
    com.tyrlib2.math.Vector3 SIZE -> c
    int activeSegment -> d
    float percentPerSegment -> e
    int segmentCount -> f
    void destroy() -> a
    void update(float) -> a
    void setVisible(boolean) -> a
com.tyrfing.games.id17.war.Battle -> com.tyrfing.games.id17.war.Battle:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.war.Army attacker -> attacker
    com.tyrfing.games.id17.war.Army defender -> defender
    com.tyrfing.games.id17.war.BattlePhase phase -> phase
    float PHASE_DURATION -> PHASE_DURATION
    float PHASE_PREP -> PHASE_PREP
    float PHASE_RET -> PHASE_RET
    float SIEGE_PREP -> SIEGE_PREP
    boolean inPosition -> inPosition
    boolean retreating -> retreating
    float phaseTime -> phaseTime
    com.tyrfing.games.id17.gui.war.BattleGUI gui -> a
    java.util.List skirmishs -> skirmishs
    boolean finished -> finished
    com.tyrfing.games.id17.holdings.Holding place -> place
    com.tyrlib2.math.Quaternion attackQuat -> attackQuat
    com.tyrlib2.math.Quaternion defQuat -> defQuat
    com.tyrfing.games.id17.war.War war -> war
    int attackerTroops -> attackerTroops
    int defenderTroops -> defenderTroops
    int[] regimentTroopsAttacker -> regimentTroopsAttacker
    int[] regimentTroopsDefender -> regimentTroopsDefender
    int attackerTotalTroops -> attackerTotalTroops
    int defenderTotalTroops -> defenderTotalTroops
    float warProgress -> warProgress
    com.tyrfing.games.id17.war.Army winner -> winner
    com.tyrfing.games.id17.war.Army looser -> looser
    boolean siege -> siege
    float duration -> duration
    void makeSiege() -> makeSiege
    boolean isSiege() -> isSiege
    com.tyrfing.games.id17.holdings.Holding getPlace() -> getPlace
    void onUpdate(float) -> onUpdate
    void moveUp(com.tyrfing.games.id17.war.Army) -> a
    void nextPhase() -> a
    void makeMeleeSkirmishs(com.tyrfing.games.id17.war.Army,com.tyrfing.games.id17.war.Army) -> a
    void makeRangedSkirmishs(com.tyrfing.games.id17.war.Army,com.tyrfing.games.id17.war.Army) -> b
    void makeFlankSkirmishs(com.tyrfing.games.id17.war.Army,com.tyrfing.games.id17.war.Army) -> c
    boolean isFinished() -> isFinished
    com.tyrfing.games.id17.war.Army getAttacker() -> getAttacker
    com.tyrfing.games.id17.war.Army getDefender() -> getDefender
    java.util.List getSkirmishes() -> getSkirmishes
    void setView(com.tyrfing.games.id17.gui.war.BattleGUI) -> setView
    com.tyrfing.games.id17.war.BattlePhase getPhase() -> getPhase
    void win(com.tyrfing.games.id17.war.Army,com.tyrfing.games.id17.war.Army) -> win
    com.tyrfing.games.id17.war.Army getWinner() -> getWinner
    com.tyrfing.games.id17.war.Army getLooser() -> getLooser
    float getWarProgress() -> getWarProgress
    void end() -> end
    int getLosses(com.tyrfing.games.id17.war.Army,int) -> getLosses
    int getLosses(com.tyrfing.games.id17.war.Army) -> getLosses
    com.tyrfing.games.id17.war.Army getOther(com.tyrfing.games.id17.war.Army) -> getOther
    float getDuration() -> getDuration
com.tyrfing.games.id17.war.BattlePhase -> com.tyrfing.games.id17.war.BattlePhase:
    com.tyrfing.games.id17.war.BattlePhase BATTLE_CHARGE -> BATTLE_CHARGE
    com.tyrfing.games.id17.war.BattlePhase BATTLE_VOLLEY_1 -> BATTLE_VOLLEY_1
    com.tyrfing.games.id17.war.BattlePhase BATTLE_BATTLE_1 -> BATTLE_BATTLE_1
    com.tyrfing.games.id17.war.BattlePhase BATTLE_FLANK_1 -> BATTLE_FLANK_1
    com.tyrfing.games.id17.war.BattlePhase BATTLE_VOLLEY_2 -> BATTLE_VOLLEY_2
    com.tyrfing.games.id17.war.BattlePhase BATTLE_BATTLE_2 -> BATTLE_BATTLE_2
    com.tyrfing.games.id17.war.BattlePhase BATTLE_FLANK_2 -> BATTLE_FLANK_2
    com.tyrfing.games.id17.war.BattlePhase SIEGE_PREPARE -> SIEGE_PREPARE
    com.tyrfing.games.id17.war.BattlePhase SIEGE_VOLLEY_2 -> SIEGE_VOLLEY_2
    com.tyrfing.games.id17.war.BattlePhase SIEGE_VOLLEY_1 -> SIEGE_VOLLEY_1
    com.tyrfing.games.id17.war.BattlePhase SIEGE_ASSAULT -> SIEGE_ASSAULT
    int[] $SWITCH_TABLE$com$tyrfing$games$id17$war$BattlePhase -> a
    com.tyrfing.games.id17.war.BattlePhase[] ENUM$VALUES -> b
    com.tyrfing.games.id17.war.BattlePhase getNext() -> getNext
    java.lang.String displayName() -> displayName
    boolean isRangedPhase() -> isRangedPhase
    boolean isDefPhase() -> isDefPhase
    com.tyrfing.games.id17.war.BattlePhase[] values() -> values
    com.tyrfing.games.id17.war.BattlePhase valueOf(java.lang.String) -> valueOf
    int[] $SWITCH_TABLE$com$tyrfing$games$id17$war$BattlePhase() -> $SWITCH_TABLE$com$tyrfing$games$id17$war$BattlePhase
com.tyrfing.games.id17.war.RebelArmy -> com.tyrfing.games.id17.war.RebelArmy:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.holdings.Holding origin -> origin
    float strengths -> strengths
    boolean destroyed -> destroyed
    void destroy() -> destroy
    void kill() -> kill
com.tyrfing.games.id17.war.Regiment -> com.tyrfing.games.id17.war.Regiment:
    long serialVersionUID -> serialVersionUID
    float troops -> troops
    float maxTroops -> maxTroops
    com.tyrfing.games.id17.war.UnitType unitType -> unitType
    int formationPos -> formationPos
    boolean reinforcementEnabled -> reinforcementEnabled
com.tyrfing.games.id17.war.Skirmish -> com.tyrfing.games.id17.war.Skirmish:
    long serialVersionUID -> serialVersionUID
    java.util.List attackers -> attackers
    java.util.List defenders -> defenders
    com.tyrfing.games.id17.war.Army attackerArmy -> attackerArmy
    com.tyrfing.games.id17.war.Army defenderArmy -> defenderArmy
    com.tyrfing.games.id17.war.Battle battle -> battle
    boolean counterDamage -> counterDamage
    boolean finished -> finished
    void calcDmg(float) -> calcDmg
com.tyrfing.games.id17.war.UnitType -> com.tyrfing.games.id17.war.UnitType:
    com.tyrfing.games.id17.war.UnitType Swordmen -> Swordmen
    com.tyrfing.games.id17.war.UnitType Pikemen -> Pikemen
    com.tyrfing.games.id17.war.UnitType Archers -> Archers
    com.tyrfing.games.id17.war.UnitType Axemen -> Axemen
    com.tyrfing.games.id17.war.UnitType Cavalry -> Cavalry
    com.tyrfing.games.id17.war.UnitType Guardians -> Guardians
    com.tyrfing.games.id17.war.UnitType Walls -> Walls
    java.util.Map UNIT_STATS -> UNIT_STATS
    float[][] UNIT_AFFINITIES -> UNIT_AFFINITIES
    int SPEED -> SPEED
    int ATTACK -> ATTACK
    int DEFENSE -> DEFENSE
    int COUNTERATTACK -> COUNTERATTACK
    int BASE_COST -> BASE_COST
    int BASE_BUILD_TIME -> BASE_BUILD_TIME
    int COST_INC -> COST_INC
    int BUILD_TIME_INC -> BUILD_TIME_INC
    int GOOD_DEMAND_1_ID -> GOOD_DEMAND_1_ID
    int GOOD_DEMAND_1_AMOUNT -> GOOD_DEMAND_1_AMOUNT
    int GOOD_DEMAND_2_ID -> GOOD_DEMAND_2_ID
    int GOOD_DEMAND_2_AMOUNT -> GOOD_DEMAND_2_AMOUNT
    java.lang.String[] DESC -> DESC
    com.tyrfing.games.id17.war.UnitType[] ENUM$VALUES -> a
    boolean isMeleeAttacker() -> isMeleeAttacker
    boolean isGuarding() -> isGuarding
    float getPrice(com.tyrfing.games.id17.war.UnitType,int) -> getPrice
    float getProd(com.tyrfing.games.id17.war.UnitType,int) -> getProd
    java.lang.String getDesc(com.tyrfing.games.id17.war.UnitType,com.tyrfing.games.id17.war.Army) -> getDesc
    java.lang.String getBaseDesc(com.tyrfing.games.id17.war.UnitType) -> getBaseDesc
    com.tyrfing.games.id17.war.UnitType[] values() -> values
    com.tyrfing.games.id17.war.UnitType valueOf(java.lang.String) -> valueOf
com.tyrfing.games.id17.war.UnitType$1 -> com.tyrfing.games.id17.war.b:
    com.tyrfing.games.id17.war.UnitType val$type -> a
    void onCall() -> a
com.tyrfing.games.id17.war.War -> com.tyrfing.games.id17.war.War:
    long serialVersionUID -> serialVersionUID
    float OCCU_PROGRESS -> OCCU_PROGRESS
    float MAIN_TARGET_BONUS -> MAIN_TARGET_BONUS
    int RELATION_AT_WAR -> RELATION_AT_WAR
    float TRUCE_DURATION -> TRUCE_DURATION
    float totalProgress -> totalProgress
    float occupyProgress -> occupyProgress
    float battleProgress -> battleProgress
    float pillageProgress -> pillageProgress
    java.util.List battles -> battles
    com.tyrfing.games.id17.houses.House attacker -> attacker
    com.tyrfing.games.id17.houses.House defender -> defender
    java.util.List attackers -> attackers
    java.util.List defenders -> defenders
    java.util.List occupied -> occupied
    com.tyrfing.games.id17.gui.war.WarGUI warGUI -> a
    com.tyrfing.games.id17.war.WarGoal goal -> goal
    com.tyrfing.games.id17.war.WarJustification justification -> justification
    float startTime -> startTime
    int playerSide -> playerSide
    gnu.trove.map.hash.TObjectFloatHashMap warContributions -> warContributions
    float totalContributionAttacker -> totalContributionAttacker
    float totalContributionDefender -> totalContributionDefender
    int MAX_FAVOR -> MAX_FAVOR
    void inviteDefenders() -> inviteDefenders
    void addAttackerAlly(com.tyrfing.games.id17.houses.House) -> addAttackerAlly
    void addDefenderAlly(com.tyrfing.games.id17.houses.House) -> addDefenderAlly
    void createGUI() -> createGUI
    void destroyGUI() -> destroyGUI
    void useEnemyBorders(com.tyrfing.games.id17.houses.House) -> a
    void useNormalBorders(com.tyrfing.games.id17.houses.House) -> b
    boolean areEnemies(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> areEnemies
    float getProgress() -> getProgress
    void changeProgress(float,com.tyrfing.games.id17.houses.House) -> changeProgress
    float getWarContribution(com.tyrfing.games.id17.houses.House) -> getWarContribution
    void end() -> end
    com.tyrfing.games.id17.gui.war.WarGUI getGUI() -> getGUI
    void win(com.tyrfing.games.id17.houses.House) -> win
    void addOccupied(com.tyrfing.games.id17.holdings.Barony) -> addOccupied
    float getStartTime() -> getStartTime
    float getDuration() -> getDuration
    com.tyrfing.games.id17.houses.House getOther(com.tyrfing.games.id17.houses.House) -> getOther
    float getReparations(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getReparations
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
com.tyrfing.games.id17.war.WarGoal -> com.tyrfing.games.id17.war.WarGoal:
    long serialVersionUID -> serialVersionUID
    int CONQUER_HOLDING -> CONQUER_HOLDING
    int INDEPENDENCE -> INDEPENDENCE
    int REVOLT -> REVOLT
    int LIBERATION -> LIBERATION
    int NO_REASON -> NO_REASON
    float PUSHED_CLAIM_RELATION -> PUSHED_CLAIM_RELATION
    float PUSHED_CLAIM_DURATION -> PUSHED_CLAIM_DURATION
    com.tyrfing.games.id17.holdings.Holding goalHolding -> goalHolding
    com.tyrfing.games.id17.houses.House forHouse -> forHouse
    int warMode -> warMode
    com.tyrfing.games.id17.holdings.UnrestSource source -> source
    void enact(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.war.War) -> enact
    java.lang.String resultsAttackerOnVictory(com.tyrfing.games.id17.war.War) -> resultsAttackerOnVictory
    java.lang.String resultsAttackerOnDefeat() -> resultsAttackerOnDefeat
    java.lang.String resultsDefenderOnVictory() -> resultsDefenderOnVictory
    java.lang.String resultsDefenderOnDefeat(com.tyrfing.games.id17.war.War) -> resultsDefenderOnDefeat
    short getGoalHoldingID() -> getGoalHoldingID
com.tyrfing.games.id17.war.WarJustification -> com.tyrfing.games.id17.war.WarJustification:
    long serialVersionUID -> serialVersionUID
    com.tyrfing.games.id17.houses.House claim -> claim
    int honor -> honor
    int goal -> goal
    int NO_CLAIM -> NO_CLAIM
    int getHonor(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> getHonor
    java.lang.String toString() -> toString
com.tyrfing.games.id17.war.XMLArmyFactory -> com.tyrfing.games.id17.war.c:
    org.xmlpull.v1.XmlPullParser parser -> a
    com.tyrfing.games.id17.war.Army army -> b
    com.tyrfing.games.id17.war.Army create() -> a
    void parseRegiment() -> b
com.tyrfing.games.id17.world.Border -> com.tyrfing.games.id17.world.Border:
    com.tyrlib2.util.Color neutralColor -> b
    com.tyrlib2.util.Color enemyColor -> c
    com.tyrlib2.util.Color highlightColor -> d
    com.tyrlib2.util.Color playerColor -> e
    com.tyrlib2.util.Color allyColor -> f
    short[] DRAW_ORDER -> a
    java.util.HashMap materialMap -> g
    java.util.List coords -> h
    java.util.List visible -> i
    com.tyrlib2.graphics.scene.SceneNode parent -> j
    com.tyrfing.games.id17.world.WorldChunk worldChunk -> k
    com.tyrlib2.graphics.renderer.Renderable borderRenderable -> l
    com.tyrfing.games.id17.world.Border$Status status -> m
    com.tyrfing.games.id17.world.Border$Status oldStatus -> n
    float[] vertexData -> r
    short[] indexData -> s
    boolean render -> t
    int insertionID -> u
    void setMainCoords(java.util.List) -> a
    java.util.List getCoords() -> p_
    void rebuild() -> q_
    void build() -> c
    void render(float[]) -> a
    void setRender(boolean) -> a
    void setStatus(com.tyrfing.games.id17.world.Border$Status) -> a
    com.tyrlib2.math.AABB createUntransformedBoundingBox() -> d
    void renderShadow(float[]) -> b
    void setInsertionID(int) -> a_
    int getInsertionID() -> e
    void destroy() -> f
com.tyrfing.games.id17.world.Border$Status -> com.tyrfing.games.id17.world.Border$Status:
    com.tyrfing.games.id17.world.Border$Status NEUTRAL -> NEUTRAL
    com.tyrfing.games.id17.world.Border$Status ENEMY -> ENEMY
    com.tyrfing.games.id17.world.Border$Status HIGHLIGHT -> HIGHLIGHT
    com.tyrfing.games.id17.world.Border$Status PLAYER -> PLAYER
    com.tyrfing.games.id17.world.Border$Status ALLY -> ALLY
    com.tyrfing.games.id17.world.Border$Status[] ENUM$VALUES -> a
    com.tyrfing.games.id17.world.Border$Status[] values() -> values
    com.tyrfing.games.id17.world.Border$Status valueOf(java.lang.String) -> valueOf
com.tyrfing.games.id17.world.BorderBlock -> com.tyrfing.games.id17.world.a:
    int x -> a
    int y -> b
    int length -> c
    com.tyrlib2.util.Direction4 direction -> d
com.tyrfing.games.id17.world.FogMap -> com.tyrfing.games.id17.world.b:
    com.tyrfing.games.id17.world.WorldMap map -> c
    java.lang.String textureName -> d
    com.tyrlib2.bitmap.ICanvas canvas -> e
    com.tyrlib2.bitmap.IDrawableBitmap bitmap -> f
    com.tyrlib2.util.Color FOGGED_COLOR -> a
    com.tyrlib2.util.Color EXPLORED_COLOR -> b
    void init() -> a
    void setFog(int,int,com.tyrlib2.util.Color) -> a
    void updateFog(com.tyrfing.games.id17.holdings.Barony) -> a
    com.tyrlib2.graphics.renderer.Texture build() -> b
    void updateFogTexture() -> c
com.tyrfing.games.id17.world.FogMaterial -> com.tyrfing.games.id17.world.c:
    int modelMatrixHandle -> a
    int colorHandle -> b
    float[] mvpMatrix -> c
    com.tyrlib2.graphics.renderer.Material old -> d
    com.tyrlib2.graphics.animation.Skeleton skeleton -> e
    com.tyrlib2.util.Color color -> f
    void updateHandles() -> a
    void render(com.tyrlib2.graphics.renderer.Mesh,float[]) -> a
    com.tyrlib2.graphics.animation.Skeleton getOldSkeleton() -> b
    com.tyrlib2.graphics.renderer.Material getOldMaterial() -> c
com.tyrfing.games.id17.world.MapFile -> com.tyrfing.games.id17.world.MapFile:
    long serialVersionUID -> serialVersionUID
    com.tyrlib2.files.IBitmap baronyMap -> baronyMap
    com.tyrlib2.files.IBitmap tileMap -> tileMap
    java.lang.String baronyData -> baronyData
    java.lang.String houseData -> houseData
    java.lang.String mapName -> mapName
    void load() -> load
com.tyrfing.games.id17.world.Ocean -> com.tyrfing.games.id17.world.d:
    com.tyrlib2.graphics.renderables.Box box -> a
    int insertionID -> b
    float passedTime -> c
    com.tyrlib2.graphics.scene.SceneNode node -> d
    void render(float[]) -> a
    void renderShadow(float[]) -> b
    void setInsertionID(int) -> a_
    int getInsertionID() -> e
    void destroy() -> f
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
com.tyrfing.games.id17.world.OceanMaterial -> com.tyrfing.games.id17.world.e:
    float[] mvpMatrix -> v
    int waveTimeHandle -> w
    float waveTime -> x
    int bumpMapTextureHandle -> y
    int viewDirectionHandle -> z
    int fogMapHandle -> A
    int sizeHandle -> B
    void updateHandles() -> a
    void render(com.tyrlib2.graphics.renderer.Mesh,float[]) -> a
    void passTexture(int) -> a
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
com.tyrfing.games.id17.world.SeasonMaterial -> com.tyrfing.games.id17.world.f:
    java.lang.String winTextureName -> v
    com.tyrlib2.graphics.renderer.Texture winTexture -> w
    int winTextureHandle -> x
    int bumpMapTextureHandle -> y
    int winterHandle -> z
    int timeHandle -> A
    com.tyrfing.games.id17.world.WorldChunk chunk -> B
    int ownerHandle -> C
    int viewDirectionHandle -> D
    boolean fogged -> E
    float windTime -> F
    float wind -> G
    com.tyrlib2.graphics.renderer.Program fogProgram -> H
    com.tyrlib2.graphics.renderer.Program seasonProgram -> I
    com.tyrlib2.graphics.renderer.Program strategicProgram -> J
    int modelMatrixHandle -> K
    int modelMatrixHandleStrategic -> L
    int colorStrategic -> M
    float[] mvpMatrix -> N
    boolean strategic -> O
    com.tyrlib2.util.Color color -> P
    int modelMatrixHandleSeason -> Q
    void setFogged(boolean) -> a
    void setStrategic(boolean,com.tyrlib2.util.Color) -> a
    void setWind(float) -> a
    void passTexture(int) -> a
    void render(com.tyrlib2.graphics.renderer.Mesh,float[]) -> a
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
com.tyrfing.games.id17.world.Tile -> com.tyrfing.games.id17.world.g:
    int type -> a
    int height -> b
    int meshPos -> c
    int x -> d
    int y -> e
    com.tyrfing.games.id17.world.WorldChunk chunk -> f
    boolean marked -> g
    com.tyrfing.games.id17.world.BorderBlock[] borderBlocks -> h
    float getScaledHeight() -> a
com.tyrfing.games.id17.world.TileMaterial -> com.tyrfing.games.id17.world.h:
    com.tyrfing.games.id17.world.SeasonMaterial mat -> a
    float[] uv -> b
com.tyrfing.games.id17.world.World -> com.tyrfing.games.id17.world.World:
    long serialVersionUID -> serialVersionUID
    float START_TIME -> START_TIME
    float SECONDS_PER_DAY -> SECONDS_PER_DAY
    int DAYS_PER_SEASON -> DAYS_PER_SEASON
    int SEASONS_PER_YEAR -> SEASONS_PER_YEAR
    int DAYS_PER_YEAR -> DAYS_PER_YEAR
    float MORAL_PER_SEASON -> MORAL_PER_SEASON
    float PROD_CHECK_INTERVAL -> PROD_CHECK_INTERVAL
    com.tyrfing.games.id17.holdings.HoldingTypes holdingTypes -> a
    float worldTime -> worldTime
    com.tyrlib2.game.Updater gameUpdater -> b
    com.tyrlib2.graphics.scene.Octree octree -> c
    java.util.List baronies -> baronies
    java.util.List holdings -> holdings
    java.util.Map holdingsByName -> holdingsByName
    java.util.List houses -> d
    java.util.List rankedHouses -> e
    java.util.HashMap holdingMap -> f
    java.util.HashMap armyMap -> g
    java.util.List raisedArmies -> raisedArmies
    java.util.List armies -> armies
    boolean detailsVisible -> detailsVisible
    com.tyrfing.games.id17.world.WorldMap map -> map
    float supplyFactor -> supplyFactor
    com.tyrfing.games.id17.gui.MainGUI mainGUI -> mainGUI
    com.tyrfing.games.id17.world.World singleton_world -> h
    int nextPlayerID -> nextPlayerID
    int speed -> speed
    com.tyrfing.games.id17.gui.PlayerController playerController -> playerController
    int day -> day
    int days -> days
    int season -> season
    int seasons -> seasons
    int years -> years
    int daysLastFrame -> i
    float prodCheckTime -> prodCheckTime
    java.util.List waterfalls -> j
    java.util.List waterfallSmokes -> k
    float passedUpdateRankTime -> passedUpdateRankTime
    float UPDATE_RANK_TIME -> UPDATE_RANK_TIME
    com.tyrfing.games.id17.technology.TechnologyTreeSet techTreeSet -> techTreeSet
    float goalPoints -> goalPoints
    com.tyrfing.games.id17.diplomacy.MessageExecutor messageResponses -> messageResponses
    com.tyrfing.games.id17.ai.actions.Executor executor -> executor
    com.tyrfing.games.id17.intrigue.IntrigueStarter starter -> starter
    java.util.List players -> players
    int updateHouses -> updateHouses
    float SERVER_UPDATE -> SERVER_UPDATE
    float passedUpdateTime -> passedUpdateTime
    com.tyrlib2.util.Color ambientColor -> ambientColor
    int oldSeasons -> oldSeasons
    int CHUNKS -> CHUNKS
    com.tyrfing.games.id17.world.MapFile mapFile -> mapFile
    java.lang.String[] SEASON_TOOLTIPS -> SEASON_TOOLTIPS
    float[][] SEASONAL_GOOD_MULT -> SEASONAL_GOOD_MULT
    com.tyrlib2.graphics.scene.Octree getOctree() -> getOctree
    float getWorldTime() -> getWorldTime
    float getSupplyFactor() -> getSupplyFactor
    java.util.List getHouses() -> getHouses
    void addHouse(com.tyrfing.games.id17.houses.House) -> addHouse
    void removeHouse(com.tyrfing.games.id17.houses.House) -> removeHouse
    void addHolding(com.tyrfing.games.id17.holdings.Holding) -> addHolding
    void addHoldingEntity(com.tyrfing.games.id17.holdings.Holding) -> addHoldingEntity
    com.tyrfing.games.id17.holdings.Holding getHolding(com.tyrlib2.graphics.renderables.Entity) -> getHolding
    com.tyrfing.games.id17.holdings.Holding getHolding(int) -> getHolding
    com.tyrfing.games.id17.holdings.Barony getBarony(int) -> getBarony
    int getCountBaronies() -> getCountBaronies
    com.tyrfing.games.id17.holdings.Holding getHoldingByFullName(java.lang.String) -> getHoldingByFullName
    int getSeason() -> getSeason
    float getWinter() -> getWinter
    java.util.List getHoldings() -> getHoldings
    void reveal() -> reveal
    void onUpdate(float) -> onUpdate
    void win() -> win
    void showResultScreen() -> showResultScreen
    void updatePlayer(int,int) -> a
    java.lang.String getDate() -> getDate
    java.lang.String toDate(float) -> toDate
    java.lang.String getSeasonName(int) -> getSeasonName
    java.lang.String getSeasonNameFull(int) -> getSeasonNameFull
    boolean isFinished() -> isFinished
    com.tyrlib2.game.Updater getUpdater() -> getUpdater
    com.tyrfing.games.id17.world.World getInstance() -> getInstance
    com.tyrfing.games.id17.world.WorldMap getMap() -> getMap
    com.tyrfing.games.id17.holdings.HoldingTypes getHoldingTypes() -> getHoldingTypes
    boolean isPaused() -> isPaused
    void pause() -> pause
    void unpause() -> unpause
    void setPlaySpeed(int) -> setPlaySpeed
    int getPlaySpeed() -> getPlaySpeed
    com.tyrfing.games.id17.gui.PlayerController getPlayerController() -> getPlayerController
    void addRaisedArmy(com.tyrfing.games.id17.war.Army) -> addRaisedArmy
    void addArmyMapEntry(com.tyrfing.games.id17.war.Army,com.tyrlib2.graphics.renderables.Entity) -> addArmyMapEntry
    int getCountRaisedArmies() -> getCountRaisedArmies
    com.tyrfing.games.id17.war.Army getRaisedArmy(int) -> getRaisedArmy
    com.tyrfing.games.id17.war.Army getArmy(com.tyrlib2.graphics.renderables.Entity) -> getArmy
    com.tyrfing.games.id17.gui.MainGUI getMainGUI() -> getMainGUI
    void removeRaisedArmy(com.tyrfing.games.id17.war.Army) -> removeRaisedArmy
    void checkProductions() -> checkProductions
    void addWaterfall(com.tyrlib2.graphics.particles.ComplexParticleSystem,com.tyrlib2.graphics.particles.ComplexParticleSystem) -> addWaterfall
    void finishBuild() -> finishBuild
    void saveAs(java.lang.String) -> saveAs
    void destroy() -> destroy
    com.tyrfing.games.id17.world.World loadFrom(java.lang.String) -> loadFrom
    void onNewConnection(com.tyrlib2.networking.Connection) -> onNewConnection
    void onConnectionLost(com.tyrlib2.networking.Connection) -> onConnectionLost
    void onReceivedData(com.tyrlib2.networking.Connection,java.lang.Object) -> onReceivedData
    com.tyrfing.games.id17.networking.WorldState getWorldState(int) -> getWorldState
    com.tyrfing.games.id17.networking.LevyState getLevyState() -> getLevyState
    com.tyrfing.games.id17.networking.HouseState getHouseState(int) -> getHouseState
    com.tyrfing.games.id17.war.Army getArmy(int) -> getArmy
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    com.tyrfing.games.id17.houses.HouseController getPlayer(int) -> getPlayer
    com.tyrfing.games.id17.networking.NetworkController getPlayer(com.tyrlib2.networking.Connection) -> getPlayer
    java.util.List getRankedHouses() -> getRankedHouses
    int getDay() -> getDay
    int getHighestPotentialHouse() -> getHighestPotentialHouse
    void setDetailVisibility(boolean) -> setDetailVisibility
    void setTerrainStrategic(boolean) -> setTerrainStrategic
    float getGoodMult(int) -> getGoodMult
    float getTravelFactor() -> getTravelFactor
    boolean areDetailsVisible() -> areDetailsVisible
    int getRandomHouse() -> getRandomHouse
    com.tyrfing.games.id17.world.MapFile getMapFile() -> getMapFile
    com.tyrfing.games.id17.world.MapFile access$0(com.tyrfing.games.id17.world.World) -> access$0
com.tyrfing.games.id17.world.World$1 -> com.tyrfing.games.id17.world.i:
    com.tyrfing.games.id17.world.World this$0 -> a
    void onUpdate(com.tyrlib2.graphics.particles.Particle,float) -> a
    com.tyrlib2.graphics.particles.Affector copy() -> a
com.tyrfing.games.id17.world.World$2 -> com.tyrfing.games.id17.world.j:
    com.tyrfing.games.id17.world.World this$0 -> a
    com.tyrlib2.networking.Network val$network -> b
    com.tyrlib2.networking.Connection val$c -> c
    void run() -> run
com.tyrfing.games.id17.world.World$3 -> com.tyrfing.games.id17.world.k:
    com.tyrfing.games.id17.world.World this$0 -> a
    com.tyrlib2.networking.Connection val$c -> b
    void run() -> run
com.tyrfing.games.id17.world.World$4 -> com.tyrfing.games.id17.world.l:
    com.tyrfing.games.id17.world.World this$0 -> a
    com.tyrfing.games.id17.networking.NetworkMessage val$nm -> b
    com.tyrlib2.networking.Connection val$c -> c
    void run() -> run
com.tyrfing.games.id17.world.World$PointRanker -> com.tyrfing.games.id17.world.m:
    com.tyrfing.games.id17.world.World this$0 -> a
    int compare(com.tyrfing.games.id17.houses.House,com.tyrfing.games.id17.houses.House) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.tyrfing.games.id17.world.WorldChunk -> com.tyrfing.games.id17.world.n:
    com.tyrfing.games.id17.world.Tile[][] blockMatrix -> i
    com.tyrfing.games.id17.world.TileMaterial[] blockTypes -> a
    com.tyrfing.games.id17.world.TileMaterial[] blockTypes_occu -> b
    java.util.List objectTypes -> c
    java.util.List mainObjectTypes -> d
    java.util.List seasonalObjectTypes -> e
    int width -> j
    int height -> k
    com.tyrlib2.graphics.scene.SceneNode parent -> l
    com.tyrlib2.math.AABB aabb -> m
    short[] DRAW_ORDER_NEW -> f
    short[] DRAW_ORDER_REV -> g
    java.util.List objects -> n
    java.util.List mainObjects -> r
    java.util.List defaultBorderCoordinates -> s
    int[] countTiles -> h
    java.util.List worldChunks -> t
    java.util.List chunkTypes -> u
    java.util.List tiles -> v
    com.tyrlib2.graphics.renderables.Entity[][] objectBuckets -> w
    int[] objectCounts -> x
    com.tyrfing.games.id17.geometry.Grass[][] grassBuckets -> y
    int[] grassCounts -> z
    com.tyrlib2.graphics.renderer.Renderable[] worldChunkBuckets -> A
    com.tyrfing.games.id17.world.Border border -> B
    com.tyrlib2.graphics.renderables.Entity castleEntity -> C
    com.tyrlib2.graphics.renderer.ParamValuef ownerValue -> D
    int insertionID -> E
    com.tyrlib2.graphics.renderer.VertexLayout VERTEX_LAYOUT -> F
    void setBlock(int,int,com.tyrfing.games.id17.world.Tile) -> a
    void addObject(int,int,int) -> a
    float getHeight(int,int) -> a
    void build() -> a
    void addDefaultBorderBlock(int,int,com.tyrlib2.util.Direction4) -> a
    com.tyrlib2.graphics.renderer.Renderable getWorldChunkRenderable(int) -> b
    void sInit() -> r_
    void init() -> c
    com.tyrfing.games.id17.world.WorldChunk createFromMapFile(com.tyrfing.games.id17.world.MapFile,com.tyrlib2.graphics.scene.SceneNode,com.tyrfing.games.id17.holdings.BaronyWindow) -> a
    void render(float[]) -> a
    com.tyrlib2.math.AABB createUntransformedBoundingBox() -> d
    int getWidth() -> g
    int getHeight() -> h
    com.tyrlib2.graphics.renderables.Entity getObject(int) -> c
    int getCountObjects() -> i
    com.tyrlib2.graphics.renderables.Entity getCastleEntity() -> j
    com.tyrfing.games.id17.world.Border getBorder() -> k
    void setOccupiedTextures(boolean) -> a
    void fillInObjects(int) -> d
    void fillInChunks(int) -> e
    void fillInGrass(int) -> f
    void setOwnerValue(float) -> a
    float getOwnerValue() -> l
    void renderShadow(float[]) -> b
    int getCountGrassBuckets() -> m
    int getCountGrasses(int) -> g
    com.tyrfing.games.id17.geometry.Grass getGrass(int,int) -> b
    int getCountTiles() -> n
    com.tyrfing.games.id17.world.Tile getTile(int) -> h
    void setInsertionID(int) -> a_
    int getInsertionID() -> e
    void destroy() -> f
    com.tyrlib2.graphics.renderables.Entity getMainObject(int) -> i
com.tyrfing.games.id17.world.WorldChunk$1 -> com.tyrfing.games.id17.world.o:
    com.tyrfing.games.id17.world.WorldChunk this$0 -> a
    void render(float[]) -> a
com.tyrfing.games.id17.world.WorldMap -> com.tyrfing.games.id17.world.WorldMap:
    long serialVersionUID -> serialVersionUID
    int HUGE_DISTANCE -> HUGE_DISTANCE
    int width -> width
    int height -> height
    com.tyrfing.games.id17.houses.House[][] houseMap -> a
    com.tyrfing.games.id17.holdings.Barony[][] baronyMap -> b
    com.tyrfing.games.id17.world.Tile[][] tileMap -> tileMap
    int[][] distances -> distances
    int[] dynDistances -> c
    int[] fDistances -> d
    java.lang.Integer[] pre -> e
    boolean[][] areNeighboursBaronies -> areNeighboursBaronies
    com.tyrfing.games.id17.holdings.Barony[][] neighboursBaronies -> neighboursBaronies
    int[][] neihboursHoldingsIndex -> neihboursHoldingsIndex
    com.tyrfing.games.id17.holdings.Holding[][] neihboursHoldings -> neihboursHoldings
    boolean built -> built
    java.util.PriorityQueue openList -> f
    java.util.Set closedList -> g
    com.tyrfing.games.id17.world.FogMap fogMap -> h
    int UNEXPLORED_FACTOR -> UNEXPLORED_FACTOR
    int[] $SWITCH_TABLE$com$tyrlib2$util$Direction4 -> i
    void createFogmap() -> createFogmap
    void createArrays() -> createArrays
    com.tyrfing.games.id17.world.FogMap getFogMap() -> getFogMap
    com.tyrfing.games.id17.holdings.Barony getBarony(int,int) -> getBarony
    com.tyrfing.games.id17.houses.House getHouse(int,int) -> getHouse
    java.util.List getVisibleBorders(com.tyrfing.games.id17.holdings.Barony) -> getVisibleBorders
    void insertHouse(com.tyrfing.games.id17.houses.House) -> insertHouse
    void changeOwner(com.tyrfing.games.id17.holdings.Barony) -> changeOwner
    void constructEdgeList() -> constructEdgeList
    void fillDistances(com.tyrfing.games.id17.holdings.Holding,com.tyrfing.games.id17.holdings.Barony,com.tyrfing.games.id17.holdings.Barony[],com.tyrlib2.math.AABB[]) -> a
    void constructShortestPaths() -> constructShortestPaths
    java.util.List getPath(com.tyrfing.games.id17.houses.House,int,int) -> getPath
    void expandNode(com.tyrfing.games.id17.houses.House,java.lang.Integer,int) -> a
    int getDistance(int,int) -> getDistance
    boolean isNeighbour(com.tyrfing.games.id17.holdings.Barony,com.tyrfing.games.id17.holdings.Barony) -> isNeighbour
    com.tyrfing.games.id17.holdings.Barony[] getNeighbours(com.tyrfing.games.id17.holdings.Barony) -> getNeighbours
    com.tyrfing.games.id17.holdings.Holding[] getNeighboursHolding(com.tyrfing.games.id17.holdings.Holding) -> getNeighboursHolding
    void constructWaterfalls() -> constructWaterfalls
    void createWaterfall(int,int,com.tyrlib2.util.Direction4) -> createWaterfall
    void adjustEmitter(com.tyrlib2.graphics.particles.Emitter,com.tyrlib2.util.Direction4) -> a
    boolean isBuilt() -> isBuilt
    void finishBuild() -> finishBuild
    float getHeight(int,int) -> getHeight
    void constructWaterFlow() -> constructWaterFlow
    com.tyrfing.games.id17.world.Tile getNeighbour(int,int,int) -> getNeighbour
    com.tyrfing.games.id17.world.Tile getTile(int,int) -> getTile
    int[] access$0(com.tyrfing.games.id17.world.WorldMap) -> access$0
    int[] $SWITCH_TABLE$com$tyrlib2$util$Direction4() -> $SWITCH_TABLE$com$tyrlib2$util$Direction4
com.tyrfing.games.id17.world.WorldMap$DistanceComparator -> com.tyrfing.games.id17.world.p:
    com.tyrfing.games.id17.world.WorldMap this$0 -> a
    int compare(java.lang.Integer,java.lang.Integer) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.tyrfing.games.id17.world.WorldObject -> com.tyrfing.games.id17.world.q:
    com.tyrlib2.graphics.renderables.Entity entity -> a
    com.tyrlib2.math.AABB boundingBox -> b
    com.tyrlib2.math.Vector3 extentsVector -> c
    com.tyrlib2.math.AABB getBoundingBox() -> s_
    com.tyrlib2.graphics.renderables.Entity getEntity() -> t_
com.tyrlib2.bitmap.AndroidCanvas -> com.tyrlib2.bitmap.a:
    android.graphics.Canvas canvas -> a
    com.tyrlib2.bitmap.AndroidPaint paint -> b
    void drawText(char[],int,int,float,float,com.tyrlib2.bitmap.IPaint) -> a
    void drawText(java.lang.String,float,float,com.tyrlib2.bitmap.IPaint) -> a
    void setBitmap(com.tyrlib2.bitmap.IDrawableBitmap) -> a
    void drawArc(com.tyrlib2.math.Rect,float,float,boolean,com.tyrlib2.bitmap.IPaint) -> a
    void setRGB(int,int,com.tyrlib2.util.Color) -> a
com.tyrlib2.bitmap.AndroidDrawableBitmap -> com.tyrlib2.bitmap.b:
    android.graphics.Bitmap bitmap -> a
    android.graphics.Bitmap getBitmap() -> a
    void eraseColor(int) -> a
    int toTexture() -> b
    com.tyrlib2.files.IBitmap toBitmap() -> c
com.tyrlib2.bitmap.AndroidFontMetrics -> com.tyrlib2.bitmap.c:
    android.graphics.Paint$FontMetrics fm -> a
com.tyrlib2.bitmap.AndroidPaint -> com.tyrlib2.bitmap.d:
    android.graphics.Paint paint -> a
    int[] $SWITCH_TABLE$com$tyrlib2$bitmap$IPaint$TextAlign -> b
    void setAntiAlias(boolean) -> a
    void setTextSize(int) -> a
    void setColor(int) -> b
    void setTypeface(com.tyrlib2.bitmap.ITypeface) -> a
    com.tyrlib2.bitmap.IFontMetrics getFontMetrics() -> a
    void getTextWidths(char[],int,int,float[]) -> a
    void setTextAlign(com.tyrlib2.bitmap.IPaint$TextAlign) -> a
    void setColor(com.tyrlib2.util.Color) -> a
    int[] $SWITCH_TABLE$com$tyrlib2$bitmap$IPaint$TextAlign() -> b
com.tyrlib2.bitmap.AndroidTypeface -> com.tyrlib2.bitmap.e:
    android.graphics.Typeface tf -> a
com.tyrlib2.bitmap.ICanvas -> com.tyrlib2.bitmap.f:
    void drawText(char[],int,int,float,float,com.tyrlib2.bitmap.IPaint) -> a
    void drawText(java.lang.String,float,float,com.tyrlib2.bitmap.IPaint) -> a
    void setBitmap(com.tyrlib2.bitmap.IDrawableBitmap) -> a
    void drawArc(com.tyrlib2.math.Rect,float,float,boolean,com.tyrlib2.bitmap.IPaint) -> a
    void setRGB(int,int,com.tyrlib2.util.Color) -> a
com.tyrlib2.bitmap.IDrawableBitmap -> com.tyrlib2.bitmap.g:
    void eraseColor(int) -> a
    int toTexture() -> b
    com.tyrlib2.files.IBitmap toBitmap() -> c
com.tyrlib2.bitmap.IFontMetrics -> com.tyrlib2.bitmap.h:
    float top -> b
    float bottom -> c
    float ascent -> d
    float descent -> e
com.tyrlib2.bitmap.IPaint -> com.tyrlib2.bitmap.IPaint:
    void setAntiAlias(boolean) -> a
    void setTextSize(int) -> a
    void setColor(int) -> b
    void setColor(com.tyrlib2.util.Color) -> a
    void setTypeface(com.tyrlib2.bitmap.ITypeface) -> a
    com.tyrlib2.bitmap.IFontMetrics getFontMetrics() -> a
    void getTextWidths(char[],int,int,float[]) -> a
    void setTextAlign(com.tyrlib2.bitmap.IPaint$TextAlign) -> a
com.tyrlib2.bitmap.IPaint$TextAlign -> com.tyrlib2.bitmap.IPaint$TextAlign:
    com.tyrlib2.bitmap.IPaint$TextAlign LEFT -> LEFT
    com.tyrlib2.bitmap.IPaint$TextAlign CENTER -> CENTER
    com.tyrlib2.bitmap.IPaint$TextAlign RIGHT -> RIGHT
    com.tyrlib2.bitmap.IPaint$TextAlign[] ENUM$VALUES -> a
    com.tyrlib2.bitmap.IPaint$TextAlign[] values() -> values
    com.tyrlib2.bitmap.IPaint$TextAlign valueOf(java.lang.String) -> valueOf
com.tyrlib2.bitmap.ITypeface -> com.tyrlib2.bitmap.i:
com.tyrlib2.files.AndroidBitmap -> com.tyrlib2.a.a:
    android.graphics.Bitmap bitmap -> a
    int handle -> b
    int[] pixels -> c
    int width -> d
    int height -> e
    void loadPixels() -> f
    int getWidth() -> a
    int getHeight() -> b
    void bind() -> c
    void recycle() -> d
    int getHandle() -> e
    void setHanlde(int) -> a
    int getRGB(int,int) -> a
com.tyrlib2.files.FileReader -> com.tyrlib2.a.b:
    java.lang.String readRawFile(int) -> a
    boolean fileExists(android.content.Context,java.lang.String) -> a
com.tyrlib2.files.IBitmap -> com.tyrlib2.a.c:
    int getWidth() -> a
    int getHeight() -> b
    void bind() -> c
    void recycle() -> d
    int getHandle() -> e
    int getRGB(int,int) -> a
com.tyrlib2.game.GameThread -> com.tyrlib2.game.a:
com.tyrlib2.game.ILink -> com.tyrlib2.game.b:
    void onCall() -> a
com.tyrlib2.game.IUpdateable -> com.tyrlib2.game.c:
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
com.tyrlib2.game.LinkManager -> com.tyrlib2.game.d:
    java.util.Map linkMap -> a
    com.tyrlib2.game.LinkManager instance -> b
    com.tyrlib2.game.LinkManager getInstance() -> a
    void registerLink(com.tyrlib2.game.ILink,java.lang.String) -> a
    void call(java.lang.String) -> a
com.tyrlib2.game.Stats -> com.tyrlib2.game.Stats:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.hash.TIntFloatHashMap stats -> stats
    void setStat(int,float) -> setStat
    void changeStat(int,float) -> changeStat
    float getStat(int) -> getStat
    boolean hasStat(int) -> hasStat
    void setStats(com.tyrlib2.game.Stats) -> setStats
    java.lang.String toString(char,char) -> toString
    com.tyrlib2.game.Stats copy() -> copy
    void changeStats(com.tyrlib2.game.Stats) -> changeStats
com.tyrlib2.game.Updater -> com.tyrlib2.game.Updater:
    long serialVersionUID -> serialVersionUID
    boolean pause -> pause
    java.util.List queue -> queue
    int countItems -> countItems
    void addItem(com.tyrlib2.game.IUpdateable) -> addItem
    void removeItem(com.tyrlib2.game.IUpdateable) -> removeItem
    void clear() -> clear
    boolean hasItem(com.tyrlib2.game.IUpdateable) -> hasItem
    void pause() -> pause
    void unPause() -> unPause
    boolean isPaused() -> isPaused
    void onSurfaceCreated() -> onSurfaceCreated
    void onSurfaceChanged() -> onSurfaceChanged
    void onFrameRendered(float) -> onFrameRendered
    void removeItem(int) -> a
com.tyrlib2.graphics.animation.Animation -> com.tyrlib2.graphics.animation.a:
    java.lang.String name -> a
    boolean playing -> b
    float duration -> c
    float animTime -> d
    java.util.List animationFrames -> e
    int currentFrame -> f
    com.tyrlib2.graphics.animation.Skeleton skeleton -> g
    com.tyrlib2.math.Quaternion interpolant -> h
    com.tyrlib2.math.Vector3 tmp -> i
    void play() -> a
    void stop() -> b
    void addAllFrames(java.util.List) -> a
    void addFrame(com.tyrlib2.graphics.animation.AnimationFrame) -> a
    void onUpdate(float) -> onUpdate
    com.tyrlib2.graphics.animation.AnimationFrame getCurrentFrame() -> c
    boolean isFinished() -> isFinished
com.tyrlib2.graphics.animation.AnimationFrame -> com.tyrlib2.graphics.animation.b:
    float time -> a
    com.tyrlib2.math.Vector3[] bonePos -> b
    com.tyrlib2.math.Quaternion[] boneRot -> c
com.tyrlib2.graphics.animation.Bone -> com.tyrlib2.graphics.animation.Bone:
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    com.tyrlib2.math.Quaternion initRot -> initRot
    com.tyrlib2.math.Quaternion initRotInverse -> initRotInverse
    com.tyrlib2.math.Vector3 initPos -> initPos
    float[] bindPos -> bindPos
    float[] localBindPos -> localBindPos
    float[] inverseBindPos -> inverseBindPos
    float[] tmpMatrix -> tmpMatrix
    float[] translation -> a
    com.tyrlib2.math.Quaternion tmp -> tmp
    java.lang.String getName() -> getName
    void setPose(com.tyrlib2.math.Vector3,com.tyrlib2.math.Quaternion) -> setPose
    void updateAll(com.tyrlib2.math.Quaternion,com.tyrlib2.math.Vector3,float[]) -> updateAll
    com.tyrlib2.math.Vector3 getInitPos() -> getInitPos
    com.tyrlib2.math.Quaternion getInitRot() -> getInitRot
com.tyrlib2.graphics.animation.Skeleton -> com.tyrlib2.graphics.animation.c:
    java.util.List animations -> d
    java.util.Map animationsMap -> e
    java.util.List bones -> a
    float[] boneData -> b
    com.tyrlib2.graphics.scene.SceneNode rootNode -> c
    void addAnimation(com.tyrlib2.graphics.animation.Animation) -> a
    com.tyrlib2.graphics.animation.Animation getAnimation(java.lang.String) -> a
    boolean hasAnimation(java.lang.String) -> b
    void addBone(com.tyrlib2.graphics.animation.Bone) -> a
    com.tyrlib2.graphics.animation.Bone getBone(int) -> a
    void onUpdate(float) -> onUpdate
    float[] getBoneData() -> a
    void updateBoneData() -> c
    boolean isFinished() -> isFinished
    int getCountBones() -> b
    void passData(float[],int,com.tyrlib2.graphics.renderer.Material,com.tyrlib2.graphics.renderer.Mesh) -> a
    void passData(float[],int,float,com.tyrlib2.graphics.renderer.Material,com.tyrlib2.graphics.renderer.Mesh) -> a
    void passShadowData(float[],int,com.tyrlib2.graphics.renderer.Material,com.tyrlib2.graphics.renderer.Mesh) -> b
    void passDataIntern(float[],int,float,com.tyrlib2.graphics.renderer.Material,com.tyrlib2.graphics.renderer.Mesh,com.tyrlib2.graphics.renderer.Program) -> a
com.tyrlib2.graphics.lighting.DirectionalLight -> com.tyrlib2.graphics.lighting.a:
    float[] modelMatrix -> b
    com.tyrlib2.math.Vector3 lightDirection -> c
    float[] lightDirectionVector -> d
    com.tyrlib2.math.Vector3 DEFAULT_LIGHT_DIRECTION -> a
    float[] rotMatrix -> e
    float intensity -> f
    void attachTo(com.tyrlib2.graphics.scene.SceneNode) -> a
    void setLightDirection(com.tyrlib2.math.Vector3) -> a
    float[] getLightVector() -> a
    void update(float[]) -> a_
    void setIntensity(float) -> a
com.tyrlib2.graphics.lighting.Light -> com.tyrlib2.graphics.lighting.Light:
    com.tyrlib2.graphics.lighting.Light$Type type -> a
    float[] getLightVector() -> a
    void update(float[]) -> a_
com.tyrlib2.graphics.lighting.Light$Type -> com.tyrlib2.graphics.lighting.Light$Type:
    com.tyrlib2.graphics.lighting.Light$Type POINT_LIGHT -> POINT_LIGHT
    com.tyrlib2.graphics.lighting.Light$Type DIRECTIONAL_LIGHT -> DIRECTIONAL_LIGHT
    com.tyrlib2.graphics.lighting.Light$Type[] ENUM$VALUES -> a
    com.tyrlib2.graphics.lighting.Light$Type[] values() -> values
    com.tyrlib2.graphics.lighting.Light$Type valueOf(java.lang.String) -> valueOf
com.tyrlib2.graphics.lighting.LightingType -> com.tyrlib2.graphics.lighting.LightingType:
    com.tyrlib2.graphics.lighting.LightingType PER_VERTEX -> PER_VERTEX
    com.tyrlib2.graphics.lighting.LightingType PER_PIXEL -> PER_PIXEL
    com.tyrlib2.graphics.lighting.LightingType[] ENUM$VALUES -> a
    com.tyrlib2.graphics.lighting.LightingType[] values() -> values
    com.tyrlib2.graphics.lighting.LightingType valueOf(java.lang.String) -> valueOf
com.tyrlib2.graphics.lighting.PointLight -> com.tyrlib2.graphics.lighting.b:
    float[] modelSpaceVector -> a
    float[] worldSpaceVector -> b
    float[] eyeSpaceVector -> c
    com.tyrlib2.graphics.renderer.Material material -> d
    float[] mvpMatrix -> e
    float[] modelMatrix -> f
    int insertionID -> g
    void renderShadow(float[]) -> b
    void render(float[]) -> a
    void attachTo(com.tyrlib2.graphics.scene.SceneNode) -> a
    void update(float[]) -> a_
    float[] getLightVector() -> a
    void setInsertionID(int) -> a_
    int getInsertionID() -> e
    void destroy() -> f
com.tyrlib2.graphics.materials.ColoredMaterial -> com.tyrlib2.graphics.a.a:
    int colorHandle -> a
    int alphaHandle -> b
    com.tyrlib2.util.Color[] colors -> c
    int colorOffset -> d
    int colorSize -> e
    com.tyrlib2.util.Color color -> f
    void updateInfos() -> e
    void render(com.tyrlib2.graphics.renderer.Mesh,float[]) -> a
    com.tyrlib2.util.Color[] getColors() -> b
    void setAlpha(float) -> a
    float getAlpha() -> c
    void setColor(com.tyrlib2.util.Color) -> a
    int getColorOffset() -> d
    float[] createVertexData(com.tyrlib2.math.Vector3[],short[]) -> a
com.tyrlib2.graphics.materials.DefaultMaterial3 -> com.tyrlib2.graphics.a.b:
    com.tyrlib2.util.Color[] colors -> v
    int normalHandle -> a
    int textureUniformHandle -> w
    int textureCoordinateHandle -> x
    int shadowTextureHandle -> y
    int depthMVPHandle -> z
    java.lang.String textureName -> A
    com.tyrlib2.graphics.renderer.Texture texture -> B
    float repeatX -> b
    float repeatY -> c
    float[] shadowMVP -> C
    boolean transparent -> D
    boolean wasAnimated -> E
    int blendMode -> F
    int modelMatrixHandle -> G
    com.tyrlib2.graphics.renderer.VertexLayout DEFAULT_LAYOUT -> d
    com.tyrlib2.graphics.renderer.VertexLayout BAKED_LIGHTING_LAYOUT -> e
    float[] mvpMatrix -> H
    void setup(java.lang.String,float,float,com.tyrlib2.util.Color[]) -> a
    void setLighted(boolean) -> b
    void updateHandles() -> a
    void render(com.tyrlib2.graphics.renderer.Mesh,float[]) -> a
    void setBlendMode(int) -> b
    void passMesh(com.tyrlib2.graphics.renderer.Mesh) -> a
    void passTexture(int) -> a
    void setTransparent(boolean) -> c
    float[] createVertexData(com.tyrlib2.math.Vector3[],float[],short[]) -> a
    float[] createVertexData(com.tyrlib2.math.Vector3[],short[]) -> a
    java.lang.String getTextureName() -> b
    int getNormalOffset() -> c
    int getUVOffset() -> d
    int getUVSize() -> e
    int getNormalSize() -> f
    com.tyrlib2.graphics.renderer.Material copy() -> g
    com.tyrlib2.graphics.renderer.Material copy(boolean) -> d
    void setTexture(com.tyrlib2.graphics.renderer.Texture,java.lang.String) -> a
    void setTexture(java.lang.String) -> a
    boolean isAnimated() -> h
    void setVertexLayout(com.tyrlib2.graphics.renderer.VertexLayout) -> a
com.tyrlib2.graphics.materials.LightedMaterial -> com.tyrlib2.graphics.a.c:
    int lightPosHandle -> f
    int normalMatrixHandle -> g
    int ambientHandle -> h
    com.tyrlib2.util.Color color -> i
    com.tyrlib2.util.Color DEFAULT_AMBIENT -> a
    void renderLight(int) -> c
    void setColor(com.tyrlib2.util.Color) -> a
com.tyrlib2.graphics.materials.OutlineMaterial -> com.tyrlib2.graphics.a.d:
    int colorHandle -> a
    com.tyrlib2.util.Color color -> b
    int normalHandle -> c
    void setup(com.tyrlib2.util.Color) -> a
    void render(com.tyrlib2.graphics.renderer.Mesh,float[]) -> a
    void passMesh(com.tyrlib2.graphics.renderer.Mesh) -> a
    com.tyrlib2.graphics.renderer.Material copy() -> g
com.tyrlib2.graphics.materials.ParticleMaterial -> com.tyrlib2.graphics.a.e:
    java.lang.String textureName -> a
    com.tyrlib2.graphics.renderer.Texture texture -> b
    com.tyrlib2.util.Color color -> c
    com.tyrlib2.graphics.renderer.TextureRegion region -> d
    boolean blending -> e
    void render(com.tyrlib2.graphics.renderer.Mesh,float[]) -> a
    void setBlending(boolean) -> a
    float getAlpha() -> c
    void setAlpha(float) -> a
    com.tyrlib2.util.Color getColor() -> b
    void setColor(com.tyrlib2.util.Color) -> a
    com.tyrlib2.graphics.renderer.Material copy() -> g
    void setTexture(com.tyrlib2.graphics.renderer.Texture) -> a
    com.tyrlib2.graphics.renderer.TextureRegion getRegion() -> d
    void setRegion(com.tyrlib2.graphics.renderer.TextureRegion) -> a
com.tyrlib2.graphics.materials.PointLightMaterial -> com.tyrlib2.graphics.a.f:
com.tyrlib2.graphics.materials.TexturedMaterial -> com.tyrlib2.graphics.a.g:
    float alpha -> a
    com.tyrlib2.graphics.renderer.Texture texture -> f
    com.tyrlib2.util.Color color -> g
    com.tyrlib2.graphics.renderer.TextureRegion texRegion -> h
    int sizeHandle -> i
    int minHandle -> v
    int alphaHandle -> b
    int textureCoordinateHandle -> c
    int colorHandle -> d
    int textureUniformHandle -> e
    float getAlpha() -> c
    void setAlpha(float) -> a
    void render(com.tyrlib2.graphics.renderer.Mesh,float[]) -> a
    void setProgram(com.tyrlib2.graphics.renderer.Program) -> a
    void setTexture(com.tyrlib2.graphics.renderer.Texture,com.tyrlib2.graphics.renderer.TextureRegion) -> a
    com.tyrlib2.graphics.renderer.Texture getTexture() -> b
    void setColor(com.tyrlib2.util.Color) -> a
com.tyrlib2.graphics.particles.Affector -> com.tyrlib2.graphics.b.a:
    com.tyrlib2.graphics.particles.ParticleSystem system -> b
    float timeMin -> c
    float timeMax -> d
    void setParticleSystem(com.tyrlib2.graphics.particles.ParticleSystem) -> a
    void onUpdate(com.tyrlib2.graphics.particles.Particle,float) -> a
    void setLifeTimeMin(float) -> a
    void setLifeTimeMax(float) -> b
    com.tyrlib2.graphics.particles.Affector copy() -> a
com.tyrlib2.graphics.particles.BasicParticleFactory -> com.tyrlib2.graphics.b.b:
    float lifeTime -> a
    float size -> b
    com.tyrlib2.graphics.materials.ParticleMaterial material -> c
    com.tyrlib2.graphics.particles.Particle create(com.tyrlib2.graphics.particles.Particle) -> a
    com.tyrlib2.graphics.materials.ParticleMaterial getMaterial() -> a
    void setMaterial(com.tyrlib2.graphics.materials.ParticleMaterial) -> a
com.tyrlib2.graphics.particles.ColorChanger -> com.tyrlib2.graphics.b.c:
    com.tyrlib2.util.Color colorChange -> a
    void onUpdate(com.tyrlib2.graphics.particles.Particle,float) -> a
    com.tyrlib2.graphics.particles.Affector copy() -> a
    void setColorChange(com.tyrlib2.util.Color) -> a
com.tyrlib2.graphics.particles.ComplexParticleSystem -> com.tyrlib2.graphics.b.d:
    com.tyrlib2.graphics.particles.Affector[] affectors -> r
    int countAffectors -> s
    java.util.List emitters -> t
    java.util.List particleBatches -> u
    com.tyrlib2.math.AABB boundingBox -> v
    boolean disableZWriting -> w
    int[] buffers -> x
    boolean dynamic -> y
    boolean fixInsertionID -> z
    int insertionID -> A
    boolean staticUpdated -> B
    void setZWritingDisabled(boolean) -> a
    void onUpdate(float) -> onUpdate
    void checkBoundingBox(com.tyrlib2.graphics.particles.Particle) -> a
    void useAffectors(com.tyrlib2.graphics.particles.Particle,float) -> a
    void addParticle(com.tyrlib2.graphics.particles.Particle) -> b
    void removeParticle(int,com.tyrlib2.graphics.materials.ParticleMaterial) -> a
    void addEmitter(com.tyrlib2.graphics.particles.Emitter) -> a
    com.tyrlib2.graphics.particles.Emitter getEmitter(int) -> b
    void addAffector(com.tyrlib2.graphics.particles.Affector) -> a
    void attachTo(com.tyrlib2.graphics.scene.SceneNode) -> a
    com.tyrlib2.graphics.scene.SceneNode detach() -> b
    void renderShadow(float[]) -> b
    void render(float[]) -> a
    com.tyrlib2.graphics.particles.ParticleSystem copy() -> c
    com.tyrlib2.math.AABB getBoundingBox() -> s_
    void setDynamic(boolean) -> b
    void setFixInsertionID(boolean) -> c
    void setInsertionID(int) -> a_
    int getInsertionID() -> e
    void destroy() -> f
com.tyrlib2.graphics.particles.Emitter -> com.tyrlib2.graphics.b.e:
    float interval -> a
    int amount -> b
    com.tyrlib2.graphics.particles.IParticleFactory particleFactory -> c
    com.tyrlib2.graphics.particles.ParticleSystem system -> d
    com.tyrlib2.math.Vector3 velocity -> e
    com.tyrlib2.math.Vector3 randomVelocity -> f
    com.tyrlib2.math.Vector3 randomPos -> g
    com.tyrlib2.math.Vector3 movementVelocity -> h
    boolean pause -> i
    com.tyrlib2.math.Vector3 emitterPos -> j
    com.tyrlib2.math.Vector3 rotatedVelocity -> k
    com.tyrlib2.math.Vector3 rotatedRandomVelocity -> l
    java.util.Random random -> m
    com.tyrlib2.math.Vector3 oldParentPos -> n
    boolean firstEmit -> o
    float passedTime -> r
    void onUpdate(float) -> onUpdate
    void emit() -> a
    boolean isFinished() -> isFinished
    void setParticleSystem(com.tyrlib2.graphics.particles.ParticleSystem) -> a
    void setInterval(float) -> a
    void setAmount(int) -> a
    void setVelocity(com.tyrlib2.math.Vector3) -> a
    com.tyrlib2.math.Vector3 getVelocity() -> c
    void setRandomVelocity(com.tyrlib2.math.Vector3) -> b
    com.tyrlib2.math.Vector3 getRandomVelocity() -> d
    void setRandomPos(com.tyrlib2.math.Vector3) -> c
    com.tyrlib2.math.Vector3 getRandomPos() -> e
    com.tyrlib2.graphics.particles.IParticleFactory getFactory() -> f
    com.tyrlib2.graphics.particles.Emitter copy() -> g
com.tyrlib2.graphics.particles.ForceAffector -> com.tyrlib2.graphics.b.f:
    com.tyrlib2.math.Vector3 force -> a
    float radialDependency -> e
    float power -> f
    void onUpdate(com.tyrlib2.graphics.particles.Particle,float) -> a
    com.tyrlib2.graphics.particles.Affector copy() -> a
    void setForce(com.tyrlib2.math.Vector3) -> a
    void setRadialDependency(float) -> c
    void setPower(float) -> d
com.tyrlib2.graphics.particles.IParticleFactory -> com.tyrlib2.graphics.b.g:
    com.tyrlib2.graphics.particles.Particle create(com.tyrlib2.graphics.particles.Particle) -> a
com.tyrlib2.graphics.particles.IParticleSystemFactory -> com.tyrlib2.graphics.b.h:
    com.tyrlib2.graphics.particles.ParticleSystem create() -> a
com.tyrlib2.graphics.particles.Particle -> com.tyrlib2.graphics.b.i:
    com.tyrlib2.graphics.materials.ParticleMaterial material -> a
    com.tyrlib2.math.Vector3 pos -> b
    com.tyrlib2.math.Vector3 up -> c
    com.tyrlib2.math.Vector3 right -> d
    com.tyrlib2.math.Quaternion rotationUp -> e
    com.tyrlib2.math.Vector3 velocity -> f
    com.tyrlib2.math.Vector3 acceleration -> g
    com.tyrlib2.util.Color color -> h
    float inertia -> i
    float rotation -> j
    float lifeTime -> k
    float passedTime -> l
    float size -> m
    float scaleSpeed -> n
    int dataIndex -> o
    com.tyrlib2.util.FloatArray floatArray -> p
    com.tyrlib2.graphics.particles.ParticleSystem system -> q
    void setScaleSpeed(float) -> a
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
    void setMaterial(com.tyrlib2.graphics.materials.ParticleMaterial) -> a
    com.tyrlib2.graphics.materials.ParticleMaterial getMaterial() -> a
    void setLifeTime(float) -> b
    com.tyrlib2.math.Vector3 getPos() -> b
    void setPos(com.tyrlib2.math.Vector3) -> a
    void updateCorners() -> c
    void setVelocity(com.tyrlib2.math.Vector3) -> b
com.tyrlib2.graphics.particles.ParticleSystem -> com.tyrlib2.graphics.b.j:
    float[] mvpMatrix -> a
    float[] modelMatrix -> b
    short[] DRAW_ORDER -> c
    java.nio.FloatBuffer buffer -> d
    java.nio.ShortBuffer buffer2 -> e
    java.util.Stack deadParticles -> f
    int maxParticles -> g
    int countParticles -> h
    int steps -> i
    boolean visible -> j
    boolean scale -> k
    float minScale -> l
    float maxScale -> m
    float maxDistance -> n
    void setMaxParticles(int) -> c
    void setScalable(float,float,float) -> a
    boolean allowsMoreParticles() -> d
    com.tyrlib2.graphics.particles.Particle requestDeadParticle() -> g
    void addParticle(com.tyrlib2.graphics.particles.Particle) -> b
    com.tyrlib2.graphics.particles.ParticleSystem copy() -> c
    boolean isFinished() -> isFinished
    void addEmitter(com.tyrlib2.graphics.particles.Emitter) -> a
    com.tyrlib2.graphics.particles.Emitter getEmitter(int) -> b
    void addAffector(com.tyrlib2.graphics.particles.Affector) -> a
    void destroy() -> f
com.tyrlib2.graphics.particles.ParticleSystem$ParticleBatch -> com.tyrlib2.graphics.b.k:
    com.tyrlib2.util.FloatArray particleData -> a
    java.util.List particles -> b
    com.tyrlib2.graphics.materials.ParticleMaterial material -> c
    int colorHandle -> d
    int texHandle -> e
com.tyrlib2.graphics.particles.RotationChanger -> com.tyrlib2.graphics.b.l:
    float rotationChange -> a
    void onUpdate(com.tyrlib2.graphics.particles.Particle,float) -> a
    com.tyrlib2.graphics.particles.Affector copy() -> a
    void setSizeChange(float) -> c
com.tyrlib2.graphics.particles.SimpleParticleSystem -> com.tyrlib2.graphics.b.m:
    com.tyrlib2.graphics.particles.Affector affector -> r
    com.tyrlib2.graphics.particles.Emitter emitter -> s
    com.tyrlib2.graphics.particles.ParticleSystem$ParticleBatch particleBatch -> t
    com.tyrlib2.math.AABB boundingBox -> u
    int colorHandle -> v
    int insertionID -> w
    void onUpdate(float) -> onUpdate
    void checkBoundingBox(com.tyrlib2.graphics.particles.Particle) -> a
    void addParticle(com.tyrlib2.graphics.particles.Particle) -> b
    void removeParticle(int,com.tyrlib2.graphics.materials.ParticleMaterial) -> a
    void addEmitter(com.tyrlib2.graphics.particles.Emitter) -> a
    com.tyrlib2.graphics.particles.Emitter getEmitter(int) -> b
    void addAffector(com.tyrlib2.graphics.particles.Affector) -> a
    void attachTo(com.tyrlib2.graphics.scene.SceneNode) -> a
    com.tyrlib2.graphics.scene.SceneNode detach() -> b
    void renderShadow(float[]) -> b
    void render(float[]) -> a
    com.tyrlib2.graphics.particles.ParticleSystem copy() -> c
    com.tyrlib2.math.AABB getBoundingBox() -> s_
    void setInsertionID(int) -> a_
    int getInsertionID() -> e
com.tyrlib2.graphics.particles.SizeChanger -> com.tyrlib2.graphics.b.n:
    float sizeChange -> a
    void onUpdate(com.tyrlib2.graphics.particles.Particle,float) -> a
    com.tyrlib2.graphics.particles.Affector copy() -> a
    void setSizeChange(float) -> c
com.tyrlib2.graphics.particles.XMLAffectorFactory -> com.tyrlib2.graphics.b.o:
    com.tyrlib2.graphics.particles.Affector prototype -> a
    com.tyrlib2.graphics.particles.Affector create() -> a
com.tyrlib2.graphics.particles.XMLEmitterFactory -> com.tyrlib2.graphics.b.p:
    org.xmlpull.v1.XmlPullParser parser -> a
    java.util.Map factories -> b
    com.tyrlib2.graphics.particles.Emitter prototype -> c
    void parse() -> b
    com.tyrlib2.graphics.particles.Emitter create() -> a
com.tyrlib2.graphics.particles.XMLParticleSystemFactory -> com.tyrlib2.graphics.b.q:
    com.tyrlib2.graphics.particles.ParticleSystem prototype -> a
    java.util.Map particleFactories -> b
    org.xmlpull.v1.XmlPullParser parser -> c
    void parse() -> b
    com.tyrlib2.graphics.particles.ParticleSystem create() -> a
    void parseParticleSystem() -> c
    void parseFactories() -> d
    void parseEmitters() -> e
    void parseAffectors() -> f
com.tyrlib2.graphics.renderables.BoundingBox -> com.tyrlib2.graphics.renderables.a:
    short[] DRAW_ORDER -> a
    float[] unitMatrix -> h
    com.tyrlib2.math.AABB boundingBox -> b
    void render(float[]) -> a
    com.tyrlib2.math.AABB getBoundingBox() -> s_
    void setBoundingBox(com.tyrlib2.math.AABB) -> a
com.tyrlib2.graphics.renderables.Box -> com.tyrlib2.graphics.renderables.b:
    short[] DRAW_ORDER -> a
    void createBox(com.tyrlib2.graphics.renderer.Material,com.tyrlib2.math.Vector3,com.tyrlib2.math.Vector3) -> a
com.tyrlib2.graphics.renderables.Entity -> com.tyrlib2.graphics.renderables.c:
    java.util.Map subEntities -> c
    java.util.List subEntityList -> d
    com.tyrlib2.graphics.animation.Skeleton skeleton -> a
    int countSubEntities -> b
    boolean visible -> e
    boolean castShadow -> f
    int userData -> g
    int insertionID -> h
    void addSubEntity(com.tyrlib2.graphics.renderables.SubEntity) -> a
    com.tyrlib2.graphics.renderables.SubEntity getSubEntity(int) -> b
    void renderShadow(float[]) -> b
    void setCastShadow(boolean) -> a
    void render(float[]) -> a
    void attachTo(com.tyrlib2.graphics.scene.SceneNode) -> a
    com.tyrlib2.graphics.scene.SceneNode detach() -> b
    com.tyrlib2.graphics.animation.Skeleton getSkeleton() -> c
    void setSkeleton(com.tyrlib2.graphics.animation.Skeleton) -> a
    void playAnimation(java.lang.String) -> a
    void stopAnimation(java.lang.String) -> b
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
    com.tyrlib2.math.AABB createUntransformedBoundingBox() -> d
    boolean isVisible() -> g
    void setVisible(boolean) -> b
    boolean hasAnimation(java.lang.String) -> c
    void setUserData(int) -> c
    void setInsertionID(int) -> a_
    int getInsertionID() -> e
    void destroy() -> f
com.tyrlib2.graphics.renderables.FormattedText2 -> com.tyrlib2.graphics.renderables.FormattedText2:
    com.tyrlib2.util.Color LINK_COLOR -> a
    float[] NO_ROTATION -> b
    com.tyrlib2.util.Color baseColor -> d
    java.lang.String text -> e
    int baseRotation -> f
    com.tyrlib2.graphics.text.Font font -> g
    java.util.List textSections -> c
    com.tyrlib2.graphics.renderables.FormattedText2$ALIGNMENT alignment -> h
    com.tyrlib2.math.Vector2 size -> i
    int insertionID -> j
    void render(float[]) -> a
    void parseText() -> j
    java.lang.String addCurrentSection(java.lang.StringBuilder,com.tyrlib2.util.Color,int,float,float,java.lang.String,java.lang.String,java.lang.String,int) -> a
    void setText(java.lang.String) -> a
    java.lang.String getText() -> a
    com.tyrlib2.graphics.renderables.FormattedText2$ALIGNMENT getAlignment() -> d
    void setAligment(com.tyrlib2.graphics.renderables.FormattedText2$ALIGNMENT) -> a
    com.tyrlib2.math.Vector2 getSize() -> g
    void setBaseColor(com.tyrlib2.util.Color) -> a
    com.tyrlib2.util.Color getBaseColor() -> h
    com.tyrlib2.graphics.text.Font getFont() -> i
    float getAlpha() -> c
    void setAlpha(float) -> a
    void setFont(com.tyrlib2.graphics.text.Font) -> a
    void renderShadow(float[]) -> b
    void setInsertionID(int) -> a_
    int getInsertionID() -> e
    void destroy() -> f
com.tyrlib2.graphics.renderables.FormattedText2$ALIGNMENT -> com.tyrlib2.graphics.renderables.FormattedText2$ALIGNMENT:
    com.tyrlib2.graphics.renderables.FormattedText2$ALIGNMENT LEFT -> LEFT
    com.tyrlib2.graphics.renderables.FormattedText2$ALIGNMENT CENTER -> CENTER
    com.tyrlib2.graphics.renderables.FormattedText2$ALIGNMENT RIGHT -> RIGHT
    com.tyrlib2.graphics.renderables.FormattedText2$ALIGNMENT[] ENUM$VALUES -> a
    com.tyrlib2.graphics.renderables.FormattedText2$ALIGNMENT[] values() -> values
    com.tyrlib2.graphics.renderables.FormattedText2$ALIGNMENT valueOf(java.lang.String) -> valueOf
com.tyrlib2.graphics.renderables.FormattedText2$TextSection -> com.tyrlib2.graphics.renderables.d:
    com.tyrlib2.util.Color color -> a
    java.lang.String text -> b
    int rotationValue -> c
    float[] rotation -> d
    float xOffset -> e
    float yOffset -> f
    java.lang.String link -> g
    com.tyrlib2.math.Vector2 size -> h
    com.tyrlib2.math.Vector2 pos -> i
    java.lang.String atlasName -> j
    java.lang.String regionName -> k
com.tyrlib2.graphics.renderables.Image2 -> com.tyrlib2.graphics.renderables.e:
    com.tyrlib2.math.Vector2 size -> b
    com.tyrlib2.graphics.renderer.TextureRegion textureRegion -> c
    short[] DRAW_ORDER_IMAGE -> a
    void render(float[]) -> a
    void setAlpha(float) -> a
    float getAlpha() -> a
    void setTexture(com.tyrlib2.graphics.renderer.Texture) -> a
    void setMaterial(com.tyrlib2.graphics.renderer.Material) -> a
    void setTextureRegion(com.tyrlib2.graphics.renderer.TextureRegion) -> a
    void createMesh() -> d
    void rotate(com.tyrlib2.math.Quaternion) -> a
com.tyrlib2.graphics.renderables.Outline -> com.tyrlib2.graphics.renderables.f:
    com.tyrlib2.graphics.renderer.Renderable outline -> a
    com.tyrlib2.graphics.animation.Skeleton skeleton -> b
    float size -> c
    int insertionID -> d
    void render(float[]) -> a
    com.tyrlib2.math.AABB createUntransformedBoundingBox() -> d
    void attachTo(com.tyrlib2.graphics.scene.SceneNode) -> a
    com.tyrlib2.graphics.scene.SceneNode detach() -> b
    void renderShadow(float[]) -> b
    void setInsertionID(int) -> a_
    int getInsertionID() -> e
    void destroy() -> f
com.tyrlib2.graphics.renderables.Rectangle2 -> com.tyrlib2.graphics.renderables.g:
    com.tyrlib2.math.Vector2 size -> k
    com.tyrlib2.util.Color color -> l
    boolean filled -> m
    int borderWidth -> n
    boolean hasBorder -> o
    com.tyrlib2.util.Color DEFAULT_COLOR -> a
    short[] DRAW_ORDER_QUAD -> b
    short[] DRAW_ORDER_BORDER -> c
    com.tyrlib2.graphics.renderer.Mesh borderMesh -> r
    void createMesh() -> d
    void setSize(com.tyrlib2.math.Vector2) -> a
    void setFilled(boolean) -> a
    void setBorder(int) -> b
    void render(float[]) -> a
    void setColor(com.tyrlib2.util.Color) -> a
com.tyrlib2.graphics.renderables.Skybox -> com.tyrlib2.graphics.renderables.h:
    com.tyrlib2.graphics.renderer.Renderable r -> a
    int insertionID -> b
    void render(float[]) -> a
    void enableSkyboxes() -> a
    void attachTo(com.tyrlib2.graphics.scene.SceneNode) -> a
    com.tyrlib2.graphics.scene.SceneNode detach() -> b
    void renderShadow(float[]) -> b
    void setInsertionID(int) -> a_
    int getInsertionID() -> e
    void destroy() -> f
com.tyrlib2.graphics.renderables.SubEntity -> com.tyrlib2.graphics.renderables.i:
    java.lang.String name -> a
    void render(float[],float[],int) -> a
    void renderShadow(float[],float[],int) -> b
com.tyrlib2.graphics.renderables.Text2 -> com.tyrlib2.graphics.renderables.j:
    com.tyrlib2.util.Color color -> b
    java.lang.String text -> c
    com.tyrlib2.graphics.text.Font font -> d
    float scale -> e
    float[] mvp -> a
    float[] rotation -> f
    int rotationValue -> g
    boolean noMVP -> h
    int insertionID -> i
    void render(float[]) -> a
    void setText(java.lang.String) -> a
    void setScale(float) -> a
    void noMVP() -> a
    void renderShadow(float[]) -> b
    void setInsertionID(int) -> a_
    int getInsertionID() -> e
    void destroy() -> f
com.tyrlib2.graphics.renderer.AndroidGLImpl -> com.tyrlib2.graphics.c.a:
    void glVertexAttrib3f(int,float,float,float) -> a
    void glDisableVertexAttribArray(int) -> a
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> a
    void glDrawArrays(int,int,int) -> a
    int glGetAttribLocation(int,java.lang.String) -> a
    int glGetUniformLocation(int,java.lang.String) -> b
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> a
    void glEnableVertexAttribArray(int) -> b
    void glUniform4f(int,float,float,float,float) -> a
    void glBindBuffer(int,int) -> a
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> a
    void glActiveTexture(int) -> c
    void glBindTexture(int,int) -> b
    void glUniform1i(int,int) -> c
    void glUniform1f(int,float) -> a
    void glUniform3f(int,float,float,float) -> b
    void glUniform2f(int,float,float) -> a
    void glDepthMask(boolean) -> a
    void glDisable(int) -> d
    void glEnable(int) -> e
    void glLineWidth(float) -> a
    void glCullFace(int) -> f
    void glDepthFunc(int) -> g
    void glBlendFunc(int,int) -> d
    void glClearColor(float,float,float,float) -> a
    void glClear(int) -> h
    void glViewport(int,int,int,int) -> a
    void glUseProgram(int) -> i
    void glLinkProgram(int) -> j
    int glCreateProgram() -> a
    void glAttachShader(int,int) -> e
    void glBindAttribLocation(int,int,java.lang.String) -> a
    void glGetProgramiv(int,int,int[],int) -> a
    void glDeleteProgram(int) -> k
    void glDrawElements(int,int,int,java.nio.Buffer) -> a
    void glShaderSource(int,java.lang.String) -> c
    int glCreateShader(int) -> l
    void glCompileShader(int) -> m
    void glGetShaderiv(int,int,int[],int) -> b
    void glDeleteShader(int) -> n
    void glGenTextures(int,int[],int) -> a
    void glTexParameteri(int,int,int) -> b
    void glDeleteTextures(int,int[],int) -> b
    void glGenFramebuffers(int,int[],int) -> c
    void glBindFramebuffer(int,int) -> f
    void glFramebufferTexture2D(int,int,int,int,int) -> a
    void glTexParameterf(int,int,float) -> a
    java.lang.String glGetProgramInfoLog(int) -> o
    java.lang.String glGetShaderInfoLog(int) -> p
    void glGenBuffers(int,int[],int) -> d
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glDrawElements(int,int,int,int) -> b
    void glBufferSubData(int,int,int,java.nio.Buffer) -> b
    void glGenerateMipmap(int) -> q
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glDeleteBuffers(int,int[],int) -> e
com.tyrlib2.graphics.renderer.AndroidOpenGLRenderer -> com.tyrlib2.graphics.c.b:
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void loadShaders() -> a
    void queueEvent(java.lang.Runnable) -> a
com.tyrlib2.graphics.renderer.BoundedRenderable -> com.tyrlib2.graphics.c.c:
    com.tyrlib2.math.AABB boundingBox -> a
    com.tyrlib2.math.AABB untransformedBoundingBox -> b
    float[] points -> c
    com.tyrlib2.math.AABB createUntransformedBoundingBox() -> d
    com.tyrlib2.math.AABB getBoundingBox() -> s_
    com.tyrlib2.math.AABB getUntransformedBoundingBox() -> o
    void calcBoundingBox() -> p
com.tyrlib2.graphics.renderer.Camera -> com.tyrlib2.graphics.c.d:
    float[] viewMatrix -> a
    com.tyrlib2.math.Vector3 up -> b
    com.tyrlib2.math.Vector3 lookDirection -> c
    com.tyrlib2.math.Vector3 rotatedLookDirection -> d
    com.tyrlib2.math.Vector3 rotatedUp -> e
    void setLookDirection(com.tyrlib2.math.Vector3) -> a
    com.tyrlib2.math.Vector3 getLookDirection() -> a
    void use() -> c
    void update() -> d
    void setLookAt(float[],com.tyrlib2.math.Vector3) -> a
    com.tyrlib2.math.Vector3 getWorldLookDirection() -> e
    com.tyrlib2.math.Vector3 getWorldUpVector() -> f
com.tyrlib2.graphics.renderer.DestroyQuery -> com.tyrlib2.graphics.c.e:
    boolean intersects(com.tyrlib2.math.AABB) -> a
    void callback(com.tyrlib2.graphics.scene.BoundedSceneObject) -> a
com.tyrlib2.graphics.renderer.GLImpl -> com.tyrlib2.graphics.c.f:
    void glVertexAttrib3f(int,float,float,float) -> a
    void glDisableVertexAttribArray(int) -> a
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> a
    void glDrawArrays(int,int,int) -> a
    int glGetAttribLocation(int,java.lang.String) -> a
    int glGetUniformLocation(int,java.lang.String) -> b
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> a
    void glEnableVertexAttribArray(int) -> b
    void glUniform4f(int,float,float,float,float) -> a
    void glBindBuffer(int,int) -> a
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> a
    void glActiveTexture(int) -> c
    void glBindTexture(int,int) -> b
    void glUniform1i(int,int) -> c
    void glUniform1f(int,float) -> a
    void glUniform3f(int,float,float,float) -> b
    void glUniform2f(int,float,float) -> a
    void glDepthMask(boolean) -> a
    void glDepthFunc(int) -> g
    void glDisable(int) -> d
    void glEnable(int) -> e
    void glLineWidth(float) -> a
    void glCullFace(int) -> f
    void glBlendFunc(int,int) -> d
    void glClearColor(float,float,float,float) -> a
    void glClear(int) -> h
    void glViewport(int,int,int,int) -> a
    void glUseProgram(int) -> i
    void glLinkProgram(int) -> j
    int glCreateProgram() -> a
    void glAttachShader(int,int) -> e
    void glBindAttribLocation(int,int,java.lang.String) -> a
    void glGetProgramiv(int,int,int[],int) -> a
    java.lang.String glGetProgramInfoLog(int) -> o
    void glDeleteProgram(int) -> k
    void glDrawElements(int,int,int,java.nio.Buffer) -> a
    void glDrawElements(int,int,int,int) -> b
    void glShaderSource(int,java.lang.String) -> c
    int glCreateShader(int) -> l
    void glCompileShader(int) -> m
    java.lang.String glGetShaderInfoLog(int) -> p
    void glGetShaderiv(int,int,int[],int) -> b
    void glDeleteShader(int) -> n
    void glGenTextures(int,int[],int) -> a
    void glTexParameteri(int,int,int) -> b
    void glDeleteTextures(int,int[],int) -> b
    void glGenFramebuffers(int,int[],int) -> c
    void glBindFramebuffer(int,int) -> f
    void glFramebufferTexture2D(int,int,int,int,int) -> a
    void glTexParameterf(int,int,float) -> a
    void glGenBuffers(int,int[],int) -> d
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glBufferSubData(int,int,int,java.nio.Buffer) -> b
    void glGenerateMipmap(int) -> q
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glDeleteBuffers(int,int[],int) -> e
com.tyrlib2.graphics.renderer.GameLoop -> com.tyrlib2.graphics.c.g:
    float BILLION -> a
    com.tyrlib2.graphics.renderer.IErrorHandler errorHandler -> b
    java.util.List frameListeners -> c
    long lastTime -> d
    boolean rendering -> e
    com.tyrlib2.graphics.scene.SceneNode rootSceneNode -> f
    boolean skipRendering -> g
    boolean init -> h
    boolean serverMode -> i
    java.util.List toRender -> j
    boolean isInServerMode() -> b
    void queueEvent(java.lang.Runnable) -> a
    void startRendering() -> c
    void render() -> d
    void updateListeners(long) -> a
    void destroy() -> e
    void addFrameListener(com.tyrlib2.graphics.renderer.IFrameListener) -> a
    void removeFrameListener(com.tyrlib2.graphics.renderer.IFrameListener) -> b
    com.tyrlib2.graphics.scene.SceneNode getRootSceneNode() -> f
    void destroyRenderables(int) -> a
    com.tyrlib2.graphics.renderer.Viewport getViewport() -> g
    void setCamera(com.tyrlib2.graphics.renderer.Camera) -> a
    com.tyrlib2.graphics.renderer.Camera getCamera() -> h
    void addRenderable(com.tyrlib2.graphics.renderer.IRenderable) -> a
    void addRenderable(com.tyrlib2.graphics.renderer.BoundedRenderable) -> a
    void removeRenderable(com.tyrlib2.graphics.renderer.IRenderable) -> b
    void removeRenderable(com.tyrlib2.graphics.renderer.BoundedRenderable) -> b
    void addRenderable(com.tyrlib2.graphics.renderer.IRenderable,int) -> a
    void addRenderable(com.tyrlib2.graphics.renderer.BoundedRenderable,int) -> a
    void addRenderable(com.tyrlib2.graphics.scene.BoundedSceneObject,int) -> a
    void removeRenderable(com.tyrlib2.graphics.renderer.IRenderable,int) -> b
    void removeRenderable(com.tyrlib2.graphics.scene.BoundedSceneObject,int) -> b
    void removeRenderable(com.tyrlib2.graphics.renderer.BoundedRenderable,int) -> b
    com.tyrlib2.graphics.scene.Octree getOctree(int) -> b
    void setShadowsEnabled(boolean,com.tyrlib2.graphics.lighting.Light,int[],float[]) -> a
    boolean isShadowsEnabled() -> i
    int getShadowMapHandle() -> j
    float[] getShadowVP() -> k
    int getShadowModelHandle() -> l
    com.tyrlib2.graphics.renderer.Program getShadowProgram(boolean) -> a
com.tyrlib2.graphics.renderer.IBlendable -> com.tyrlib2.graphics.c.h:
    float getAlpha() -> c
    void setAlpha(float) -> a
com.tyrlib2.graphics.renderer.IErrorHandler -> com.tyrlib2.graphics.c.i:
    void onError() -> a
com.tyrlib2.graphics.renderer.IFrameListener -> com.tyrlib2.graphics.c.j:
    void onSurfaceCreated() -> onSurfaceCreated
    void onSurfaceChanged() -> onSurfaceChanged
    void onFrameRendered(float) -> onFrameRendered
com.tyrlib2.graphics.renderer.IRenderable -> com.tyrlib2.graphics.c.k:
    void render(float[]) -> a
    void renderShadow(float[]) -> b
    void setInsertionID(int) -> a_
    int getInsertionID() -> e
    void destroy() -> f
com.tyrlib2.graphics.renderer.Material -> com.tyrlib2.graphics.c.l:
    com.tyrlib2.graphics.renderer.Program program -> j
    int positionHandle -> k
    com.tyrlib2.graphics.renderer.VertexLayout vertexLayout -> l
    int mvpMatrixHandle -> m
    boolean lighted -> n
    java.lang.String mvpParamName -> o
    java.lang.String positionParamName -> p
    boolean animated -> q
    java.lang.String boneParam -> r
    java.lang.String boneIndexParam -> s
    java.lang.String boneWeightParam -> t
    java.util.List params -> u
    void render(com.tyrlib2.graphics.renderer.Mesh,float[]) -> a
    void addParam(com.tyrlib2.graphics.renderer.Param) -> a
    void setParams() -> i
    void init(int,int,java.lang.String,java.lang.String) -> a
    int getByteStride() -> j
    int getPositionOffset() -> k
    float[] createVertexData(com.tyrlib2.math.Vector3[],short[]) -> a
    int getPositionHandle() -> l
    int getMVPMatrixHandle() -> m
    com.tyrlib2.graphics.renderer.Program getProgram() -> n
    java.lang.String getBoneParam() -> o
    java.lang.String getBoneIndexParam() -> p
    java.lang.String getBoneWeightParam() -> q
    void setAnimated(boolean) -> e
    com.tyrlib2.graphics.renderer.Material copy() -> g
    void setProgram(com.tyrlib2.graphics.renderer.Program) -> a
    void updateHandles() -> a
    int getInfoOffset(int) -> d
    int getInfoSize(int) -> e
    void addVertexInfo(int,int,int) -> a
    com.tyrlib2.graphics.renderer.VertexLayout getVertexLayout() -> r
    void setVertexLayout(com.tyrlib2.graphics.renderer.VertexLayout) -> a
com.tyrlib2.graphics.renderer.Mesh -> com.tyrlib2.graphics.c.m:
    java.nio.FloatBuffer vertexBuffer -> a
    java.nio.ShortBuffer drawListBuffer -> b
    java.nio.FloatBuffer boneBuffer -> c
    float[] vertexData -> d
    short[] drawOrder -> e
    float[] boneData -> f
    boolean usesVBO -> g
    int vertexCount -> j
    int indexCount -> k
    com.tyrlib2.math.AABB boundingBox -> h
    int[] buffers -> i
    void setVertexBones(float[]) -> a
    java.nio.FloatBuffer getBoneBuffer() -> a
    short[] getDrawOrder() -> b
    java.nio.ShortBuffer getDrawOrderBuffer() -> c
    int getIndexCount() -> d
    com.tyrlib2.math.AABB getBoundingBox() -> e
    void setVertexInfo(int,float) -> a
    float getVertexInfo(int) -> a
    int getVBOBuffer() -> f
    int getIBOBuffer() -> g
    int getBBuffer() -> h
    void createVBO() -> n
    java.nio.FloatBuffer getVertexBuffer() -> i
    void createBoneBuffer() -> o
    boolean isUsingVBO() -> j
    boolean isUsingIBO() -> k
    boolean isUsingBBO() -> l
    void destroy() -> m
com.tyrlib2.graphics.renderer.OpenGLRenderer -> com.tyrlib2.graphics.c.n:
    java.util.List renderChannels -> k
    com.tyrlib2.graphics.renderer.Viewport viewport -> l
    com.tyrlib2.graphics.renderer.Camera camera -> m
    float[] vpMatrix -> n
    float[] shadowVPMatrix -> o
    float[] shadowViewMatrix -> p
    float[] proj -> t
    com.tyrlib2.math.FrustumG frustum -> q
    int textureFails -> u
    com.tyrlib2.graphics.renderer.RenderSceneQuery query -> v
    com.tyrlib2.graphics.renderer.RenderShadowSceneQuery queryShadow -> w
    boolean shadowsEnabled -> r
    com.tyrlib2.graphics.lighting.Light shadowCastingLight -> s
    com.tyrlib2.graphics.renderer.Program shadowProgram -> x
    com.tyrlib2.graphics.renderer.Program shadowProgramAnim -> y
    int shadowMVPHandle -> z
    int shadowMVPHandleAnim -> A
    int shadowDistanceIndex -> B
    int[] depthTextures -> C
    int[] shadowBuffers -> D
    int[] shadowTextureSizes -> E
    float[] shadowDistances -> F
    java.util.Comparator comparator -> G
    void setShadowsEnabled(boolean,com.tyrlib2.graphics.lighting.Light,int[],float[]) -> a
    boolean isShadowsEnabled() -> i
    int getShadowMapHandle() -> j
    float[] getShadowVP() -> k
    int getShadowModelHandle() -> l
    com.tyrlib2.graphics.renderer.Program getShadowProgram(boolean) -> a
    void destroyRenderables(int) -> a
    void drawScene() -> m
    void drawChannel(com.tyrlib2.graphics.renderer.OpenGLRenderer$RenderChannel,float[]) -> a
    void drawShadowChannel(com.tyrlib2.graphics.renderer.OpenGLRenderer$RenderChannel,float[]) -> b
    com.tyrlib2.graphics.renderer.Viewport getViewport() -> g
    void setCamera(com.tyrlib2.graphics.renderer.Camera) -> a
    com.tyrlib2.graphics.renderer.Camera getCamera() -> h
    void addRenderable(com.tyrlib2.graphics.renderer.IRenderable) -> a
    void addRenderable(com.tyrlib2.graphics.renderer.BoundedRenderable) -> a
    void removeRenderable(com.tyrlib2.graphics.renderer.IRenderable) -> b
    void removeRenderable(com.tyrlib2.graphics.renderer.BoundedRenderable) -> b
    void addRenderable(com.tyrlib2.graphics.renderer.IRenderable,int) -> a
    void addRenderable(com.tyrlib2.graphics.renderer.BoundedRenderable,int) -> a
    void addRenderable(com.tyrlib2.graphics.scene.BoundedSceneObject,int) -> a
    void removeRenderable(com.tyrlib2.graphics.renderer.IRenderable,int) -> b
    void removeRenderable(com.tyrlib2.graphics.scene.BoundedSceneObject,int) -> b
    void removeRenderable(com.tyrlib2.graphics.renderer.BoundedRenderable,int) -> b
    com.tyrlib2.graphics.scene.Octree getOctree(int) -> b
    void defaultSetup() -> n
    void startRendering() -> c
    void surfaceChanged(int,int) -> a
    void render() -> d
    int getTextureFails() -> o
    void setTextureFails(int) -> c
com.tyrlib2.graphics.renderer.OpenGLRenderer$1 -> com.tyrlib2.graphics.c.o:
    com.tyrlib2.graphics.renderer.OpenGLRenderer this$0 -> a
    int compare(com.tyrlib2.graphics.renderer.IRenderable,com.tyrlib2.graphics.renderer.IRenderable) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.tyrlib2.graphics.renderer.OpenGLRenderer$RenderChannel -> com.tyrlib2.graphics.c.p:
    com.tyrlib2.graphics.scene.Octree octree -> a
    java.util.List renderables -> b
    boolean enabled -> c
    int countTotalRenderables -> d
    com.tyrlib2.graphics.renderer.OpenGLRenderer this$0 -> e
com.tyrlib2.graphics.renderer.Param -> com.tyrlib2.graphics.c.q:
    java.lang.String name -> a
    int paramHandle -> b
    void setProgram(int) -> a
    void set(int) -> b
com.tyrlib2.graphics.renderer.ParamValuef -> com.tyrlib2.graphics.c.r:
    float value -> a
com.tyrlib2.graphics.renderer.PreprocessorOptions -> com.tyrlib2.graphics.c.s:
    java.util.Set options -> a
    void define(java.lang.String) -> a
    boolean isDefined(java.lang.String) -> b
com.tyrlib2.graphics.renderer.Program -> com.tyrlib2.graphics.c.t:
    int handle -> a
    java.lang.String vertexShader -> b
    java.lang.String fragmentShader -> c
    java.lang.String[] bindAttributes -> d
    com.tyrlib2.graphics.renderer.Program inUse -> e
    com.tyrlib2.graphics.renderer.Mesh mesh -> f
    boolean meshChange -> g
    int textureHandle -> h
    boolean blending -> i
    int ssfactor -> j
    int sdfactor -> k
    void use() -> a
    void link() -> b
    void resetCache() -> c
    void blendEnable(int,int) -> a
    void blendDisable() -> d
com.tyrlib2.graphics.renderer.ProgramManager -> com.tyrlib2.graphics.c.u:
    com.tyrlib2.graphics.renderer.ProgramManager instance -> a
    java.util.Map programs -> b
    com.tyrlib2.graphics.renderer.ProgramManager getInstance() -> a
    com.tyrlib2.graphics.renderer.Program createProgram(java.lang.String,java.lang.String,java.lang.String,java.lang.String[]) -> a
    com.tyrlib2.graphics.renderer.Program createProgram(java.lang.String,int,int,java.lang.String[]) -> a
    com.tyrlib2.graphics.renderer.Program createProgram(java.lang.String,int,int,java.lang.String[],com.tyrlib2.graphics.renderer.PreprocessorOptions) -> a
    java.lang.String preprocessVertexShader(java.lang.String) -> a
    java.lang.String preprocessFragmentShader(java.lang.String) -> b
    java.lang.String preprocessVertexShader(java.lang.String,com.tyrlib2.graphics.renderer.PreprocessorOptions) -> a
    java.lang.String preprocessFragmentShader(java.lang.String,com.tyrlib2.graphics.renderer.PreprocessorOptions) -> b
    java.lang.String preprocessShader(java.lang.String,com.tyrlib2.graphics.renderer.PreprocessorOptions) -> c
    com.tyrlib2.graphics.renderer.Program getProgram(java.lang.String) -> c
    void recreateAll() -> b
    boolean isProgramLoaded(java.lang.String) -> d
com.tyrlib2.graphics.renderer.RenderSceneQuery -> com.tyrlib2.graphics.c.v:
    com.tyrlib2.math.FrustumG frustum -> a
    float[] transformMatrix -> b
    void init(com.tyrlib2.math.FrustumG,float[]) -> a
    boolean intersects(com.tyrlib2.math.AABB) -> a
    void callback(com.tyrlib2.graphics.scene.BoundedSceneObject) -> a
com.tyrlib2.graphics.renderer.RenderShadowSceneQuery -> com.tyrlib2.graphics.c.w:
    com.tyrlib2.math.FrustumG frustum -> a
    float[] transformMatrix -> b
    void init(com.tyrlib2.math.FrustumG,float[]) -> a
    boolean intersects(com.tyrlib2.math.AABB) -> a
    void callback(com.tyrlib2.graphics.scene.BoundedSceneObject) -> a
com.tyrlib2.graphics.renderer.Renderable -> com.tyrlib2.graphics.c.x:
    com.tyrlib2.graphics.renderer.Mesh mesh -> c
    com.tyrlib2.graphics.renderer.Material material -> d
    float[] modelMatrix -> e
    float[] mvpMatrix -> f
    int renderMode -> g
    int insertionID -> a
    void init(com.tyrlib2.graphics.renderer.Material,com.tyrlib2.math.Vector3[],short[]) -> a
    com.tyrlib2.graphics.renderer.Mesh getMesh() -> c
    void setMaterial(com.tyrlib2.graphics.renderer.Material) -> a
    void attachTo(com.tyrlib2.graphics.scene.SceneNode) -> a
    void renderShadow(float[]) -> b
    void render(float[]) -> a
    com.tyrlib2.graphics.renderer.Material getMaterial() -> g
    com.tyrlib2.math.AABB createUntransformedBoundingBox() -> d
    void setInsertionID(int) -> a_
    int getInsertionID() -> e
    void destroy() -> f
com.tyrlib2.graphics.renderer.Renderable2 -> com.tyrlib2.graphics.c.y:
    int drawOrderLength -> d
    java.nio.ShortBuffer drawOrderBuffer -> e
    com.tyrlib2.graphics.renderer.Mesh mesh -> f
    com.tyrlib2.graphics.renderer.Material material -> g
    float[] modelMatrix -> h
    float[] mvpMatrix -> i
    int renderMode -> j
    int insertionID -> a
    void init(com.tyrlib2.graphics.renderer.Material,com.tyrlib2.math.Vector3[],short[]) -> a
    void setMaterial(com.tyrlib2.graphics.renderer.Material) -> a
    void attachTo(com.tyrlib2.graphics.scene.SceneNode) -> a
    com.tyrlib2.graphics.renderer.Material getMaterial() -> c
    void renderShadow(float[]) -> b
    void render(float[]) -> a
    void setAlpha(float) -> a
    float getAlpha() -> a
    void setInsertionID(int) -> a_
    int getInsertionID() -> e
    void destroy() -> f
com.tyrlib2.graphics.renderer.ShaderManager -> com.tyrlib2.graphics.c.z:
    com.tyrlib2.graphics.renderer.ShaderManager instance -> a
    java.util.Map shaders -> b
    com.tyrlib2.graphics.renderer.ShaderManager getInstance() -> a
    int loadShader(java.lang.String,int,java.lang.String) -> a
    int getShader(java.lang.String) -> a
com.tyrlib2.graphics.renderer.Texture -> com.tyrlib2.graphics.c.aa:
    int handle -> a
    int resId -> b
    com.tyrlib2.math.Vector2 size -> c
    int getHandle() -> a
    com.tyrlib2.math.Vector2 getSize() -> b
com.tyrlib2.graphics.renderer.TextureAtlas -> com.tyrlib2.graphics.c.ab:
    com.tyrlib2.graphics.renderer.Texture texture -> a
    java.util.Map regions -> b
    void addRegion(java.lang.String,com.tyrlib2.graphics.renderer.TextureRegion) -> a
    com.tyrlib2.graphics.renderer.TextureRegion getRegion(java.lang.String) -> a
    java.lang.String getRegionName(int) -> a
    com.tyrlib2.graphics.renderer.Texture getTexture() -> a
    com.tyrlib2.graphics.renderer.TextureAtlas fromXMLFile(java.lang.String) -> b
    com.tyrlib2.graphics.renderer.TextureAtlas fromXMLFile(java.lang.String,float) -> a
com.tyrlib2.graphics.renderer.TextureManager -> com.tyrlib2.graphics.c.ac:
    com.tyrlib2.graphics.renderer.TextureManager instance -> a
    java.util.Map textures -> b
    java.util.List unnamedTextures -> c
    com.tyrlib2.graphics.renderer.TextureManager getInstance() -> a
    com.tyrlib2.graphics.renderer.Texture getTexture(java.lang.String) -> a
    com.tyrlib2.graphics.renderer.Texture createTexture(java.lang.String,int) -> a
    void reloadAll() -> b
    void reloadTexture(com.tyrlib2.graphics.renderer.Texture) -> b
    void destroyTexture(com.tyrlib2.graphics.renderer.Texture) -> a
    com.tyrlib2.graphics.renderer.Texture createTexture(java.lang.String,com.tyrlib2.files.IBitmap) -> a
com.tyrlib2.graphics.renderer.TextureRegion -> com.tyrlib2.graphics.c.ad:
    float u1 -> a
    float v1 -> b
    float u2 -> c
    float v2 -> d
com.tyrlib2.graphics.renderer.TyrGL -> com.tyrlib2.graphics.c.ae:
    com.tyrlib2.graphics.renderer.GLImpl IMPL -> a
    int GL_POINTS -> b
    int GL_FLOAT -> c
    int GL_SRC_ALPHA -> d
    int GL_ONE_MINUS_SRC_ALPHA -> e
    int GL_DST_ALPHA -> f
    int GL_SRC_COLOR -> g
    int GL_DST_COLOR -> h
    int GL_ARRAY_BUFFER -> i
    int GL_TEXTURE0 -> j
    int GL_TEXTURE1 -> k
    int GL_TEXTURE2 -> l
    int GL_TEXTURE3 -> m
    int GL_TEXTURE_2D -> n
    int GL_CULL_FACE -> o
    int GL_TRIANGLES -> p
    int GL_LINES -> q
    int GL_FRONT -> r
    int GL_BACK -> s
    int GL_LEQUAL -> t
    int GL_ONE -> u
    int GL_DEPTH_BUFFER_BIT -> v
    int GL_COLOR_BUFFER_BIT -> w
    int GL_LINE_LOOP -> x
    int GL_DEPTH_TEST -> y
    int GL_BLEND -> z
    int GL_LINK_STATUS -> A
    int GL_VERTEX_SHADER -> B
    int GL_FRAGMENT_SHADER -> C
    int GL_UNSIGNED_SHORT -> D
    int GL_COMPILE_STATUS -> E
    int GL_INFO_LOG_LENGTH -> F
    int GL_TEXTURE_MIN_FILTER -> G
    int GL_LINEAR -> H
    int GL_TEXTURE_MAG_FILTER -> I
    int GL_LINEAR_MIPMAP_LINEAR -> J
    int GL_FRAMEBUFFER -> K
    int GL_COLOR_ATTACHMENT0 -> L
    int GL_RGBA -> M
    int GL_UNSIGNED_BYTE -> N
    int GL_NEAREST -> O
    int GL_TEXTURE_WRAP_S -> P
    int GL_TEXTURE_WRAP_T -> Q
    int GL_CLAMP_TO_EDGE -> R
    int GL_POINT_SPRITE -> S
    int GL_STATIC_DRAW -> T
    int GL_USE_VBO -> U
    int GL_ELEMENT_ARRAY_BUFFER -> V
    int GL_STREAM_DRAW -> W
    int GL_DEPTH_COMPONENT16 -> X
    int GL_DEPTH_COMPONENT24 -> Y
    int GL_DEPTH_COMPONENT -> Z
    int GL_DEPTH_ATTACHMENT -> aa
    int GL_RGB -> ab
    int GL_UNSIGNED_INT -> ac
    int TARGET -> ad
    void glVertexAttrib3f(int,float,float,float) -> a
    void glDisableVertexAttribArray(int) -> a
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> a
    void glDrawArrays(int,int,int) -> a
    int glGetAttribLocation(int,java.lang.String) -> a
    int glGetUniformLocation(int,java.lang.String) -> b
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> a
    void glEnableVertexAttribArray(int) -> b
    void glUniform4f(int,float,float,float,float) -> a
    void glBindBuffer(int,int) -> a
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> a
    void glActiveTexture(int) -> c
    void glBindTexture(int,int) -> b
    void glUniform1i(int,int) -> c
    void glUniform1f(int,float) -> a
    void glUniform3f(int,float,float,float) -> b
    void glUniform2f(int,float,float) -> a
    void glDepthMask(boolean) -> a
    void glDisable(int) -> d
    void glEnable(int) -> e
    void glLineWidth(float) -> a
    void glCullFace(int) -> f
    void glDepthFunc(int) -> g
    void glBlendFunc(int,int) -> d
    void glClearColor(float,float,float,float) -> a
    void glClear(int) -> h
    void glViewport(int,int,int,int) -> a
    void glUseProgram(int) -> i
    void glLinkProgram(int) -> j
    int glCreateProgram() -> a
    void glAttachShader(int,int) -> e
    void glBindAttribLocation(int,int,java.lang.String) -> a
    void glGetProgramiv(int,int,int[],int) -> a
    void glDeleteProgram(int) -> k
    void glDrawElements(int,int,int,java.nio.Buffer) -> a
    void glDrawElements(int,int,int,int) -> b
    void glShaderSource(int,java.lang.String) -> c
    int glCreateShader(int) -> l
    void glCompileShader(int) -> m
    void glGetShaderiv(int,int,int[],int) -> b
    void glDeleteShader(int) -> n
    void glGenTextures(int,int[],int) -> a
    void glTexParameteri(int,int,int) -> b
    void glDeleteTextures(int,int[],int) -> b
    void glGenFramebuffers(int,int[],int) -> c
    void glBindFramebuffer(int,int) -> f
    void glFramebufferTexture2D(int,int,int,int,int) -> a
    void glTexParameterf(int,int,float) -> a
    java.lang.String glGetProgramInfoLog(int) -> o
    java.lang.String glGetShaderInfoLog(int) -> p
    void glGenBuffers(int,int[],int) -> d
    void glBufferData(int,int,java.nio.Buffer,int) -> a
    void glBufferSubData(int,int,int,java.nio.Buffer) -> b
    void glGenerateMipmap(int) -> q
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> a
    void glDeleteBuffers(int,int[],int) -> e
com.tyrlib2.graphics.renderer.UParam1f -> com.tyrlib2.graphics.c.af:
    com.tyrlib2.graphics.renderer.ParamValuef paramValue -> c
    void set(int) -> b
com.tyrlib2.graphics.renderer.VertexLayout -> com.tyrlib2.graphics.c.ag:
    gnu.trove.map.hash.TIntIntHashMap vertexPosLayout -> a
    gnu.trove.map.hash.TIntIntHashMap vertexSizeLayout -> b
    int byteStride -> c
    int getPos(int) -> a
    void setPos(int,int) -> a
    int getSize(int) -> b
    void setSize(int,int) -> b
    int getByteStride() -> a
    com.tyrlib2.graphics.renderer.VertexLayout copy() -> b
    void setBytestride(int) -> c
com.tyrlib2.graphics.renderer.Viewport -> com.tyrlib2.graphics.c.ah:
    float[] projectionMatrix -> a
    int width -> b
    int height -> c
    float ratio -> d
    int nearClip -> e
    int farClip -> f
    void setFullscreen(int,int) -> a
    float getNearClipWidth() -> a
    float getNearClipHeight() -> b
    int getWidth() -> c
    int getHeight() -> d
    int getNearClip() -> e
    int getFarClip() -> f
    float getRatio() -> g
com.tyrlib2.graphics.scene.BoundedSceneObject -> com.tyrlib2.graphics.scene.a:
    boolean boundingBoxVisible -> a
    com.tyrlib2.graphics.renderables.BoundingBox boundingBox -> b
    boolean dirty -> c
    com.tyrlib2.graphics.scene.OctreeNode octree -> o
    com.tyrlib2.math.AABB getBoundingBox() -> s_
    boolean isBoundingBoxVisible() -> q
    void calcBoundingBox() -> p
    void onTransformed() -> r
    void updateBoundingBox() -> s
    void attachTo(com.tyrlib2.graphics.scene.SceneNode) -> a
    com.tyrlib2.graphics.scene.SceneNode detach() -> b
    void setClean() -> t
    boolean isDity() -> u
com.tyrlib2.graphics.scene.ISceneQuery -> com.tyrlib2.graphics.scene.b:
    boolean intersects(com.tyrlib2.math.AABB) -> a
    void callback(com.tyrlib2.graphics.scene.BoundedSceneObject) -> a
com.tyrlib2.graphics.scene.Octree -> com.tyrlib2.graphics.scene.c:
    com.tyrlib2.graphics.scene.OctreeNode root -> a
    void addObject(com.tyrlib2.graphics.scene.BoundedSceneObject) -> a
    void removeObject(com.tyrlib2.graphics.scene.BoundedSceneObject) -> b
    void update() -> a
    void attachTo(com.tyrlib2.graphics.scene.SceneNode) -> a
    com.tyrlib2.graphics.scene.SceneNode detach() -> b
    void query(com.tyrlib2.graphics.scene.ISceneQuery) -> a
    void getCurrentRoot() -> d
    boolean checkDuplicates() -> c
com.tyrlib2.graphics.scene.OctreeNode -> com.tyrlib2.graphics.scene.d:
    int minimumObjectsPerNode -> a
    int maximumObjectsPerNode -> b
    java.util.List objects -> c
    com.tyrlib2.graphics.scene.OctreeNode[] children -> d
    com.tyrlib2.math.AABB boundingBox -> e
    com.tyrlib2.math.Vector3 center -> f
    float dimension -> g
    com.tyrlib2.graphics.scene.OctreeNode parentOctree -> h
    boolean dirty -> i
    java.util.Stack QUERY_LIST -> j
    float[] childCenterOffsets -> k
    void addObject(com.tyrlib2.graphics.scene.BoundedSceneObject) -> a
    boolean addObjectIntoChild(com.tyrlib2.graphics.scene.BoundedSceneObject) -> c
    boolean removeObject(com.tyrlib2.graphics.scene.BoundedSceneObject) -> b
    void removeLocalObject(int) -> a
    void update() -> c
    com.tyrlib2.math.AABB getBoundingBox() -> s_
    void split() -> h
    void merge() -> d
    void attachTo(com.tyrlib2.graphics.scene.SceneNode) -> a
    com.tyrlib2.graphics.scene.SceneNode detach() -> b
    void query(com.tyrlib2.graphics.scene.ISceneQuery) -> a
    void query(com.tyrlib2.graphics.scene.ISceneQuery,com.tyrlib2.graphics.scene.OctreeNode) -> a
    void queryObjects(com.tyrlib2.graphics.scene.ISceneQuery) -> b
    com.tyrlib2.graphics.scene.OctreeNode getParentOctree() -> e
    void setDirty() -> f
    boolean checkDuplicates() -> g
    boolean checkDuplicates(java.util.Set) -> a
com.tyrlib2.graphics.scene.SceneManager -> com.tyrlib2.graphics.scene.e:
    com.tyrlib2.graphics.scene.SceneManager instance -> a
    com.tyrlib2.graphics.renderer.GameLoop renderer -> b
    java.util.List lights -> c
    java.util.Map entityFactories -> d
    java.util.Map particleSystemFactories -> e
    java.util.Map fonts -> f
    com.tyrlib2.util.Color ambientLight -> g
    java.util.Map atlases -> h
    com.tyrlib2.graphics.text.Font activeFont -> i
    int[] $SWITCH_TABLE$com$tyrlib2$graphics$lighting$Light$Type -> j
    com.tyrlib2.graphics.scene.SceneManager getInstance() -> a
    void destroy() -> b
    void setRenderer(com.tyrlib2.graphics.renderer.GameLoop) -> a
    com.tyrlib2.graphics.renderer.GameLoop getRenderer() -> c
    com.tyrlib2.graphics.renderer.Camera createCamera(com.tyrlib2.math.Vector3,com.tyrlib2.math.Vector3,com.tyrlib2.graphics.scene.SceneNode) -> a
    com.tyrlib2.graphics.lighting.Light createLight(com.tyrlib2.graphics.lighting.Light$Type) -> a
    int getLightCount() -> d
    com.tyrlib2.graphics.lighting.Light getLight(int) -> a
    com.tyrlib2.graphics.scene.SceneNode getRootSceneNode() -> e
    void setAmbientLight(com.tyrlib2.util.Color) -> a
    com.tyrlib2.util.Color getAmbientLight() -> f
    void addFrameListener(com.tyrlib2.graphics.renderer.IFrameListener) -> a
    void removeFrameListener(com.tyrlib2.graphics.renderer.IFrameListener) -> b
    void destroyRenderable(com.tyrlib2.graphics.renderer.IRenderable) -> a
    void destroyRenderable(com.tyrlib2.graphics.renderer.IRenderable,int) -> a
    com.tyrlib2.graphics.renderables.Entity createEntity(java.lang.String) -> a
    com.tyrlib2.graphics.renderables.Entity createEntity(java.lang.String,boolean) -> a
    com.tyrlib2.graphics.renderables.Entity createEntity(java.lang.String,boolean,int) -> a
    com.tyrlib2.graphics.renderables.Entity createEntity(java.lang.String,boolean,int,com.tyrlib2.graphics.renderer.VertexLayout) -> a
    com.tyrlib2.graphics.particles.ParticleSystem createParticleSystem(java.lang.String) -> b
    com.tyrlib2.graphics.particles.ParticleSystem createParticleSystem(int) -> b
    void loadFont(java.lang.String,java.lang.String,int) -> a
    com.tyrlib2.graphics.text.Font getFont(java.lang.String) -> c
    void recreateFonts() -> g
    com.tyrlib2.graphics.renderables.Text2 createText2(java.lang.String,int,com.tyrlib2.util.Color) -> a
    com.tyrlib2.graphics.renderer.Camera getActiveCamera() -> h
    com.tyrlib2.graphics.renderer.Viewport getViewport() -> i
    int getViewportWidth() -> j
    float getViewportRatio() -> k
    void addTextureAtlas(java.lang.String,com.tyrlib2.graphics.renderer.TextureAtlas) -> a
    com.tyrlib2.graphics.renderer.TextureAtlas getTextureAtlas(java.lang.String) -> d
    com.tyrlib2.graphics.renderables.Skybox createSkybox(java.lang.String,com.tyrlib2.math.Vector3) -> a
    int[] $SWITCH_TABLE$com$tyrlib2$graphics$lighting$Light$Type() -> l
com.tyrlib2.graphics.scene.SceneNode -> com.tyrlib2.graphics.scene.SceneNode:
    long serialVersionUID -> serialVersionUID
    java.util.List attachedObjects -> attachedObjects
    java.util.List children -> children
    com.tyrlib2.graphics.scene.SceneNode parent -> parent
    com.tyrlib2.math.Vector3 pos -> pos
    com.tyrlib2.math.Vector3 absolutePos -> absolutePos
    com.tyrlib2.math.Quaternion rot -> rot
    com.tyrlib2.math.Quaternion absoluteRot -> absoluteRot
    com.tyrlib2.math.Vector3 scale -> scale
    com.tyrlib2.math.Vector3 absoluteScale -> absoluteScale
    float[] modelMatrix -> modelMatrix
    boolean update -> update
    boolean dirty -> dirty
    float[] translation -> a
    float[] rotation -> b
    float[] scaling -> c
    float[] transPos -> d
    float[] untransfPos -> e
    void forceUpdate() -> forceUpdate
    void setDirty() -> setDirty
    com.tyrlib2.math.Vector3 getAbsolutePos() -> getAbsolutePos
    com.tyrlib2.math.Vector3 getCachedAbsolutePos() -> getCachedAbsolutePos
    com.tyrlib2.math.Vector3 getCachedAbsolutePosVector() -> getCachedAbsolutePosVector
    void setAbsolutePos(com.tyrlib2.math.Vector3) -> setAbsolutePos
    com.tyrlib2.math.Vector3 getRelativePos() -> getRelativePos
    void setRelativePos(com.tyrlib2.math.Vector3) -> setRelativePos
    void setRelativePos(float,float,float) -> setRelativePos
    com.tyrlib2.math.Quaternion getAbsoluteRot() -> getAbsoluteRot
    com.tyrlib2.math.Quaternion getCachedAbsoluteRot() -> getCachedAbsoluteRot
    void setAbsoluteRot(com.tyrlib2.math.Quaternion) -> setAbsoluteRot
    void setRelativeRot(com.tyrlib2.math.Quaternion) -> setRelativeRot
    void setRelativeRot(float,float,float,float) -> setRelativeRot
    com.tyrlib2.math.Quaternion getRelativeRot() -> getRelativeRot
    com.tyrlib2.math.Vector3 getAbsoluteScale() -> getAbsoluteScale
    com.tyrlib2.math.Vector3 getCachedAbsoluteScale() -> getCachedAbsoluteScale
    void setAbsoluteScale(com.tyrlib2.math.Vector3) -> setAbsoluteScale
    com.tyrlib2.math.Vector3 getRelativeScale() -> getRelativeScale
    void setRelativeScale(com.tyrlib2.math.Vector3) -> setRelativeScale
    void attachSceneObject(com.tyrlib2.graphics.scene.SceneObject) -> attachSceneObject
    void detachSceneObject(com.tyrlib2.graphics.scene.SceneObject) -> detachSceneObject
    int getCountAttachedObjects() -> getCountAttachedObjects
    void attachChild(com.tyrlib2.graphics.scene.SceneNode) -> attachChild
    void detachChild(com.tyrlib2.graphics.scene.SceneNode) -> detachChild
    int getCountChildren() -> getCountChildren
    void detach() -> detach
    com.tyrlib2.graphics.scene.SceneNode getParent() -> getParent
    com.tyrlib2.graphics.scene.SceneNode createChild(com.tyrlib2.math.Vector3) -> createChild
    com.tyrlib2.graphics.scene.SceneNode createChild(float,float,float) -> createChild
    com.tyrlib2.graphics.scene.SceneNode createChild() -> createChild
    void update(com.tyrlib2.math.Quaternion,com.tyrlib2.math.Vector3,float[]) -> update
    void update() -> update
    void setIdentityMatrix(float[]) -> a
    void updateAll(com.tyrlib2.math.Quaternion,com.tyrlib2.math.Vector3,float[]) -> updateAll
    float[] getModelMatrix() -> getModelMatrix
    void translate(com.tyrlib2.math.Vector3) -> translate
    void translate(float,float,float) -> translate
    void rotate(com.tyrlib2.math.Quaternion) -> rotate
    void scale(com.tyrlib2.math.Vector3) -> scale
    boolean isDirty() -> isDirty
com.tyrlib2.graphics.scene.SceneObject -> com.tyrlib2.graphics.scene.f:
    com.tyrlib2.graphics.scene.SceneNode parent -> p
    int mask -> q
    void attachTo(com.tyrlib2.graphics.scene.SceneNode) -> a
    com.tyrlib2.graphics.scene.SceneNode detach() -> b
    com.tyrlib2.graphics.scene.SceneNode getParent() -> v
    com.tyrlib2.math.Vector3 getAbsolutePos() -> w
    com.tyrlib2.math.Vector3 getRelativePos() -> x
    void setRelativePos(com.tyrlib2.math.Vector3) -> d
    void onTransformed() -> r
    int getMask() -> y
    void setMask(int) -> j
com.tyrlib2.graphics.text.AttribVariable -> com.tyrlib2.graphics.text.AttribVariable:
    com.tyrlib2.graphics.text.AttribVariable A_Position -> A_Position
    com.tyrlib2.graphics.text.AttribVariable A_TexCoordinate -> A_TexCoordinate
    com.tyrlib2.graphics.text.AttribVariable A_MVPMatrixIndex -> A_MVPMatrixIndex
    int mHandle -> mHandle
    java.lang.String mName -> mName
    com.tyrlib2.graphics.text.AttribVariable[] ENUM$VALUES -> a
    int getHandle() -> getHandle
    java.lang.String getName() -> getName
    com.tyrlib2.graphics.text.AttribVariable[] values() -> values
    com.tyrlib2.graphics.text.AttribVariable valueOf(java.lang.String) -> valueOf
com.tyrlib2.graphics.text.Font -> com.tyrlib2.graphics.text.a:
    com.tyrlib2.graphics.text.IGLText glText -> a
    java.lang.String name -> b
    java.lang.String source -> c
com.tyrlib2.graphics.text.GLText -> com.tyrlib2.graphics.text.b:
    float[] modelMatrix -> a
    com.tyrlib2.graphics.text.SpriteBatch batch -> b
    int fontPadX -> c
    int fontPadY -> d
    int size -> e
    float fontHeight -> f
    float fontAscent -> g
    float fontDescent -> h
    int textureId -> i
    int textureSize -> j
    com.tyrlib2.graphics.renderer.TextureRegion textureRgn -> k
    float charWidthMax -> l
    float charHeight -> m
    float[] charWidths -> n
    com.tyrlib2.graphics.renderer.TextureRegion[] charRgn -> o
    int cellWidth -> p
    int cellHeight -> q
    int rowCnt -> r
    int colCnt -> s
    float scaleX -> t
    float scaleY -> u
    float spaceX -> v
    com.tyrlib2.graphics.text.programs.Program mProgram -> w
    int mColorHandle -> x
    int mTextureUniformHandle -> y
    boolean load(java.lang.String,int,int,int) -> a
    void begin(float,float,float,float,float[]) -> a
    void initDraw(float,float,float,float) -> a
    void end() -> a
    void draw(java.lang.String,float,float,float[]) -> a
    void draw(java.lang.String,float,float) -> a
    float drawCX(java.lang.String,float,float) -> b
    void setScale(float) -> a
    void setScale(float,float) -> a
    float getScaleX() -> b
    float getScaleY() -> c
    float getLength(java.lang.String) -> a
    float getCharHeight() -> d
    float getDescent() -> e
    int getSize() -> f
com.tyrlib2.graphics.text.IGLText -> com.tyrlib2.graphics.text.c:
    boolean load(java.lang.String,int,int,int) -> a
    void begin(float,float,float,float,float[]) -> a
    void end() -> a
    void draw(java.lang.String,float,float,float[]) -> a
    float drawCX(java.lang.String,float,float) -> b
    void setScale(float) -> a
    void setScale(float,float) -> a
    float getScaleX() -> b
    float getScaleY() -> c
    float getLength(java.lang.String) -> a
    float getCharHeight() -> d
    float getDescent() -> e
    int getSize() -> f
com.tyrlib2.graphics.text.SpriteBatch -> com.tyrlib2.graphics.text.d:
    com.tyrlib2.graphics.text.Vertices vertices -> a
    float[] vertexBuffer -> b
    int bufferIndex -> c
    int maxSprites -> d
    int numSprites -> e
    float[] mVPMatrix -> f
    float[] uMVPMatrices -> g
    int mMVPMatricesHandle -> h
    float[] mMVPMatrix -> i
    void beginBatch(float[]) -> a
    void endBatch() -> a
    void drawSprite(float,float,float,float,com.tyrlib2.graphics.renderer.TextureRegion,float[]) -> a
com.tyrlib2.graphics.text.Utilities -> com.tyrlib2.graphics.text.e:
    int createProgram(int,int,com.tyrlib2.graphics.text.AttribVariable[]) -> a
    int loadShader(int,java.lang.String) -> a
com.tyrlib2.graphics.text.Vertices -> com.tyrlib2.graphics.text.f:
    int positionCnt -> a
    int vertexStride -> b
    int vertexSize -> c
    java.nio.IntBuffer vertices -> d
    java.nio.ShortBuffer indices -> e
    int numVertices -> f
    int numIndices -> g
    int[] tmpBuffer -> h
    int mTextureCoordinateHandle -> i
    int mPositionHandle -> j
    int mMVPIndexHandle -> k
    int[] buffers -> l
    void setVertices(float[],int,int) -> a
    void setIndices(short[],int,int) -> a
    void bind() -> a
    void draw(int,int,int) -> a
    void unbind() -> b
com.tyrlib2.graphics.text.programs.BatchTextProgram -> com.tyrlib2.graphics.text.a.a:
    com.tyrlib2.graphics.text.AttribVariable[] programVariables -> a
    void init() -> a
com.tyrlib2.graphics.text.programs.Program -> com.tyrlib2.graphics.text.a.b:
    int programHandle -> a
    int vertexShaderHandle -> b
    int fragmentShaderHandle -> c
    boolean mInitialized -> d
    void init() -> a
    void init(java.lang.String,java.lang.String,com.tyrlib2.graphics.text.AttribVariable[]) -> a
    int getHandle() -> b
com.tyrlib2.gui.Button -> com.tyrlib2.gui.Button:
    java.util.Map normalBgImages -> a
    java.util.Map highlightBgImages -> b
    java.util.Map bgImageBoxes -> c
    com.tyrlib2.util.Color normalTextColor -> d
    com.tyrlib2.util.Color highlightTextColor -> e
    float alpha -> f
    com.tyrlib2.gui.Label label -> g
    void onTouchEntersWindow(com.tyrlib2.math.Vector2) -> a
    void onTouchLeavesWindow() -> e_
    float getAlpha() -> b
    void setAlpha(float) -> a
com.tyrlib2.gui.Button$ButtonImagePosition -> com.tyrlib2.gui.Button$ButtonImagePosition:
    com.tyrlib2.gui.Button$ButtonImagePosition LEFT -> LEFT
    com.tyrlib2.gui.Button$ButtonImagePosition MIDDLE -> MIDDLE
    com.tyrlib2.gui.Button$ButtonImagePosition RIGHT -> RIGHT
    com.tyrlib2.gui.Button$ButtonImagePosition[] ENUM$VALUES -> a
    com.tyrlib2.gui.Button$ButtonImagePosition[] values() -> values
    com.tyrlib2.gui.Button$ButtonImagePosition valueOf(java.lang.String) -> valueOf
com.tyrlib2.gui.DestroyOnEvent -> com.tyrlib2.gui.a:
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrlib2.gui.Frame -> com.tyrlib2.gui.Frame:
    java.util.Map bgRegions -> a
    java.util.Map bgImageBoxes -> b
    float borderSize -> c
    float alpha -> d
    float getAlpha() -> b
    void setAlpha(float) -> a
    void setBgRegion(com.tyrlib2.gui.Frame$FrameImagePosition,java.lang.String) -> a
    com.tyrlib2.gui.ImageBox getImageBox(com.tyrlib2.gui.Frame$FrameImagePosition) -> a
    void setReceiveTouchEvents(boolean) -> a_
    void setPassTouchEventsThrough(boolean) -> b
com.tyrlib2.gui.Frame$FrameImagePosition -> com.tyrlib2.gui.Frame$FrameImagePosition:
    com.tyrlib2.gui.Frame$FrameImagePosition MIDDLE -> MIDDLE
    com.tyrlib2.gui.Frame$FrameImagePosition LEFT -> LEFT
    com.tyrlib2.gui.Frame$FrameImagePosition RIGHT -> RIGHT
    com.tyrlib2.gui.Frame$FrameImagePosition BOTTOM -> BOTTOM
    com.tyrlib2.gui.Frame$FrameImagePosition TOP -> TOP
    com.tyrlib2.gui.Frame$FrameImagePosition TOPLEFT -> TOPLEFT
    com.tyrlib2.gui.Frame$FrameImagePosition TOPRIGHT -> TOPRIGHT
    com.tyrlib2.gui.Frame$FrameImagePosition BOTTOMLEFT -> BOTTOMLEFT
    com.tyrlib2.gui.Frame$FrameImagePosition BOTTOMRIGHT -> BOTTOMRIGHT
    com.tyrlib2.gui.Frame$FrameImagePosition[] ENUM$VALUES -> a
    com.tyrlib2.gui.Frame$FrameImagePosition[] values() -> values
    com.tyrlib2.gui.Frame$FrameImagePosition valueOf(java.lang.String) -> valueOf
com.tyrlib2.gui.GUIRenderer -> com.tyrlib2.gui.b:
    java.util.List windows -> a
    boolean resort -> b
    int insertionID -> c
    void render(float[]) -> a
    void addWindow(com.tyrlib2.gui.Window) -> a
    void removeWindow(com.tyrlib2.gui.Window) -> b
    void notifyResort() -> a
    void renderShadow(float[]) -> b
    void setInsertionID(int) -> a_
    int getInsertionID() -> e
    void destroy() -> f
com.tyrlib2.gui.IEventListener -> com.tyrlib2.gui.c:
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrlib2.gui.ImageBox -> com.tyrlib2.gui.d:
    com.tyrlib2.graphics.renderables.Image2 image -> a
    java.lang.String atlasName -> b
    java.lang.String atlasRegion -> c
    float getAlpha() -> b
    void setAlpha(float) -> a
    java.lang.String getAtlasRegion() -> g
    void setAtlasRegion(java.lang.String) -> a
    void setTexture(com.tyrlib2.graphics.renderer.Texture) -> a
    com.tyrlib2.graphics.materials.TexturedMaterial getMaterial() -> h
    com.tyrlib2.graphics.renderables.Image2 getImage() -> i
com.tyrlib2.gui.ItemList -> com.tyrlib2.gui.e:
    java.util.List itemListEntries -> a
    int displayItems -> b
    float padding -> c
    boolean touching -> d
    int displaySize -> e
    float itemSize -> f
    com.tyrlib2.math.Vector2 lastPoint -> g
    int middle -> h
    boolean offseted -> i
    float height -> j
    long oldPriority -> k
    int listRotation -> l
    void addItemListEntry(com.tyrlib2.gui.ItemListEntry) -> a
    void removeItemListEntry(com.tyrlib2.gui.ItemListEntry) -> b
    void addItemListEntry(com.tyrlib2.gui.ItemListEntry,int) -> a
    boolean isOutsideDisplay(int) -> e
    boolean isInDisplay(int) -> f
    void correctOffset() -> g
    void reposition() -> h
    com.tyrlib2.gui.ItemListEntry getEntry(int) -> b
    int getCountEntries() -> i
    void onTouchDownWindow(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent) -> a
    boolean onTouchMove(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent,int) -> a
    void scroll(float) -> b
    void rotate(int) -> g
    void clearRotation() -> j
    boolean onTouchUp(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent,int) -> c
    void clear() -> k
    int getMaxVisibleItems() -> u_
    void setReceiveTouchEvents(boolean) -> a_
com.tyrlib2.gui.ItemListEntry -> com.tyrlib2.gui.f:
    int position -> o
com.tyrlib2.gui.Label -> com.tyrlib2.gui.g:
    com.tyrlib2.graphics.renderables.FormattedText2 text -> a
    com.tyrlib2.graphics.renderables.Rectangle2 background -> b
    int layer -> c
    java.util.List linkRegions -> d
    java.util.List imgRegions -> e
    void addLinkRegions() -> m
    void clearLinkRegions() -> n
    void addImgRegions() -> o
    void clearImgRegions() -> p
    void setLayer(int) -> b
    java.lang.String getText() -> g
    void setText(java.lang.String) -> a
    com.tyrlib2.graphics.renderables.FormattedText2$ALIGNMENT getAlignment() -> h
    void setAlignment(com.tyrlib2.graphics.renderables.FormattedText2$ALIGNMENT) -> a
    void setColor(com.tyrlib2.util.Color) -> a
    void setBgColor(com.tyrlib2.util.Color) -> b
    com.tyrlib2.graphics.renderables.Rectangle2 getBackground() -> i
    float getAlpha() -> b
    void setAlpha(float) -> a
    com.tyrlib2.graphics.text.Font getFont() -> j
    void setFont(com.tyrlib2.graphics.text.Font) -> a
    com.tyrlib2.graphics.renderables.FormattedText2 getFormattedText() -> k
    long getPriority() -> c
    void setSize(com.tyrlib2.math.Vector2) -> b
    com.tyrlib2.math.Vector2 getAbsolutePos() -> l
com.tyrlib2.gui.Label$1 -> com.tyrlib2.gui.h:
    com.tyrlib2.gui.Label this$0 -> a
    com.tyrlib2.graphics.renderables.FormattedText2$TextSection val$s -> b
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrlib2.gui.Overlay -> com.tyrlib2.gui.i:
    com.tyrlib2.graphics.renderables.Rectangle2 bg -> a
    float getAlpha() -> b
    void setAlpha(float) -> a
    void setSize(com.tyrlib2.math.Vector2) -> b
com.tyrlib2.gui.Paint -> com.tyrlib2.gui.j:
    com.tyrlib2.util.Color color -> a
    int borderWidth -> b
    com.tyrlib2.util.Color borderColor -> c
com.tyrlib2.gui.ProgressBar -> com.tyrlib2.gui.k:
    com.tyrlib2.gui.Window bg -> a
    com.tyrlib2.gui.Overlay bar -> b
    float progress -> c
    float maxProgress -> d
    void setProgress(float) -> b
    float getAlpha() -> b
    void setAlpha(float) -> a
com.tyrlib2.gui.ScaledVector1 -> com.tyrlib2.gui.ScaledVector1:
    float x -> a
    int scaleIndex -> b
    com.tyrlib2.gui.ScaledVector1$ScaleDirection dir -> c
    float get() -> a
com.tyrlib2.gui.ScaledVector1$ScaleDirection -> com.tyrlib2.gui.ScaledVector1$ScaleDirection:
    com.tyrlib2.gui.ScaledVector1$ScaleDirection X -> X
    com.tyrlib2.gui.ScaledVector1$ScaleDirection Y -> Y
    com.tyrlib2.gui.ScaledVector1$ScaleDirection[] ENUM$VALUES -> a
    com.tyrlib2.gui.ScaledVector1$ScaleDirection[] values() -> values
    com.tyrlib2.gui.ScaledVector1$ScaleDirection valueOf(java.lang.String) -> valueOf
com.tyrlib2.gui.ScaledVector2 -> com.tyrlib2.gui.ScaledVector2:
    long serialVersionUID -> serialVersionUID
    float x -> x
    float y -> y
    int scaleIndex -> scaleIndex
    com.tyrlib2.math.Vector2 get() -> get
    com.tyrlib2.math.Vector2 get(int) -> get
    com.tyrlib2.gui.ScaledVector2 multiply(float) -> multiply
    com.tyrlib2.gui.ScaledVector2 add(com.tyrlib2.gui.ScaledVector2) -> add
    com.tyrlib2.gui.ScaledVector2 sub(com.tyrlib2.gui.ScaledVector2) -> sub
com.tyrlib2.gui.Skin -> com.tyrlib2.gui.l:
    java.lang.String TEXTURE_ATLAS -> a
    com.tyrlib2.util.Color LABEL_TEXT_COLOR -> b
    com.tyrlib2.util.Color LABEL_BG_COLOR -> c
    java.lang.String LABEL_FONT -> d
    java.lang.String BUTTON_FONT -> e
    java.lang.String BUTTON_NORMAL_LEFT -> f
    java.lang.String BUTTON_NORMAL_MIDDLE -> g
    java.lang.String BUTTON_NORMAL_RIGHT -> h
    float BUTTON_LEFT_SIZE -> i
    float BUTTON_RIGHT_SIZE -> j
    java.lang.String BUTTON_HIGHLIGHT_LEFT -> k
    java.lang.String BUTTON_HIGHLIGHT_MIDDLE -> l
    java.lang.String BUTTON_HIGHLIGHT_RIGHT -> m
    com.tyrlib2.util.Color BUTTON_NORMAL_TEXT_COLOR -> n
    com.tyrlib2.util.Color BUTTON_HIGHLIGHT_TEXT_COLOR -> o
    java.lang.String FRAME_LEFT -> p
    java.lang.String FRAME_RIGHT -> q
    java.lang.String FRAME_TOP -> r
    java.lang.String FRAME_BOTTOM -> s
    java.lang.String FRAME_TOPLEFT -> t
    java.lang.String FRAME_TOPRIGHT -> u
    java.lang.String FRAME_BOTTOMLEFT -> v
    java.lang.String FRAME_BOTTOMRIGHT -> w
    java.lang.String FRAME_MIDDLE -> x
    com.tyrlib2.math.Vector2 FRAME_MIDDLE_REPEAT -> y
    float FRAME_BORDER_SIZE -> z
    com.tyrlib2.util.Color OVERLAY_COLOR -> A
    float OVERLAY_MAX_ALPHA -> B
    float MESSAGE_BOX_X -> C
    float MESSAGE_BOX_Y -> D
    float MESSAGE_BOX_W -> E
    float MESSAGE_BOX_H -> F
    float MESSAGE_BOX_BUTTON_W -> G
    float MESSAGE_BOX_BUTTON_H -> H
    float MESSAGE_BOX_BUTTON_PAD_Y -> I
    float MESSAGE_BOX_LABEL_X -> J
    float MESSAGE_BOX_LABEL_Y -> K
    com.tyrlib2.gui.Paint PROGRESS_BAR_BG_PAINT -> L
    com.tyrlib2.util.Color PROGRESS_BAR_COLOR -> M
    float TOOLTIP_MAX_ALPHA -> N
    float TOOLTIP_FADE_TIME -> O
    com.tyrlib2.math.Vector2 TOOLTIP_PADDING -> P
    com.tyrlib2.gui.Paint TOOLTIP_PAINT -> Q
com.tyrlib2.gui.Tooltip -> com.tyrlib2.gui.m:
    float fadeTime -> a
    float alpha -> b
    com.tyrlib2.gui.Tooltip$AppearOnTouch appearOnTouch -> c
    com.tyrlib2.gui.Tooltip$DisappearOnTouch disappearOnTouch -> d
    com.tyrlib2.gui.Tooltip$TargetDestroyed targetDestroyed -> e
    com.tyrlib2.gui.Tooltip$TargetFadedOut targetFadedOut -> f
    java.util.List targets -> g
    void addTarget(com.tyrlib2.gui.Window) -> a
    void destroy() -> f
    float getAlpha() -> b
    void setAlpha(float) -> a
    float access$0(com.tyrlib2.gui.Tooltip) -> a
com.tyrlib2.gui.Tooltip$AppearOnTouch -> com.tyrlib2.gui.n:
    com.tyrlib2.gui.Tooltip this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrlib2.gui.Tooltip$DisappearOnTouch -> com.tyrlib2.gui.o:
    com.tyrlib2.gui.Tooltip this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrlib2.gui.Tooltip$TargetDestroyed -> com.tyrlib2.gui.p:
    com.tyrlib2.gui.Tooltip this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrlib2.gui.Tooltip$TargetFadedOut -> com.tyrlib2.gui.q:
    com.tyrlib2.gui.Tooltip this$0 -> a
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrlib2.gui.Window -> com.tyrlib2.gui.Window:
    java.lang.String name -> a
    java.util.List children -> b
    com.tyrlib2.math.Vector2 size -> c
    com.tyrlib2.math.Vector2 sizeRelaxation -> d
    com.tyrlib2.math.Vector2 relaxedSize -> af
    com.tyrlib2.movement.DirectMovement movement -> e
    com.tyrlib2.movement.Speed speed -> f
    com.tyrlib2.graphics.scene.SceneNode node -> ag
    boolean destroyed -> ah
    boolean receiveTouchEvents -> ai
    boolean passTouchEventsThrough -> aj
    boolean visible -> ak
    boolean touchInWindow -> al
    java.util.List components -> am
    long priority -> an
    java.util.Map eventListeners -> g
    int countComponents -> h
    boolean inheritsAlpha -> ao
    com.tyrlib2.graphics.renderer.Viewport viewport -> i
    com.tyrlib2.math.Vector3 absolutePosVector -> j
    com.tyrlib2.gui.Window$BLEND_STATE blendState -> k
    float blendSpeed -> l
    float targetAlpha -> m
    java.util.Map data -> n
    com.tyrlib2.gui.Window parent -> ap
    float maxAlpha -> o
    boolean moving -> p
    boolean drag -> q
    boolean inheritsFade -> r
    int insertionID -> s
    void fadeOut(float,float) -> a
    void fadeIn(float,float) -> b
    void endBlend() -> r
    void addChild(com.tyrlib2.gui.Window) -> b
    void removeChild(com.tyrlib2.gui.Window) -> c
    com.tyrlib2.gui.Window getChild(int) -> c
    void onUpdate(float) -> onUpdate
    void updateBlending(float) -> b
    void destroy() -> f
    boolean isFinished() -> isFinished
    java.lang.String getName() -> s
    void setInheritsAlpha(boolean) -> c
    void setAlpha(float) -> a
    float getAlpha() -> b
    void setRelativePos(com.tyrlib2.math.Vector2) -> c
    com.tyrlib2.math.Vector2 getRelativePos() -> t
    com.tyrlib2.math.Vector2 getAbsolutePos() -> l
    float getAbsolutePosX() -> u
    float getAbsolutePosY() -> v
    void setSize(com.tyrlib2.math.Vector2) -> b
    void setSizeRelaxation(com.tyrlib2.math.Vector2) -> d
    com.tyrlib2.math.Vector2 getSize() -> w
    long getPriority() -> c
    void setPriority(long) -> a
    boolean onTouchDown(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent,int) -> b
    void onTouchDownWindow(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent) -> a
    boolean onTouchUp(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent,int) -> c
    void onTouchUpWindow(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent) -> b
    boolean onTouchMove(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent,int) -> a
    void onTouchMoveWindow(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent) -> c
    void onTouchEntersWindow(com.tyrlib2.math.Vector2) -> a
    void onTouchLeavesWindow() -> e_
    boolean isEnabled() -> h_
    void setReceiveTouchEvents(boolean) -> a_
    void setPassTouchEventsThrough(boolean) -> b
    void setVisible(boolean) -> d
    boolean isVisible() -> x
    void moveTo(com.tyrlib2.math.Vector2,float) -> a
    void moveBy(com.tyrlib2.math.Vector2,float) -> b
    void render(float[]) -> a
    void addComponent(com.tyrlib2.graphics.renderer.IRenderable) -> a
    void addComponent(com.tyrlib2.graphics.renderer.IRenderable,int) -> a
    void addEventListener(com.tyrlib2.gui.WindowEvent$WindowEventType,com.tyrlib2.gui.IEventListener) -> a
    void removeEventListener(com.tyrlib2.gui.WindowEvent$WindowEventType,com.tyrlib2.gui.IEventListener) -> b
    void fireEvent(com.tyrlib2.gui.WindowEvent) -> a
    void setData(java.lang.String,java.lang.Object) -> a
    java.lang.Object getData(java.lang.String) -> g
    com.tyrlib2.gui.Window getParent() -> y
    void setMaxAlpha(float) -> c
    float getMaxAlpha() -> z
    void setRecuresiveReceiveTouchEvents(boolean) -> e
    void setInheritsFade(boolean) -> f
    boolean isMoving() -> A
    void renderShadow(float[]) -> b
    void setInsertionID(int) -> a_
    int getInsertionID() -> e
    java.lang.String toString() -> toString
    com.tyrlib2.math.Vector2 getSizeRelaxation() -> B
    com.tyrlib2.graphics.renderer.IRenderable getComponent(int) -> d
    void addTextTooltip(java.lang.String) -> h
    com.tyrlib2.gui.Label getTooltipLabel() -> C
com.tyrlib2.gui.Window$BLEND_STATE -> com.tyrlib2.gui.Window$BLEND_STATE:
    com.tyrlib2.gui.Window$BLEND_STATE IDLE -> IDLE
    com.tyrlib2.gui.Window$BLEND_STATE FADE_IN -> FADE_IN
    com.tyrlib2.gui.Window$BLEND_STATE FADE_OUT -> FADE_OUT
    com.tyrlib2.gui.Window$BLEND_STATE[] ENUM$VALUES -> a
    com.tyrlib2.gui.Window$BLEND_STATE[] values() -> values
    com.tyrlib2.gui.Window$BLEND_STATE valueOf(java.lang.String) -> valueOf
com.tyrlib2.gui.WindowEvent -> com.tyrlib2.gui.WindowEvent:
    com.tyrlib2.gui.WindowEvent$WindowEventType type -> a
    com.tyrlib2.gui.Window source -> b
    java.util.Map params -> c
    com.tyrlib2.gui.WindowEvent$WindowEventType getType() -> a
    java.lang.Object getParam(java.lang.String) -> a
    void setParam(java.lang.String,java.lang.Object) -> a
    com.tyrlib2.gui.Window getSource() -> b
com.tyrlib2.gui.WindowEvent$WindowEventType -> com.tyrlib2.gui.WindowEvent$WindowEventType:
    com.tyrlib2.gui.WindowEvent$WindowEventType FADE_IN_FINISHED -> FADE_IN_FINISHED
    com.tyrlib2.gui.WindowEvent$WindowEventType FADE_OUT_FINISHED -> FADE_OUT_FINISHED
    com.tyrlib2.gui.WindowEvent$WindowEventType MOVEMENT_FINISHED -> MOVEMENT_FINISHED
    com.tyrlib2.gui.WindowEvent$WindowEventType TOUCH_ENTERS -> TOUCH_ENTERS
    com.tyrlib2.gui.WindowEvent$WindowEventType TOUCH_LEAVES -> TOUCH_LEAVES
    com.tyrlib2.gui.WindowEvent$WindowEventType TOUCH_MOVES -> TOUCH_MOVES
    com.tyrlib2.gui.WindowEvent$WindowEventType TOUCH_DOWN -> TOUCH_DOWN
    com.tyrlib2.gui.WindowEvent$WindowEventType TOUCH_UP -> TOUCH_UP
    com.tyrlib2.gui.WindowEvent$WindowEventType MOUSE_ENTERS -> MOUSE_ENTERS
    com.tyrlib2.gui.WindowEvent$WindowEventType MOUSE_LEAVES -> MOUSE_LEAVES
    com.tyrlib2.gui.WindowEvent$WindowEventType DESTROYED -> DESTROYED
    com.tyrlib2.gui.WindowEvent$WindowEventType CONFIRMED -> CONFIRMED
    com.tyrlib2.gui.WindowEvent$WindowEventType TOUCH -> TOUCH
    com.tyrlib2.gui.WindowEvent$WindowEventType CALL_LINK -> CALL_LINK
    com.tyrlib2.gui.WindowEvent$WindowEventType SIZE_CHANGED -> SIZE_CHANGED
    com.tyrlib2.gui.WindowEvent$WindowEventType FADE_IN_STARTED -> FADE_IN_STARTED
    com.tyrlib2.gui.WindowEvent$WindowEventType[] ENUM$VALUES -> a
    com.tyrlib2.gui.WindowEvent$WindowEventType[] values() -> values
    com.tyrlib2.gui.WindowEvent$WindowEventType valueOf(java.lang.String) -> valueOf
com.tyrlib2.gui.WindowManager -> com.tyrlib2.gui.r:
    com.tyrlib2.gui.WindowManager instance -> c
    java.util.Map windows -> d
    com.tyrlib2.game.Updater updater -> a
    com.tyrlib2.graphics.scene.SceneNode rootNode -> e
    com.tyrlib2.gui.GUIRenderer renderer -> f
    com.tyrlib2.gui.Skin skin -> g
    com.tyrlib2.math.Vector2[] scales -> b
    boolean exists(java.lang.String) -> a
    void setScales(com.tyrlib2.math.Vector2[]) -> a
    com.tyrlib2.math.Vector2 getScale(int) -> a
    void destroy() -> a
    void loadSkin(com.tyrlib2.gui.Skin) -> a
    com.tyrlib2.gui.Skin getSkin() -> b
    com.tyrlib2.gui.WindowManager getInstance() -> c
    void destroyWindow(com.tyrlib2.gui.Window) -> a
    void addWindow(com.tyrlib2.gui.Window) -> b
    com.tyrlib2.gui.Window createWindow(java.lang.String,com.tyrlib2.math.Vector2) -> a
    com.tyrlib2.gui.Window createWindow(java.lang.String,com.tyrlib2.math.Vector2,com.tyrlib2.math.Vector2) -> a
    com.tyrlib2.gui.Window createRectWindow(java.lang.String,com.tyrlib2.math.Vector2,com.tyrlib2.math.Vector2,com.tyrlib2.gui.Paint) -> a
    com.tyrlib2.gui.Window createLabel(java.lang.String,com.tyrlib2.math.Vector2,java.lang.String) -> a
    com.tyrlib2.gui.Window createLabel(java.lang.String,com.tyrlib2.gui.ScaledVector2,java.lang.String) -> a
    com.tyrlib2.gui.Frame createFrame(java.lang.String,com.tyrlib2.math.Vector2,com.tyrlib2.math.Vector2) -> b
    com.tyrlib2.gui.Frame createFrame(java.lang.String,com.tyrlib2.math.Vector2,com.tyrlib2.gui.ScaledVector2) -> a
    com.tyrlib2.gui.ImageBox createImageBox(java.lang.String,com.tyrlib2.math.Vector2,java.lang.String,java.lang.String,com.tyrlib2.math.Vector2,com.tyrlib2.math.Vector2) -> a
    com.tyrlib2.gui.Window createImageBox(java.lang.String,com.tyrlib2.math.Vector2,java.lang.String,java.lang.String,com.tyrlib2.math.Vector2) -> a
    com.tyrlib2.gui.Window createImageBox(java.lang.String,com.tyrlib2.gui.ScaledVector2,java.lang.String,java.lang.String,com.tyrlib2.gui.ScaledVector2) -> a
    com.tyrlib2.gui.Window createImageBox(java.lang.String,com.tyrlib2.math.Vector2,java.lang.String,java.lang.String,com.tyrlib2.gui.ScaledVector2) -> a
    com.tyrlib2.gui.Window createOverlay(java.lang.String,com.tyrlib2.math.Vector2,com.tyrlib2.math.Vector2,com.tyrlib2.util.Color) -> a
    com.tyrlib2.gui.Window createItemList(java.lang.String,com.tyrlib2.math.Vector2,com.tyrlib2.math.Vector2,float,int) -> a
    com.tyrlib2.gui.Window createItemList(java.lang.String,com.tyrlib2.gui.ScaledVector2,com.tyrlib2.gui.ScaledVector2,float,int) -> a
    com.tyrlib2.gui.Window createOverlay(java.lang.String,com.tyrlib2.util.Color) -> a
    com.tyrlib2.gui.Window createTooltip(java.lang.String,com.tyrlib2.math.Vector2) -> b
    void addTextTooltip(com.tyrlib2.gui.Window,java.lang.String) -> a
    com.tyrlib2.gui.Window createProgressBar(java.lang.String,com.tyrlib2.math.Vector2,com.tyrlib2.math.Vector2,float) -> a
    com.tyrlib2.gui.Window createProgressBar(java.lang.String,com.tyrlib2.gui.ScaledVector2,com.tyrlib2.gui.ScaledVector2,float) -> a
    void removeWindow(com.tyrlib2.gui.Window) -> c
    com.tyrlib2.gui.Window getWindow(java.lang.String) -> b
    com.tyrlib2.graphics.scene.SceneNode getRootNode() -> d
    void notifyResort() -> e
    com.tyrlib2.gui.Skin access$0(com.tyrlib2.gui.WindowManager) -> a
com.tyrlib2.gui.WindowManager$2 -> com.tyrlib2.gui.s:
    com.tyrlib2.gui.WindowManager this$0 -> a
    com.tyrlib2.gui.Window val$prev -> b
    com.tyrlib2.gui.Tooltip val$t -> c
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrlib2.gui.WindowManager$3 -> com.tyrlib2.gui.t:
    com.tyrlib2.gui.WindowManager this$0 -> a
    com.tyrlib2.gui.Label val$tooltipText -> b
    com.tyrlib2.gui.Window val$prev -> c
    com.tyrlib2.gui.Tooltip val$t -> d
    com.tyrlib2.gui.Window val$tooltipBg -> e
    void onEvent(com.tyrlib2.gui.WindowEvent) -> a
com.tyrlib2.input.AndroidKeyboardEvent -> com.tyrlib2.b.a:
    short keyCode -> a
    android.view.KeyEvent e -> b
    int action -> c
    int getAction() -> a
    char getKeyChar() -> b
    short getKeyCode() -> c
    boolean isPrintable() -> d
    int getModifiers() -> e
com.tyrlib2.input.AndroidMotionEvent -> com.tyrlib2.b.b:
    android.view.MotionEvent event -> a
    int getAction() -> a
    int getPointerId(int) -> a
    float getX(int) -> b
    float getY(int) -> c
    int getPointerCount() -> b
    int getButton() -> c
com.tyrlib2.input.AndroidView -> com.tyrlib2.b.c:
    android.view.View view -> a
    float getWidth() -> a
    float getHeight() -> b
com.tyrlib2.input.Controller -> com.tyrlib2.b.d:
com.tyrlib2.input.IKeyboardEvent -> com.tyrlib2.b.e:
    int getAction() -> a
    char getKeyChar() -> b
    short getKeyCode() -> c
    boolean isPrintable() -> d
    int getModifiers() -> e
com.tyrlib2.input.IKeyboardListener -> com.tyrlib2.b.f:
    boolean onPress(com.tyrlib2.input.IKeyboardEvent) -> a
    boolean onRelease(com.tyrlib2.input.IKeyboardEvent) -> b
com.tyrlib2.input.IMotionEvent -> com.tyrlib2.b.g:
    int getAction() -> a
    int getPointerId(int) -> a
    float getX(int) -> b
    float getY(int) -> c
    int getPointerCount() -> b
    int getButton() -> c
com.tyrlib2.input.IMoveListener -> com.tyrlib2.b.h:
com.tyrlib2.input.IScrollListener -> com.tyrlib2.b.i:
com.tyrlib2.input.ITouchListener -> com.tyrlib2.b.j:
    boolean onTouchDown(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent,int) -> b
    boolean onTouchUp(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent,int) -> c
    boolean onTouchMove(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent,int) -> a
    boolean isEnabled() -> h_
com.tyrlib2.input.IView -> com.tyrlib2.b.k:
    float getWidth() -> a
    float getHeight() -> b
com.tyrlib2.input.InputManager -> com.tyrlib2.b.l:
    java.util.List touchListeners -> i
    java.util.List keyListeners -> j
    java.util.List backListeners -> k
    java.util.List scrollListeners -> l
    java.util.List moveListeners -> m
    boolean touching -> n
    com.tyrlib2.math.Vector2 lastTouch -> o
    com.tyrlib2.input.InputManager instance -> p
    int VK_ENTER -> a
    int VK_BACK_SPACE -> b
    int VK_V -> c
    int VK_ESC -> d
    int CTRL_MASK -> e
    int VK_SPACE -> f
    int VK_PLUS -> g
    int VK_MINUS -> h
    boolean sort -> q
    java.util.List pressedKeys -> r
    com.tyrlib2.input.InputManager getInstance() -> a
    boolean onTouch(com.tyrlib2.input.IView,com.tyrlib2.input.IMotionEvent) -> a
    void addScrollListener(com.tyrlib2.input.IScrollListener) -> a
    void removeScrollListener(com.tyrlib2.input.IScrollListener) -> b
    void addMoveListener(com.tyrlib2.input.IMoveListener) -> a
    void removeMoveListener(com.tyrlib2.input.IMoveListener) -> b
    boolean onKeyEvent(com.tyrlib2.input.IKeyboardEvent) -> a
    void addKeyboardListener(com.tyrlib2.input.IKeyboardListener) -> a
    void removeKeyboardListener(com.tyrlib2.input.IKeyboardListener) -> b
    void addTouchListener(com.tyrlib2.input.ITouchListener) -> a
    void removeTouchListener(com.tyrlib2.input.ITouchListener) -> b
    boolean isAdded(com.tyrlib2.input.ITouchListener) -> c
    com.tyrlib2.math.Vector2 getLastTouch() -> b
    void sort() -> c
com.tyrlib2.input.TouchListener -> com.tyrlib2.b.m:
    long getPriority() -> c
    boolean onTouchDown(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent,int) -> b
    boolean onTouchUp(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent,int) -> c
    boolean onTouchMove(com.tyrlib2.math.Vector2,com.tyrlib2.input.IMotionEvent,int) -> a
    boolean isEnabled() -> h_
com.tyrlib2.main.AndroidMedia -> com.tyrlib2.c.a:
    com.tyrlib2.main.AndroidOpenGLActivity context -> b
    java.io.InputStream openAsset(java.lang.String) -> a
    java.io.FileInputStream openFileInput(java.lang.String) -> b
    java.io.InputStream openRawResource(int) -> a
    int getResourceID(java.lang.String,java.lang.String) -> a
    com.tyrlib2.graphics.text.IGLText createTextRenderer(java.lang.String,int) -> a
    com.tyrlib2.files.IBitmap loadStaticBitmap(int,boolean) -> a
    com.tyrlib2.files.IBitmap loadBitmap(int,boolean) -> b
    com.tyrlib2.bitmap.ITypeface createFromAsset(java.lang.String) -> c
    com.tyrlib2.bitmap.IPaint createPaint(com.tyrlib2.bitmap.ICanvas) -> a
    com.tyrlib2.bitmap.IDrawableBitmap createAlphaBitmap(int,int) -> a
    com.tyrlib2.bitmap.ICanvas createCanvas() -> a
    com.tyrlib2.math.Vector2 getScreenSize() -> b
    com.tyrlib2.bitmap.IDrawableBitmap createBitmap(int,int) -> b
    com.tyrlib2.bitmap.ICanvas createCanvas(com.tyrlib2.bitmap.IDrawableBitmap) -> a
    void loadBitmap(com.tyrlib2.files.IBitmap) -> a
    void serializeTo(java.io.Serializable,java.lang.String,java.lang.String) -> a
    java.lang.Object deserializeFrom(java.lang.String,java.lang.String) -> b
    void showKeyboard() -> c
    void hideKeyboard() -> d
    java.lang.String getClipboard() -> e
    void quit() -> f
    boolean fileExists(java.lang.String,java.lang.String) -> c
    com.tyrlib2.main.AndroidOpenGLActivity access$0(com.tyrlib2.main.AndroidMedia) -> a
com.tyrlib2.main.AndroidMedia$1 -> com.tyrlib2.c.b:
    com.tyrlib2.main.AndroidMedia this$0 -> a
    void run() -> run
com.tyrlib2.main.AndroidMedia$2 -> com.tyrlib2.c.c:
    com.tyrlib2.main.AndroidMedia this$0 -> a
    void run() -> run
com.tyrlib2.main.AndroidOpenGLActivity -> com.tyrlib2.c.d:
    android.opengl.GLSurfaceView glView -> n
    boolean RUNNING -> m
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
com.tyrlib2.main.Media -> com.tyrlib2.c.e:
    com.tyrlib2.main.Media CONTEXT -> a
    java.io.InputStream openAsset(java.lang.String) -> a
    java.io.FileInputStream openFileInput(java.lang.String) -> b
    java.io.InputStream openRawResource(int) -> a
    com.tyrlib2.files.IBitmap loadBitmap(int,boolean) -> b
    void loadBitmap(com.tyrlib2.files.IBitmap) -> a
    com.tyrlib2.bitmap.IDrawableBitmap createAlphaBitmap(int,int) -> a
    com.tyrlib2.bitmap.IDrawableBitmap createBitmap(int,int) -> b
    int getResourceID(java.lang.String,java.lang.String) -> a
    com.tyrlib2.graphics.text.IGLText createTextRenderer(java.lang.String,int) -> a
    com.tyrlib2.bitmap.ITypeface createFromAsset(java.lang.String) -> c
    com.tyrlib2.bitmap.IPaint createPaint(com.tyrlib2.bitmap.ICanvas) -> a
    com.tyrlib2.bitmap.ICanvas createCanvas() -> a
    com.tyrlib2.bitmap.ICanvas createCanvas(com.tyrlib2.bitmap.IDrawableBitmap) -> a
    com.tyrlib2.math.Vector2 getScreenSize() -> b
    void serializeTo(java.io.Serializable,java.lang.String,java.lang.String) -> a
    java.lang.Object deserializeFrom(java.lang.String,java.lang.String) -> b
    java.lang.String getClipboard() -> e
    com.tyrlib2.files.IBitmap loadStaticBitmap(int,boolean) -> a
    void quit() -> f
    boolean fileExists(java.lang.String,java.lang.String) -> c
com.tyrlib2.main.MultisampleConfigChooser -> com.tyrlib2.c.f:
    int[] mValue -> a
    boolean mUsesCoverageAa -> b
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.tyrlib2.main.OpenGLActivity -> com.tyrlib2.c.g:
    void go() -> f
com.tyrlib2.main.OpenGLSurfaceView -> com.tyrlib2.c.h:
    com.tyrlib2.main.OpenGLSurfaceView instance -> a
    com.tyrlib2.input.AndroidView view -> c
    android.view.inputmethod.InputMethodManager imm -> b
    void onDetachedFromWindow() -> onDetachedFromWindow
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    com.tyrlib2.input.AndroidView access$0(com.tyrlib2.main.OpenGLSurfaceView) -> a
com.tyrlib2.main.OpenGLSurfaceView$1 -> com.tyrlib2.c.i:
    com.tyrlib2.main.OpenGLSurfaceView this$0 -> a
    android.view.MotionEvent val$eventCopy -> b
    void run() -> run
com.tyrlib2.main.OpenGLSurfaceView$2 -> com.tyrlib2.c.j:
    com.tyrlib2.main.OpenGLSurfaceView this$0 -> a
    com.tyrlib2.input.AndroidKeyboardEvent val$eventCopy -> b
    void run() -> run
com.tyrlib2.main.OpenGLSurfaceView$3 -> com.tyrlib2.c.k:
    com.tyrlib2.main.OpenGLSurfaceView this$0 -> a
    com.tyrlib2.input.AndroidKeyboardEvent val$eventCopy -> b
    void run() -> run
com.tyrlib2.math.AABB -> com.tyrlib2.math.a:
    com.tyrlib2.math.Vector3 min -> a
    com.tyrlib2.math.Vector3 max -> b
    com.tyrlib2.math.Vector3 getCenter() -> a
    void getCenter(com.tyrlib2.math.Vector3) -> a
    com.tyrlib2.math.AABB createFromPoints(float[],int) -> a
    void updateWithPoints(float[],int) -> b
    com.tyrlib2.math.Vector3 intersectsRay(com.tyrlib2.math.Ray,float,float) -> a
    boolean intersectsAABB(com.tyrlib2.math.AABB) -> a
    boolean containsAABB(com.tyrlib2.math.AABB) -> b
com.tyrlib2.math.AndroidMatrixImpl -> com.tyrlib2.math.b:
    void setIdentityM(float[],int) -> a
    void scaleM(float[],int,float,float,float) -> a
    void multiplyMM(float[],int,float[],int,float[],int) -> a
    void translateM(float[],int,float,float,float) -> b
    void multiplyMV(float[],int,float[],int,float[],int) -> b
    void invertM(float[],int,float[],int) -> a
    void orthoM(float[],int,float,float,float,float,float,float) -> a
    void frustumM(float[],int,float,float,float,float,float,float) -> b
    void setLookAtM(float[],int,float,float,float,float,float,float,float,float,float) -> a
com.tyrlib2.math.FrustumG -> com.tyrlib2.math.c:
    com.tyrlib2.math.Plane[] planes -> a
    float PX -> w
    float PY -> x
    float PZ -> y
    float[] points -> z
    com.tyrlib2.math.AABB aabb -> A
    com.tyrlib2.math.Vector3 fctl -> b
    com.tyrlib2.math.Vector3 fctr -> c
    com.tyrlib2.math.Vector3 fcbl -> d
    com.tyrlib2.math.Vector3 fcbr -> e
    com.tyrlib2.math.Vector3 fctlD -> f
    com.tyrlib2.math.Vector3 fctrD -> g
    com.tyrlib2.math.Vector3 fcblD -> h
    com.tyrlib2.math.Vector3 fcbrD -> i
    com.tyrlib2.math.Vector3 nct -> j
    com.tyrlib2.math.Vector3 ncb -> k
    com.tyrlib2.math.Vector3 ncr -> l
    com.tyrlib2.math.Vector3 ncl -> m
    com.tyrlib2.math.Vector3 nctCamPos -> n
    com.tyrlib2.math.Vector3 ncbCamPos -> o
    com.tyrlib2.math.Vector3 ncrCamPos -> p
    com.tyrlib2.math.Vector3 nclCamPos -> q
    com.tyrlib2.math.Vector3 nctl -> r
    com.tyrlib2.math.Vector3 nctr -> s
    com.tyrlib2.math.Vector3 ncbl -> t
    com.tyrlib2.math.Vector3 ncbr -> u
    com.tyrlib2.math.Vector3 rightNearWidthHalf -> v
    com.tyrlib2.math.Vector3 nearClipPoint -> B
    com.tyrlib2.math.Vector3 farClipPoint -> C
    void update(com.tyrlib2.math.Vector3,com.tyrlib2.math.Vector3,com.tyrlib2.math.Vector3,int,int,float,float) -> a
    com.tyrlib2.math.AABB getAABB() -> a
    boolean aabbInFrustum(com.tyrlib2.math.AABB) -> a
com.tyrlib2.math.IMatrixImpl -> com.tyrlib2.math.d:
    void setIdentityM(float[],int) -> a
    void scaleM(float[],int,float,float,float) -> a
    void multiplyMM(float[],int,float[],int,float[],int) -> a
    void translateM(float[],int,float,float,float) -> b
    void multiplyMV(float[],int,float[],int,float[],int) -> b
    void invertM(float[],int,float[],int) -> a
    void orthoM(float[],int,float,float,float,float,float,float) -> a
    void frustumM(float[],int,float,float,float,float,float,float) -> b
    void setLookAtM(float[],int,float,float,float,float,float,float,float,float,float) -> a
com.tyrlib2.math.Matrix -> com.tyrlib2.math.e:
    com.tyrlib2.math.IMatrixImpl IMPL -> a
    void setIdentityM(float[],int) -> a
    void scaleM(float[],int,float,float,float) -> a
    void multiplyMM(float[],int,float[],int,float[],int) -> a
    void translateM(float[],int,float,float,float) -> b
    void multiplyMV(float[],int,float[],int,float[],int) -> b
    void invertM(float[],int,float[],int) -> a
    void orthoM(float[],int,float,float,float,float,float,float) -> a
    void frustumM(float[],int,float,float,float,float,float,float) -> b
    void setLookAtM(float[],int,float,float,float,float,float,float,float,float,float) -> a
com.tyrlib2.math.Plane -> com.tyrlib2.math.f:
    com.tyrlib2.math.Vector3 normal -> a
    float x -> b
    float y -> c
    float z -> d
    void set(com.tyrlib2.math.Vector3) -> a
com.tyrlib2.math.Quaternion -> com.tyrlib2.math.Quaternion:
    long serialVersionUID -> serialVersionUID
    float x -> x
    float y -> y
    float z -> z
    float w -> w
    com.tyrlib2.math.Quaternion IDENTITY -> IDENTITY
    com.tyrlib2.math.Quaternion normalized() -> normalized
    float length() -> length
    void normalize() -> normalize
    com.tyrlib2.math.Quaternion inverse() -> inverse
    void invert() -> invert
    com.tyrlib2.math.Quaternion multiply(com.tyrlib2.math.Quaternion) -> multiply
    void multiply(com.tyrlib2.math.Quaternion,com.tyrlib2.math.Quaternion) -> multiply
    void multiplyNoTmp(com.tyrlib2.math.Quaternion) -> multiplyNoTmp
    void multiply(float,float,float,float,float,float,float,float,com.tyrlib2.math.Quaternion) -> multiply
    com.tyrlib2.math.Quaternion rotate(com.tyrlib2.math.Vector3,float) -> rotate
    float[] toMatrix() -> toMatrix
    void toMatrix(float[]) -> toMatrix
    com.tyrlib2.math.Quaternion getIdentity() -> getIdentity
    com.tyrlib2.math.Quaternion fromAxisAngle(com.tyrlib2.math.Vector3,float) -> fromAxisAngle
    com.tyrlib2.math.Quaternion fromAxisAngle(float,float,float,float) -> fromAxisAngle
    com.tyrlib2.math.Quaternion fromAxisAngle(float,float,float,float,com.tyrlib2.math.Quaternion) -> fromAxisAngle
    com.tyrlib2.math.Quaternion slerp(com.tyrlib2.math.Quaternion,com.tyrlib2.math.Quaternion,float) -> slerp
    com.tyrlib2.math.Quaternion slerp(com.tyrlib2.math.Quaternion,com.tyrlib2.math.Quaternion,com.tyrlib2.math.Quaternion,float) -> slerp
    com.tyrlib2.math.Vector3 multiply(com.tyrlib2.math.Vector3) -> multiply
    com.tyrlib2.math.Vector3 multiply(com.tyrlib2.math.Vector3,com.tyrlib2.math.Vector3) -> multiply
    void multiplyNoTmp(com.tyrlib2.math.Vector3) -> multiplyNoTmp
    com.tyrlib2.math.Quaternion rotateTo(com.tyrlib2.math.Vector3,com.tyrlib2.math.Vector3) -> rotateTo
com.tyrlib2.math.Ray -> com.tyrlib2.math.g:
    com.tyrlib2.math.Vector3 direction -> a
    com.tyrlib2.math.Vector3 origin -> b
    com.tyrlib2.math.Vector3 getPointAtDistance(float) -> a
com.tyrlib2.math.Rect -> com.tyrlib2.math.h:
    float left -> a
    float top -> b
    float right -> c
    float bottom -> d
com.tyrlib2.math.Rectangle -> com.tyrlib2.math.i:
    boolean pointInRectangle(com.tyrlib2.math.Vector2,com.tyrlib2.math.Vector2,com.tyrlib2.math.Vector2) -> a
    boolean overlap(float,float,float,float,float,float,float,float) -> a
com.tyrlib2.math.Vector2 -> com.tyrlib2.math.j:
    float x -> a
    float y -> b
    com.tyrlib2.math.Vector2 vectorTo(com.tyrlib2.math.Vector2) -> a
    float length() -> a
    float normalize() -> b
    com.tyrlib2.math.Vector2 multiply(float) -> a
    com.tyrlib2.math.Vector2 add(com.tyrlib2.math.Vector2) -> b
    com.tyrlib2.math.Vector2 sub(com.tyrlib2.math.Vector2) -> c
    com.tyrlib2.math.Vector2 copy() -> c
com.tyrlib2.math.Vector3 -> com.tyrlib2.math.Vector3:
    long serialVersionUID -> serialVersionUID
    com.tyrlib2.math.Vector3 UNIT_X -> UNIT_X
    com.tyrlib2.math.Vector3 UNIT_Y -> UNIT_Y
    com.tyrlib2.math.Vector3 UNIT_Z -> UNIT_Z
    com.tyrlib2.math.Vector3 ORIGIN -> ORIGIN
    float x -> x
    float y -> y
    float z -> z
    com.tyrlib2.math.Vector3 vectorTo(com.tyrlib2.math.Vector3) -> vectorTo
    void set(float,float,float) -> set
    void set(com.tyrlib2.math.Vector3) -> set
    void setScaled(com.tyrlib2.math.Vector3,float) -> setScaled
    float length() -> length
    float squaredLength() -> squaredLength
    float normalize() -> normalize
    com.tyrlib2.math.Vector3 unitVector() -> unitVector
    com.tyrlib2.math.Vector3 multiply(float) -> multiply
    com.tyrlib2.math.Vector3 multiply(com.tyrlib2.math.Vector3) -> multiply
    com.tyrlib2.math.Vector3 add(com.tyrlib2.math.Vector3) -> add
    com.tyrlib2.math.Vector3 sub(com.tyrlib2.math.Vector3) -> sub
    float dot(com.tyrlib2.math.Vector3) -> dot
    com.tyrlib2.math.Vector3 cross(com.tyrlib2.math.Vector3) -> cross
    com.tyrlib2.math.Vector3 lerp(com.tyrlib2.math.Vector3,com.tyrlib2.math.Vector3,float) -> lerp
    void lerp(com.tyrlib2.math.Vector3,com.tyrlib2.math.Vector3,float,com.tyrlib2.math.Vector3) -> lerp
    void projectOnNormalized(com.tyrlib2.math.Vector3,com.tyrlib2.math.Vector3) -> projectOnNormalized
    java.lang.String toString() -> toString
    com.tyrlib2.math.Vector3 cross(float,float,float,float,float,float) -> cross
    void cross(com.tyrlib2.math.Vector3,float,float,float,float,float,float) -> cross
    void cross(com.tyrlib2.math.Vector3,com.tyrlib2.math.Vector3,com.tyrlib2.math.Vector3) -> cross
    float length(float,float,float) -> length
    void add(com.tyrlib2.math.Vector3,com.tyrlib2.math.Vector3,com.tyrlib2.math.Vector3) -> add
    void add(com.tyrlib2.math.Vector3,float,float,float,com.tyrlib2.math.Vector3) -> add
    void sub(com.tyrlib2.math.Vector3,com.tyrlib2.math.Vector3,com.tyrlib2.math.Vector3) -> sub
    void vectorTo(com.tyrlib2.math.Vector3,com.tyrlib2.math.Vector3,com.tyrlib2.math.Vector3) -> vectorTo
    void multiply(float,com.tyrlib2.math.Vector3) -> multiply
    void addScaled(com.tyrlib2.math.Vector3,com.tyrlib2.math.Vector3,float,com.tyrlib2.math.Vector3) -> addScaled
    float dot(float,float,float,float,float,float) -> dot
com.tyrlib2.movement.DirectMovement -> com.tyrlib2.d.a:
    com.tyrlib2.graphics.scene.SceneNode node -> d
    com.tyrlib2.movement.Speed speed -> e
    void newTargetProvider() -> a
    float moveTowardsTarget(float) -> a
com.tyrlib2.movement.IMovementListener -> com.tyrlib2.d.b:
    void onTargetReached() -> a
com.tyrlib2.movement.ITargetProvider -> com.tyrlib2.d.c:
    com.tyrlib2.math.Vector3 getTargetPos() -> a
com.tyrlib2.movement.Movement -> com.tyrlib2.d.d:
    java.util.List targetProviders -> a
    com.tyrlib2.movement.ITargetProvider currentTargetProvider -> b
    java.util.List movementListeners -> c
    void addTarget(com.tyrlib2.movement.ITargetProvider) -> a
    void clear() -> b
    void onUpdate(float) -> onUpdate
    void nextTargetProvider() -> c
    void newTargetProvider() -> a
    float moveTowardsTarget(float) -> a
    boolean isFinished() -> isFinished
    void targetReached() -> d
com.tyrlib2.movement.Speed -> com.tyrlib2.d.e:
    float speed -> a
    float acceleration -> b
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
com.tyrlib2.movement.TargetPoint -> com.tyrlib2.d.f:
    com.tyrlib2.math.Vector3 point -> a
    com.tyrlib2.math.Vector3 getTargetPos() -> a
com.tyrlib2.networking.CheckSerializedSize -> com.tyrlib2.e.a:
    long nBytes -> a
    void write(int) -> write
    void write(byte[],int,int) -> write
    long getNBytes() -> a
com.tyrlib2.networking.Connection -> com.tyrlib2.e.b:
    java.io.OutputStream outToOther -> c
    java.io.ObjectOutputStream out -> d
    java.io.InputStream inToOther -> e
    java.io.ObjectInputStream in -> f
    java.net.Socket socket -> g
    boolean connectionOpen -> h
    com.tyrlib2.networking.Network network -> i
    boolean openToBroadcasts -> a
    int ID -> b
    void send(java.io.Serializable) -> a
    void run() -> run
    void flush() -> a
    void close() -> b
com.tyrlib2.networking.INetworkListener -> com.tyrlib2.e.c:
    void onNewConnection(com.tyrlib2.networking.Connection) -> onNewConnection
    void onConnectionLost(com.tyrlib2.networking.Connection) -> onConnectionLost
    void onReceivedData(com.tyrlib2.networking.Connection,java.lang.Object) -> onReceivedData
com.tyrlib2.networking.Network -> com.tyrlib2.e.d:
    com.tyrlib2.networking.Server server -> b
    java.util.List connections -> c
    java.util.List listener -> a
    boolean measure -> d
    long sentBytes -> e
    long receivedBytes -> f
    boolean log -> g
    void setLog(boolean) -> a
    void addListener(com.tyrlib2.networking.INetworkListener) -> a
    void removeListener(com.tyrlib2.networking.INetworkListener) -> b
    boolean isHost() -> a
    boolean isClient() -> b
    void setMeasureBandwithUse(boolean) -> b
    long pollSentBytes() -> c
    long pollReceivedBytes() -> d
    void host(int) -> a
    void connectTo(java.lang.String,int) -> a
    void connectTo(java.lang.String,int,int) -> a
    void addConnection(java.net.Socket) -> a
    void addConnection(com.tyrlib2.networking.Connection) -> a
    int getClientCount() -> e
    void broadcast(java.io.Serializable) -> a
    void send(java.io.Serializable,int) -> a
    void send(java.io.Serializable,com.tyrlib2.networking.Connection) -> a
    void flush() -> f
    void receiveData(com.tyrlib2.networking.Connection,java.lang.Object) -> a
    void connectionLost(com.tyrlib2.networking.Connection) -> b
    long sizeOf(java.io.Serializable) -> b
    void close() -> g
com.tyrlib2.networking.Server -> com.tyrlib2.e.e:
    java.net.ServerSocket serverSocket -> a
    boolean acceptConnections -> b
    com.tyrlib2.networking.Network network -> c
    void close() -> a
    void run() -> run
com.tyrlib2.util.Color -> com.tyrlib2.util.Color:
    long serialVersionUID -> serialVersionUID
    com.tyrlib2.util.Color BLACK -> BLACK
    com.tyrlib2.util.Color GRAY -> GRAY
    com.tyrlib2.util.Color WHITE -> WHITE
    com.tyrlib2.util.Color RED -> RED
    com.tyrlib2.util.Color GREEN -> GREEN
    com.tyrlib2.util.Color BLUE -> BLUE
    com.tyrlib2.util.Color YELLOW -> YELLOW
    com.tyrlib2.util.Color TRANSPARENT -> TRANSPARENT
    float r -> r
    float g -> g
    float b -> b
    float a -> a
    com.tyrlib2.util.Color fromRGBA(int,int,int,int) -> fromRGBA
    void clamp() -> clamp
    com.tyrlib2.util.Color copy() -> copy
    com.tyrlib2.util.Color getRandomColor() -> getRandomColor
    com.tyrlib2.util.Color getRandomColor(float) -> getRandomColor
    com.tyrlib2.util.Color lerp(com.tyrlib2.util.Color,com.tyrlib2.util.Color,float) -> lerp
    java.lang.String toHex() -> toHex
com.tyrlib2.util.Direction4 -> com.tyrlib2.util.Direction4:
    com.tyrlib2.util.Direction4 LEFT -> LEFT
    com.tyrlib2.util.Direction4 RIGHT -> RIGHT
    com.tyrlib2.util.Direction4 TOP -> TOP
    com.tyrlib2.util.Direction4 BOTTOM -> BOTTOM
    com.tyrlib2.util.Direction4[] ENUM$VALUES -> a
    com.tyrlib2.util.Direction4[] values() -> values
    com.tyrlib2.util.Direction4 valueOf(java.lang.String) -> valueOf
com.tyrlib2.util.FPSCounter -> com.tyrlib2.util.a:
    int frames -> a
    float t -> b
    com.tyrlib2.graphics.renderables.Text2 text -> c
    void onUpdate(float) -> onUpdate
    boolean isFinished() -> isFinished
com.tyrlib2.util.FloatArray -> com.tyrlib2.util.b:
    float[] buffer -> a
    int size -> b
    void pushBack(float) -> a
    void popBack() -> a
    void popBack(int) -> a
    void resize() -> c
    int getSize() -> b
    java.lang.String toString() -> toString
com.tyrlib2.util.IEntityFactory -> com.tyrlib2.util.c:
    com.tyrlib2.graphics.renderables.Entity create() -> a
com.tyrlib2.util.IPrioritizable -> com.tyrlib2.util.d:
    long getPriority() -> c
com.tyrlib2.util.IQEEntityFactory -> com.tyrlib2.util.e:
    int MAX_BONES_PER_VERTEX -> a
    java.util.List subEntityData -> b
    com.tyrlib2.util.IQEEntityFactory$SubEntityPrototype[] subEntityPrototypes -> c
    com.tyrlib2.util.IQEEntityFactory$SubEntityData currentDataBlock -> d
    java.util.StringTokenizer tokenizer -> e
    com.tyrlib2.graphics.materials.DefaultMaterial3 baseMaterial -> f
    java.util.Map materials -> g
    com.tyrlib2.util.IQEEntityFactory$SkeletonData skeletonData -> h
    java.io.BufferedReader in -> i
    com.tyrlib2.graphics.renderables.Entity create() -> a
    void createNextSubEntity() -> b
    void createVertex() -> c
    void createUVCoord() -> d
    void createNormal() -> e
    void createBoneBinding() -> f
    void createTriangle() -> g
    void createBone() -> h
    void createBonePose() -> i
    void createMaterial() -> j
    void createAnimations() -> k
    void createAnimation() -> l
com.tyrlib2.util.IQEEntityFactory$AnimationData -> com.tyrlib2.util.f:
    java.lang.String name -> a
    java.util.List animationFrames -> b
    float frameRate -> c
com.tyrlib2.util.IQEEntityFactory$BoneBinding -> com.tyrlib2.util.g:
    float boneIndex -> a
    float boneWeight -> b
com.tyrlib2.util.IQEEntityFactory$BoneData -> com.tyrlib2.util.h:
    java.lang.String name -> a
    com.tyrlib2.math.Vector3 pos -> b
    com.tyrlib2.math.Quaternion rot -> c
    int parentIndex -> d
com.tyrlib2.util.IQEEntityFactory$SkeletonData -> com.tyrlib2.util.i:
    java.util.List bones -> a
    java.util.List animations -> b
com.tyrlib2.util.IQEEntityFactory$SubEntityData -> com.tyrlib2.util.j:
    java.lang.String name -> a
    java.lang.String matName -> b
    java.util.List triangles -> c
    java.util.List vertexData -> d
    java.util.List access$0(com.tyrlib2.util.IQEEntityFactory$SubEntityData) -> a
com.tyrlib2.util.IQEEntityFactory$SubEntityPrototype -> com.tyrlib2.util.k:
    com.tyrlib2.graphics.renderer.Mesh mesh -> a
    com.tyrlib2.graphics.materials.DefaultMaterial3 material -> b
    java.lang.String name -> c
com.tyrlib2.util.IQEEntityFactory$Triangle -> com.tyrlib2.util.l:
    short[] data -> a
com.tyrlib2.util.IQEEntityFactory$VertexData -> com.tyrlib2.util.m:
    com.tyrlib2.math.Vector3 pos -> a
    com.tyrlib2.math.Vector2 uv -> b
    com.tyrlib2.math.Vector3 normal -> c
    java.util.List boneBindings -> d
com.tyrlib2.util.IQMEntityFactory -> com.tyrlib2.util.n:
    java.lang.String fileName -> a
    java.io.BufferedInputStream in -> b
    int readBytes -> c
    com.tyrlib2.util.IQMEntityFactory$EntityData entityData -> d
    java.util.List texts -> e
    int textPos -> f
    com.tyrlib2.graphics.renderer.VertexLayout vertexLayout -> g
    com.tyrlib2.util.IQMEntityFactory$VertexArray[] vertexArrays -> h
    com.tyrlib2.util.IQMEntityFactory$Header header -> i
    com.tyrlib2.util.IQMEntityFactory$EntityPrototype entityPrototype -> j
    com.tyrlib2.graphics.lighting.Light light -> k
    void load(java.lang.String,com.tyrlib2.graphics.renderer.VertexLayout,boolean) -> a
    com.tyrlib2.graphics.renderables.Entity create() -> a
    void readHeader() -> b
    void readSubEntities() -> c
    void readVertexArrays() -> d
    void readVertices() -> e
    void readFaces() -> f
    int getVertexArrayComponentSize(com.tyrlib2.util.IQMEntityFactory$VertexArray) -> a
    void readTexts() -> g
    void readAdjacency() -> h
    void readSkeleton() -> i
    void readAnimations() -> j
    int toInt(byte[],int) -> a
    int toShort(byte[],int) -> b
    float toFloat(byte[],int) -> c
    int access$0(com.tyrlib2.util.IQMEntityFactory,byte[],int) -> a
com.tyrlib2.util.IQMEntityFactory$AnimationData -> com.tyrlib2.util.o:
    java.lang.String name -> a
    com.tyrlib2.graphics.animation.AnimationFrame[] animationFrames -> b
    float frameRate -> c
    int flag -> d
    com.tyrlib2.util.IQMEntityFactory this$0 -> e
com.tyrlib2.util.IQMEntityFactory$BoneData -> com.tyrlib2.util.p:
    java.lang.String name -> a
    com.tyrlib2.math.Vector3 pos -> b
    com.tyrlib2.math.Quaternion rot -> c
    int parentIndex -> d
    com.tyrlib2.util.IQMEntityFactory this$0 -> e
com.tyrlib2.util.IQMEntityFactory$EntityData -> com.tyrlib2.util.q:
    com.tyrlib2.util.IQMEntityFactory$SubEntityData[] subEntities -> a
    com.tyrlib2.util.IQMEntityFactory$SkeletonData skeletonData -> b
    com.tyrlib2.util.IQMEntityFactory this$0 -> c
com.tyrlib2.util.IQMEntityFactory$EntityPrototype -> com.tyrlib2.util.r:
    com.tyrlib2.util.IQMEntityFactory$SubEntityPrototype[] subEntityPrototypes -> a
    com.tyrlib2.util.IQMEntityFactory this$0 -> b
com.tyrlib2.util.IQMEntityFactory$Header -> com.tyrlib2.util.s:
    int version -> a
    int fileSize -> b
    int flags -> c
    int num_text -> d
    int ofs_text -> e
    int num_meshes -> f
    int ofs_meshes -> g
    int num_vertexarrays -> h
    int num_vertexes -> i
    int ofs_vertexarrays -> j
    int num_triangles -> k
    int ofs_triangles -> l
    int ofs_adjacency -> m
    int num_joints -> n
    int ofs_joints -> o
    int num_poses -> p
    int ofs_poses -> q
    int num_anims -> r
    int ofs_anims -> s
    int num_frames -> t
    int num_framechannels -> u
    int ofs_frames -> v
    int ofs_bounds -> w
    int num_comment -> x
    int ofs_comment -> y
    int num_extensions -> z
    int ofs_extensions -> A
    com.tyrlib2.util.IQMEntityFactory this$0 -> B
com.tyrlib2.util.IQMEntityFactory$PoseData -> com.tyrlib2.util.t:
    int parent -> a
    int channelmask -> b
    float[] channeloffset -> c
    float[] channelscale -> d
    com.tyrlib2.util.IQMEntityFactory this$0 -> e
com.tyrlib2.util.IQMEntityFactory$SkeletonData -> com.tyrlib2.util.u:
    java.util.List bones -> a
    com.tyrlib2.util.IQMEntityFactory$PoseData[] poses -> b
    java.util.List animations -> c
    com.tyrlib2.util.IQMEntityFactory this$0 -> d
com.tyrlib2.util.IQMEntityFactory$SubEntityData -> com.tyrlib2.util.v:
    float[] vertexData -> a
    float[] boneData -> b
    short[] triangleData -> c
    java.lang.String material -> d
    java.lang.String name -> e
    int firstVertexIndex -> f
    int firstTriangleIndex -> g
    int countVertices -> h
    int countTriangles -> i
    com.tyrlib2.util.IQMEntityFactory this$0 -> j
com.tyrlib2.util.IQMEntityFactory$SubEntityPrototype -> com.tyrlib2.util.w:
    com.tyrlib2.graphics.renderer.Mesh mesh -> a
    com.tyrlib2.graphics.materials.DefaultMaterial3 material -> b
    java.lang.String name -> c
    com.tyrlib2.util.IQMEntityFactory this$0 -> d
com.tyrlib2.util.IQMEntityFactory$VertexArray -> com.tyrlib2.util.x:
    int type -> a
    int flags -> b
    int format -> c
    int size -> d
    int offset -> e
    com.tyrlib2.util.IQMEntityFactory this$0 -> f
com.tyrlib2.util.PriorityComparator -> com.tyrlib2.util.y:
    int compare(com.tyrlib2.util.IPrioritizable,com.tyrlib2.util.IPrioritizable) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.tyrlib2.util.RaySceneQuery -> com.tyrlib2.util.z:
    com.tyrlib2.math.Vector3 intersect -> a
    java.util.List results -> b
    com.tyrlib2.math.Ray ray -> c
    float maxDist -> d
    boolean intersects(com.tyrlib2.math.AABB) -> a
    void callback(com.tyrlib2.graphics.scene.BoundedSceneObject) -> a
com.tyrlib2.util.Raycast -> com.tyrlib2.util.aa:
    com.tyrlib2.math.Ray ray -> b
    float maxDist -> a
    com.tyrlib2.math.Ray getRay() -> a
    java.util.List performRaycast() -> b
    java.util.List performRaycast(com.tyrlib2.graphics.scene.Octree) -> a
    com.tyrlib2.util.Raycast fromScreen(com.tyrlib2.math.Vector2,com.tyrlib2.math.Vector3) -> a
    com.tyrlib2.util.Raycast fromScreen(com.tyrlib2.math.Vector2) -> a
com.tyrlib2.util.RaycastResult -> com.tyrlib2.util.ab:
    com.tyrlib2.graphics.scene.SceneObject sceneObject -> a
    com.tyrlib2.math.Vector3 intersection -> b
    float distance -> c
    int compareTo(com.tyrlib2.util.RaycastResult) -> a
    int compareTo(java.lang.Object) -> compareTo
com.tyrlib2.util.ReversePriorityComparator -> com.tyrlib2.util.ac:
    int compare(com.tyrlib2.util.IPrioritizable,com.tyrlib2.util.IPrioritizable) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
gnu.trove.TByteCollection -> gnu.trove.a:
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
gnu.trove.TCharCollection -> gnu.trove.b:
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
gnu.trove.TCollections -> gnu.trove.c:
    gnu.trove.TDoubleCollection unmodifiableCollection(gnu.trove.TDoubleCollection) -> a
    gnu.trove.TFloatCollection unmodifiableCollection(gnu.trove.TFloatCollection) -> a
    gnu.trove.TIntCollection unmodifiableCollection(gnu.trove.TIntCollection) -> a
    gnu.trove.TLongCollection unmodifiableCollection(gnu.trove.TLongCollection) -> a
    gnu.trove.TByteCollection unmodifiableCollection(gnu.trove.TByteCollection) -> a
    gnu.trove.TShortCollection unmodifiableCollection(gnu.trove.TShortCollection) -> a
    gnu.trove.TCharCollection unmodifiableCollection(gnu.trove.TCharCollection) -> a
    gnu.trove.set.TDoubleSet unmodifiableSet(gnu.trove.set.TDoubleSet) -> a
    gnu.trove.set.TFloatSet unmodifiableSet(gnu.trove.set.TFloatSet) -> a
    gnu.trove.set.TIntSet unmodifiableSet(gnu.trove.set.TIntSet) -> a
    gnu.trove.set.TLongSet unmodifiableSet(gnu.trove.set.TLongSet) -> a
    gnu.trove.set.TByteSet unmodifiableSet(gnu.trove.set.TByteSet) -> a
    gnu.trove.set.TShortSet unmodifiableSet(gnu.trove.set.TShortSet) -> a
    gnu.trove.set.TCharSet unmodifiableSet(gnu.trove.set.TCharSet) -> a
gnu.trove.TDoubleCollection -> gnu.trove.d:
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
gnu.trove.TFloatCollection -> gnu.trove.e:
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
gnu.trove.TIntCollection -> gnu.trove.f:
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
gnu.trove.TLongCollection -> gnu.trove.g:
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
gnu.trove.TShortCollection -> gnu.trove.h:
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
gnu.trove.decorator.TByteByteMapDecorator -> gnu.trove.decorator.TByteByteMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteByteMap _map -> _map
    gnu.trove.map.TByteByteMap getMap() -> getMap
    java.lang.Byte put(java.lang.Byte,java.lang.Byte) -> put
    java.lang.Byte get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Byte remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Byte wrapKey(byte) -> wrapKey
    byte unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Byte wrapValue(byte) -> wrapValue
    byte unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TByteByteMapDecorator$1 -> gnu.trove.decorator.a:
    gnu.trove.decorator.TByteByteMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TByteByteMapDecorator$1$1 -> gnu.trove.decorator.b:
    gnu.trove.iterator.TByteByteIterator it -> b
    gnu.trove.decorator.TByteByteMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TByteByteMapDecorator$1$1$1 -> gnu.trove.decorator.c:
    java.lang.Byte val -> d
    java.lang.Byte val$v -> a
    java.lang.Byte val$key -> b
    gnu.trove.decorator.TByteByteMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Byte getKey() -> a
    java.lang.Byte getValue() -> b
    int hashCode() -> hashCode
    java.lang.Byte setValue(java.lang.Byte) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TByteCharMapDecorator -> gnu.trove.decorator.TByteCharMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteCharMap _map -> _map
    gnu.trove.map.TByteCharMap getMap() -> getMap
    java.lang.Character put(java.lang.Byte,java.lang.Character) -> put
    java.lang.Character get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Character remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Byte wrapKey(byte) -> wrapKey
    byte unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Character wrapValue(char) -> wrapValue
    char unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TByteCharMapDecorator$1 -> gnu.trove.decorator.d:
    gnu.trove.decorator.TByteCharMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TByteCharMapDecorator$1$1 -> gnu.trove.decorator.e:
    gnu.trove.iterator.TByteCharIterator it -> b
    gnu.trove.decorator.TByteCharMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TByteCharMapDecorator$1$1$1 -> gnu.trove.decorator.f:
    java.lang.Character val -> d
    java.lang.Character val$v -> a
    java.lang.Byte val$key -> b
    gnu.trove.decorator.TByteCharMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Byte getKey() -> a
    java.lang.Character getValue() -> b
    int hashCode() -> hashCode
    java.lang.Character setValue(java.lang.Character) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TByteDoubleMapDecorator -> gnu.trove.decorator.TByteDoubleMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteDoubleMap _map -> _map
    gnu.trove.map.TByteDoubleMap getMap() -> getMap
    java.lang.Double put(java.lang.Byte,java.lang.Double) -> put
    java.lang.Double get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Double remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Byte wrapKey(byte) -> wrapKey
    byte unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Double wrapValue(double) -> wrapValue
    double unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TByteDoubleMapDecorator$1 -> gnu.trove.decorator.g:
    gnu.trove.decorator.TByteDoubleMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TByteDoubleMapDecorator$1$1 -> gnu.trove.decorator.h:
    gnu.trove.iterator.TByteDoubleIterator it -> b
    gnu.trove.decorator.TByteDoubleMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TByteDoubleMapDecorator$1$1$1 -> gnu.trove.decorator.i:
    java.lang.Double val -> d
    java.lang.Double val$v -> a
    java.lang.Byte val$key -> b
    gnu.trove.decorator.TByteDoubleMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Byte getKey() -> a
    java.lang.Double getValue() -> b
    int hashCode() -> hashCode
    java.lang.Double setValue(java.lang.Double) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TByteFloatMapDecorator -> gnu.trove.decorator.TByteFloatMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteFloatMap _map -> _map
    gnu.trove.map.TByteFloatMap getMap() -> getMap
    java.lang.Float put(java.lang.Byte,java.lang.Float) -> put
    java.lang.Float get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Float remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Byte wrapKey(byte) -> wrapKey
    byte unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Float wrapValue(float) -> wrapValue
    float unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TByteFloatMapDecorator$1 -> gnu.trove.decorator.j:
    gnu.trove.decorator.TByteFloatMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TByteFloatMapDecorator$1$1 -> gnu.trove.decorator.k:
    gnu.trove.iterator.TByteFloatIterator it -> b
    gnu.trove.decorator.TByteFloatMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TByteFloatMapDecorator$1$1$1 -> gnu.trove.decorator.l:
    java.lang.Float val -> d
    java.lang.Float val$v -> a
    java.lang.Byte val$key -> b
    gnu.trove.decorator.TByteFloatMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Byte getKey() -> a
    java.lang.Float getValue() -> b
    int hashCode() -> hashCode
    java.lang.Float setValue(java.lang.Float) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TByteIntMapDecorator -> gnu.trove.decorator.TByteIntMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteIntMap _map -> _map
    gnu.trove.map.TByteIntMap getMap() -> getMap
    java.lang.Integer put(java.lang.Byte,java.lang.Integer) -> put
    java.lang.Integer get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Integer remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Byte wrapKey(byte) -> wrapKey
    byte unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Integer wrapValue(int) -> wrapValue
    int unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TByteIntMapDecorator$1 -> gnu.trove.decorator.m:
    gnu.trove.decorator.TByteIntMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TByteIntMapDecorator$1$1 -> gnu.trove.decorator.n:
    gnu.trove.iterator.TByteIntIterator it -> b
    gnu.trove.decorator.TByteIntMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TByteIntMapDecorator$1$1$1 -> gnu.trove.decorator.o:
    java.lang.Integer val -> d
    java.lang.Integer val$v -> a
    java.lang.Byte val$key -> b
    gnu.trove.decorator.TByteIntMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Byte getKey() -> a
    java.lang.Integer getValue() -> b
    int hashCode() -> hashCode
    java.lang.Integer setValue(java.lang.Integer) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TByteListDecorator -> gnu.trove.decorator.TByteListDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TByteList list -> list
    gnu.trove.list.TByteList getList() -> getList
    int size() -> size
    java.lang.Byte get(int) -> get
    java.lang.Byte set(int,java.lang.Byte) -> set
    void add(int,java.lang.Byte) -> add
    java.lang.Byte remove(int) -> remove
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
gnu.trove.decorator.TByteLongMapDecorator -> gnu.trove.decorator.TByteLongMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteLongMap _map -> _map
    gnu.trove.map.TByteLongMap getMap() -> getMap
    java.lang.Long put(java.lang.Byte,java.lang.Long) -> put
    java.lang.Long get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Long remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Byte wrapKey(byte) -> wrapKey
    byte unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Long wrapValue(long) -> wrapValue
    long unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TByteLongMapDecorator$1 -> gnu.trove.decorator.p:
    gnu.trove.decorator.TByteLongMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TByteLongMapDecorator$1$1 -> gnu.trove.decorator.q:
    gnu.trove.iterator.TByteLongIterator it -> b
    gnu.trove.decorator.TByteLongMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TByteLongMapDecorator$1$1$1 -> gnu.trove.decorator.r:
    java.lang.Long val -> d
    java.lang.Long val$v -> a
    java.lang.Byte val$key -> b
    gnu.trove.decorator.TByteLongMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Byte getKey() -> a
    java.lang.Long getValue() -> b
    int hashCode() -> hashCode
    java.lang.Long setValue(java.lang.Long) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TByteObjectMapDecorator -> gnu.trove.decorator.TByteObjectMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteObjectMap _map -> _map
    gnu.trove.map.TByteObjectMap getMap() -> getMap
    java.lang.Object put(java.lang.Byte,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Byte wrapKey(byte) -> wrapKey
    byte unwrapKey(java.lang.Byte) -> unwrapKey
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
gnu.trove.decorator.TByteObjectMapDecorator$1 -> gnu.trove.decorator.s:
    gnu.trove.decorator.TByteObjectMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TByteObjectMapDecorator$1$1 -> gnu.trove.decorator.t:
    gnu.trove.iterator.TByteObjectIterator it -> b
    gnu.trove.decorator.TByteObjectMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TByteObjectMapDecorator$1$1$1 -> gnu.trove.decorator.u:
    java.lang.Object val -> d
    java.lang.Object val$v -> a
    java.lang.Byte val$key -> b
    gnu.trove.decorator.TByteObjectMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Byte getKey() -> a
    java.lang.Object getValue() -> getValue
    int hashCode() -> hashCode
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TByteSetDecorator -> gnu.trove.decorator.TByteSetDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.set.TByteSet _set -> _set
    gnu.trove.set.TByteSet getSet() -> getSet
    boolean add(java.lang.Byte) -> add
    boolean equals(java.lang.Object) -> equals
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TByteSetDecorator$1 -> gnu.trove.decorator.v:
    gnu.trove.iterator.TByteIterator it -> b
    gnu.trove.decorator.TByteSetDecorator this$0 -> a
    java.lang.Byte next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TByteShortMapDecorator -> gnu.trove.decorator.TByteShortMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteShortMap _map -> _map
    gnu.trove.map.TByteShortMap getMap() -> getMap
    java.lang.Short put(java.lang.Byte,java.lang.Short) -> put
    java.lang.Short get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Short remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Byte wrapKey(byte) -> wrapKey
    byte unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Short wrapValue(short) -> wrapValue
    short unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TByteShortMapDecorator$1 -> gnu.trove.decorator.w:
    gnu.trove.decorator.TByteShortMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TByteShortMapDecorator$1$1 -> gnu.trove.decorator.x:
    gnu.trove.iterator.TByteShortIterator it -> b
    gnu.trove.decorator.TByteShortMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TByteShortMapDecorator$1$1$1 -> gnu.trove.decorator.y:
    java.lang.Short val -> d
    java.lang.Short val$v -> a
    java.lang.Byte val$key -> b
    gnu.trove.decorator.TByteShortMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Byte getKey() -> a
    java.lang.Short getValue() -> b
    int hashCode() -> hashCode
    java.lang.Short setValue(java.lang.Short) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TCharByteMapDecorator -> gnu.trove.decorator.TCharByteMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharByteMap _map -> _map
    gnu.trove.map.TCharByteMap getMap() -> getMap
    java.lang.Byte put(java.lang.Character,java.lang.Byte) -> put
    java.lang.Byte get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Byte remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Character wrapKey(char) -> wrapKey
    char unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Byte wrapValue(byte) -> wrapValue
    byte unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TCharByteMapDecorator$1 -> gnu.trove.decorator.z:
    gnu.trove.decorator.TCharByteMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TCharByteMapDecorator$1$1 -> gnu.trove.decorator.aa:
    gnu.trove.iterator.TCharByteIterator it -> b
    gnu.trove.decorator.TCharByteMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TCharByteMapDecorator$1$1$1 -> gnu.trove.decorator.ab:
    java.lang.Byte val -> d
    java.lang.Byte val$v -> a
    java.lang.Character val$key -> b
    gnu.trove.decorator.TCharByteMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Character getKey() -> a
    java.lang.Byte getValue() -> b
    int hashCode() -> hashCode
    java.lang.Byte setValue(java.lang.Byte) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TCharCharMapDecorator -> gnu.trove.decorator.TCharCharMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharCharMap _map -> _map
    gnu.trove.map.TCharCharMap getMap() -> getMap
    java.lang.Character put(java.lang.Character,java.lang.Character) -> put
    java.lang.Character get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Character remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Character wrapKey(char) -> wrapKey
    char unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Character wrapValue(char) -> wrapValue
    char unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TCharCharMapDecorator$1 -> gnu.trove.decorator.ac:
    gnu.trove.decorator.TCharCharMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TCharCharMapDecorator$1$1 -> gnu.trove.decorator.ad:
    gnu.trove.iterator.TCharCharIterator it -> b
    gnu.trove.decorator.TCharCharMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TCharCharMapDecorator$1$1$1 -> gnu.trove.decorator.ae:
    java.lang.Character val -> d
    java.lang.Character val$v -> a
    java.lang.Character val$key -> b
    gnu.trove.decorator.TCharCharMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Character getKey() -> a
    java.lang.Character getValue() -> b
    int hashCode() -> hashCode
    java.lang.Character setValue(java.lang.Character) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TCharDoubleMapDecorator -> gnu.trove.decorator.TCharDoubleMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharDoubleMap _map -> _map
    gnu.trove.map.TCharDoubleMap getMap() -> getMap
    java.lang.Double put(java.lang.Character,java.lang.Double) -> put
    java.lang.Double get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Double remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Character wrapKey(char) -> wrapKey
    char unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Double wrapValue(double) -> wrapValue
    double unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TCharDoubleMapDecorator$1 -> gnu.trove.decorator.af:
    gnu.trove.decorator.TCharDoubleMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TCharDoubleMapDecorator$1$1 -> gnu.trove.decorator.ag:
    gnu.trove.iterator.TCharDoubleIterator it -> b
    gnu.trove.decorator.TCharDoubleMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TCharDoubleMapDecorator$1$1$1 -> gnu.trove.decorator.ah:
    java.lang.Double val -> d
    java.lang.Double val$v -> a
    java.lang.Character val$key -> b
    gnu.trove.decorator.TCharDoubleMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Character getKey() -> a
    java.lang.Double getValue() -> b
    int hashCode() -> hashCode
    java.lang.Double setValue(java.lang.Double) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TCharFloatMapDecorator -> gnu.trove.decorator.TCharFloatMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharFloatMap _map -> _map
    gnu.trove.map.TCharFloatMap getMap() -> getMap
    java.lang.Float put(java.lang.Character,java.lang.Float) -> put
    java.lang.Float get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Float remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Character wrapKey(char) -> wrapKey
    char unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Float wrapValue(float) -> wrapValue
    float unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TCharFloatMapDecorator$1 -> gnu.trove.decorator.ai:
    gnu.trove.decorator.TCharFloatMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TCharFloatMapDecorator$1$1 -> gnu.trove.decorator.aj:
    gnu.trove.iterator.TCharFloatIterator it -> b
    gnu.trove.decorator.TCharFloatMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TCharFloatMapDecorator$1$1$1 -> gnu.trove.decorator.ak:
    java.lang.Float val -> d
    java.lang.Float val$v -> a
    java.lang.Character val$key -> b
    gnu.trove.decorator.TCharFloatMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Character getKey() -> a
    java.lang.Float getValue() -> b
    int hashCode() -> hashCode
    java.lang.Float setValue(java.lang.Float) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TCharIntMapDecorator -> gnu.trove.decorator.TCharIntMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharIntMap _map -> _map
    gnu.trove.map.TCharIntMap getMap() -> getMap
    java.lang.Integer put(java.lang.Character,java.lang.Integer) -> put
    java.lang.Integer get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Integer remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Character wrapKey(char) -> wrapKey
    char unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Integer wrapValue(int) -> wrapValue
    int unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TCharIntMapDecorator$1 -> gnu.trove.decorator.al:
    gnu.trove.decorator.TCharIntMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TCharIntMapDecorator$1$1 -> gnu.trove.decorator.am:
    gnu.trove.iterator.TCharIntIterator it -> b
    gnu.trove.decorator.TCharIntMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TCharIntMapDecorator$1$1$1 -> gnu.trove.decorator.an:
    java.lang.Integer val -> d
    java.lang.Integer val$v -> a
    java.lang.Character val$key -> b
    gnu.trove.decorator.TCharIntMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Character getKey() -> a
    java.lang.Integer getValue() -> b
    int hashCode() -> hashCode
    java.lang.Integer setValue(java.lang.Integer) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TCharListDecorator -> gnu.trove.decorator.TCharListDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TCharList list -> list
    gnu.trove.list.TCharList getList() -> getList
    int size() -> size
    java.lang.Character get(int) -> get
    java.lang.Character set(int,java.lang.Character) -> set
    void add(int,java.lang.Character) -> add
    java.lang.Character remove(int) -> remove
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
gnu.trove.decorator.TCharLongMapDecorator -> gnu.trove.decorator.TCharLongMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharLongMap _map -> _map
    gnu.trove.map.TCharLongMap getMap() -> getMap
    java.lang.Long put(java.lang.Character,java.lang.Long) -> put
    java.lang.Long get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Long remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Character wrapKey(char) -> wrapKey
    char unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Long wrapValue(long) -> wrapValue
    long unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TCharLongMapDecorator$1 -> gnu.trove.decorator.ao:
    gnu.trove.decorator.TCharLongMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TCharLongMapDecorator$1$1 -> gnu.trove.decorator.ap:
    gnu.trove.iterator.TCharLongIterator it -> b
    gnu.trove.decorator.TCharLongMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TCharLongMapDecorator$1$1$1 -> gnu.trove.decorator.aq:
    java.lang.Long val -> d
    java.lang.Long val$v -> a
    java.lang.Character val$key -> b
    gnu.trove.decorator.TCharLongMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Character getKey() -> a
    java.lang.Long getValue() -> b
    int hashCode() -> hashCode
    java.lang.Long setValue(java.lang.Long) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TCharObjectMapDecorator -> gnu.trove.decorator.TCharObjectMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharObjectMap _map -> _map
    gnu.trove.map.TCharObjectMap getMap() -> getMap
    java.lang.Object put(java.lang.Character,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Character wrapKey(char) -> wrapKey
    char unwrapKey(java.lang.Character) -> unwrapKey
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
gnu.trove.decorator.TCharObjectMapDecorator$1 -> gnu.trove.decorator.ar:
    gnu.trove.decorator.TCharObjectMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TCharObjectMapDecorator$1$1 -> gnu.trove.decorator.as:
    gnu.trove.iterator.TCharObjectIterator it -> b
    gnu.trove.decorator.TCharObjectMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TCharObjectMapDecorator$1$1$1 -> gnu.trove.decorator.at:
    java.lang.Object val -> d
    java.lang.Object val$v -> a
    java.lang.Character val$key -> b
    gnu.trove.decorator.TCharObjectMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Character getKey() -> a
    java.lang.Object getValue() -> getValue
    int hashCode() -> hashCode
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TCharSetDecorator -> gnu.trove.decorator.TCharSetDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.set.TCharSet _set -> _set
    gnu.trove.set.TCharSet getSet() -> getSet
    boolean add(java.lang.Character) -> add
    boolean equals(java.lang.Object) -> equals
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TCharSetDecorator$1 -> gnu.trove.decorator.au:
    gnu.trove.iterator.TCharIterator it -> b
    gnu.trove.decorator.TCharSetDecorator this$0 -> a
    java.lang.Character next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TCharShortMapDecorator -> gnu.trove.decorator.TCharShortMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharShortMap _map -> _map
    gnu.trove.map.TCharShortMap getMap() -> getMap
    java.lang.Short put(java.lang.Character,java.lang.Short) -> put
    java.lang.Short get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Short remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Character wrapKey(char) -> wrapKey
    char unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Short wrapValue(short) -> wrapValue
    short unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TCharShortMapDecorator$1 -> gnu.trove.decorator.av:
    gnu.trove.decorator.TCharShortMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TCharShortMapDecorator$1$1 -> gnu.trove.decorator.aw:
    gnu.trove.iterator.TCharShortIterator it -> b
    gnu.trove.decorator.TCharShortMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TCharShortMapDecorator$1$1$1 -> gnu.trove.decorator.ax:
    java.lang.Short val -> d
    java.lang.Short val$v -> a
    java.lang.Character val$key -> b
    gnu.trove.decorator.TCharShortMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Character getKey() -> a
    java.lang.Short getValue() -> b
    int hashCode() -> hashCode
    java.lang.Short setValue(java.lang.Short) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TDoubleByteMapDecorator -> gnu.trove.decorator.TDoubleByteMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleByteMap _map -> _map
    gnu.trove.map.TDoubleByteMap getMap() -> getMap
    java.lang.Byte put(java.lang.Double,java.lang.Byte) -> put
    java.lang.Byte get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Byte remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Double wrapKey(double) -> wrapKey
    double unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Byte wrapValue(byte) -> wrapValue
    byte unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TDoubleByteMapDecorator$1 -> gnu.trove.decorator.ay:
    gnu.trove.decorator.TDoubleByteMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TDoubleByteMapDecorator$1$1 -> gnu.trove.decorator.az:
    gnu.trove.iterator.TDoubleByteIterator it -> b
    gnu.trove.decorator.TDoubleByteMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TDoubleByteMapDecorator$1$1$1 -> gnu.trove.decorator.ba:
    java.lang.Byte val -> d
    java.lang.Byte val$v -> a
    java.lang.Double val$key -> b
    gnu.trove.decorator.TDoubleByteMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Double getKey() -> a
    java.lang.Byte getValue() -> b
    int hashCode() -> hashCode
    java.lang.Byte setValue(java.lang.Byte) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TDoubleCharMapDecorator -> gnu.trove.decorator.TDoubleCharMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleCharMap _map -> _map
    gnu.trove.map.TDoubleCharMap getMap() -> getMap
    java.lang.Character put(java.lang.Double,java.lang.Character) -> put
    java.lang.Character get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Character remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Double wrapKey(double) -> wrapKey
    double unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Character wrapValue(char) -> wrapValue
    char unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TDoubleCharMapDecorator$1 -> gnu.trove.decorator.bb:
    gnu.trove.decorator.TDoubleCharMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TDoubleCharMapDecorator$1$1 -> gnu.trove.decorator.bc:
    gnu.trove.iterator.TDoubleCharIterator it -> b
    gnu.trove.decorator.TDoubleCharMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TDoubleCharMapDecorator$1$1$1 -> gnu.trove.decorator.bd:
    java.lang.Character val -> d
    java.lang.Character val$v -> a
    java.lang.Double val$key -> b
    gnu.trove.decorator.TDoubleCharMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Double getKey() -> a
    java.lang.Character getValue() -> b
    int hashCode() -> hashCode
    java.lang.Character setValue(java.lang.Character) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TDoubleDoubleMapDecorator -> gnu.trove.decorator.TDoubleDoubleMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleDoubleMap _map -> _map
    gnu.trove.map.TDoubleDoubleMap getMap() -> getMap
    java.lang.Double put(java.lang.Double,java.lang.Double) -> put
    java.lang.Double get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Double remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Double wrapKey(double) -> wrapKey
    double unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Double wrapValue(double) -> wrapValue
    double unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TDoubleDoubleMapDecorator$1 -> gnu.trove.decorator.be:
    gnu.trove.decorator.TDoubleDoubleMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TDoubleDoubleMapDecorator$1$1 -> gnu.trove.decorator.bf:
    gnu.trove.iterator.TDoubleDoubleIterator it -> b
    gnu.trove.decorator.TDoubleDoubleMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TDoubleDoubleMapDecorator$1$1$1 -> gnu.trove.decorator.bg:
    java.lang.Double val -> d
    java.lang.Double val$v -> a
    java.lang.Double val$key -> b
    gnu.trove.decorator.TDoubleDoubleMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Double getKey() -> a
    java.lang.Double getValue() -> b
    int hashCode() -> hashCode
    java.lang.Double setValue(java.lang.Double) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TDoubleFloatMapDecorator -> gnu.trove.decorator.TDoubleFloatMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleFloatMap _map -> _map
    gnu.trove.map.TDoubleFloatMap getMap() -> getMap
    java.lang.Float put(java.lang.Double,java.lang.Float) -> put
    java.lang.Float get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Float remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Double wrapKey(double) -> wrapKey
    double unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Float wrapValue(float) -> wrapValue
    float unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TDoubleFloatMapDecorator$1 -> gnu.trove.decorator.bh:
    gnu.trove.decorator.TDoubleFloatMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TDoubleFloatMapDecorator$1$1 -> gnu.trove.decorator.bi:
    gnu.trove.iterator.TDoubleFloatIterator it -> b
    gnu.trove.decorator.TDoubleFloatMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TDoubleFloatMapDecorator$1$1$1 -> gnu.trove.decorator.bj:
    java.lang.Float val -> d
    java.lang.Float val$v -> a
    java.lang.Double val$key -> b
    gnu.trove.decorator.TDoubleFloatMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Double getKey() -> a
    java.lang.Float getValue() -> b
    int hashCode() -> hashCode
    java.lang.Float setValue(java.lang.Float) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TDoubleIntMapDecorator -> gnu.trove.decorator.TDoubleIntMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleIntMap _map -> _map
    gnu.trove.map.TDoubleIntMap getMap() -> getMap
    java.lang.Integer put(java.lang.Double,java.lang.Integer) -> put
    java.lang.Integer get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Integer remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Double wrapKey(double) -> wrapKey
    double unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Integer wrapValue(int) -> wrapValue
    int unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TDoubleIntMapDecorator$1 -> gnu.trove.decorator.bk:
    gnu.trove.decorator.TDoubleIntMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TDoubleIntMapDecorator$1$1 -> gnu.trove.decorator.bl:
    gnu.trove.iterator.TDoubleIntIterator it -> b
    gnu.trove.decorator.TDoubleIntMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TDoubleIntMapDecorator$1$1$1 -> gnu.trove.decorator.bm:
    java.lang.Integer val -> d
    java.lang.Integer val$v -> a
    java.lang.Double val$key -> b
    gnu.trove.decorator.TDoubleIntMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Double getKey() -> a
    java.lang.Integer getValue() -> b
    int hashCode() -> hashCode
    java.lang.Integer setValue(java.lang.Integer) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TDoubleListDecorator -> gnu.trove.decorator.TDoubleListDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TDoubleList list -> list
    gnu.trove.list.TDoubleList getList() -> getList
    int size() -> size
    java.lang.Double get(int) -> get
    java.lang.Double set(int,java.lang.Double) -> set
    void add(int,java.lang.Double) -> add
    java.lang.Double remove(int) -> remove
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
gnu.trove.decorator.TDoubleLongMapDecorator -> gnu.trove.decorator.TDoubleLongMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleLongMap _map -> _map
    gnu.trove.map.TDoubleLongMap getMap() -> getMap
    java.lang.Long put(java.lang.Double,java.lang.Long) -> put
    java.lang.Long get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Long remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Double wrapKey(double) -> wrapKey
    double unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Long wrapValue(long) -> wrapValue
    long unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TDoubleLongMapDecorator$1 -> gnu.trove.decorator.bn:
    gnu.trove.decorator.TDoubleLongMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TDoubleLongMapDecorator$1$1 -> gnu.trove.decorator.bo:
    gnu.trove.iterator.TDoubleLongIterator it -> b
    gnu.trove.decorator.TDoubleLongMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TDoubleLongMapDecorator$1$1$1 -> gnu.trove.decorator.bp:
    java.lang.Long val -> d
    java.lang.Long val$v -> a
    java.lang.Double val$key -> b
    gnu.trove.decorator.TDoubleLongMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Double getKey() -> a
    java.lang.Long getValue() -> b
    int hashCode() -> hashCode
    java.lang.Long setValue(java.lang.Long) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TDoubleObjectMapDecorator -> gnu.trove.decorator.TDoubleObjectMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleObjectMap _map -> _map
    gnu.trove.map.TDoubleObjectMap getMap() -> getMap
    java.lang.Object put(java.lang.Double,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Double wrapKey(double) -> wrapKey
    double unwrapKey(java.lang.Double) -> unwrapKey
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
gnu.trove.decorator.TDoubleObjectMapDecorator$1 -> gnu.trove.decorator.bq:
    gnu.trove.decorator.TDoubleObjectMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TDoubleObjectMapDecorator$1$1 -> gnu.trove.decorator.br:
    gnu.trove.iterator.TDoubleObjectIterator it -> b
    gnu.trove.decorator.TDoubleObjectMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TDoubleObjectMapDecorator$1$1$1 -> gnu.trove.decorator.bs:
    java.lang.Object val -> d
    java.lang.Object val$v -> a
    java.lang.Double val$key -> b
    gnu.trove.decorator.TDoubleObjectMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Double getKey() -> a
    java.lang.Object getValue() -> getValue
    int hashCode() -> hashCode
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TDoubleSetDecorator -> gnu.trove.decorator.TDoubleSetDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.set.TDoubleSet _set -> _set
    gnu.trove.set.TDoubleSet getSet() -> getSet
    boolean add(java.lang.Double) -> add
    boolean equals(java.lang.Object) -> equals
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TDoubleSetDecorator$1 -> gnu.trove.decorator.bt:
    gnu.trove.iterator.TDoubleIterator it -> b
    gnu.trove.decorator.TDoubleSetDecorator this$0 -> a
    java.lang.Double next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TDoubleShortMapDecorator -> gnu.trove.decorator.TDoubleShortMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleShortMap _map -> _map
    gnu.trove.map.TDoubleShortMap getMap() -> getMap
    java.lang.Short put(java.lang.Double,java.lang.Short) -> put
    java.lang.Short get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Short remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Double wrapKey(double) -> wrapKey
    double unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Short wrapValue(short) -> wrapValue
    short unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TDoubleShortMapDecorator$1 -> gnu.trove.decorator.bu:
    gnu.trove.decorator.TDoubleShortMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TDoubleShortMapDecorator$1$1 -> gnu.trove.decorator.bv:
    gnu.trove.iterator.TDoubleShortIterator it -> b
    gnu.trove.decorator.TDoubleShortMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TDoubleShortMapDecorator$1$1$1 -> gnu.trove.decorator.bw:
    java.lang.Short val -> d
    java.lang.Short val$v -> a
    java.lang.Double val$key -> b
    gnu.trove.decorator.TDoubleShortMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Double getKey() -> a
    java.lang.Short getValue() -> b
    int hashCode() -> hashCode
    java.lang.Short setValue(java.lang.Short) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TFloatByteMapDecorator -> gnu.trove.decorator.TFloatByteMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatByteMap _map -> _map
    gnu.trove.map.TFloatByteMap getMap() -> getMap
    java.lang.Byte put(java.lang.Float,java.lang.Byte) -> put
    java.lang.Byte get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Byte remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Float wrapKey(float) -> wrapKey
    float unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Byte wrapValue(byte) -> wrapValue
    byte unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TFloatByteMapDecorator$1 -> gnu.trove.decorator.bx:
    gnu.trove.decorator.TFloatByteMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TFloatByteMapDecorator$1$1 -> gnu.trove.decorator.by:
    gnu.trove.iterator.TFloatByteIterator it -> b
    gnu.trove.decorator.TFloatByteMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TFloatByteMapDecorator$1$1$1 -> gnu.trove.decorator.bz:
    java.lang.Byte val -> d
    java.lang.Byte val$v -> a
    java.lang.Float val$key -> b
    gnu.trove.decorator.TFloatByteMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Float getKey() -> a
    java.lang.Byte getValue() -> b
    int hashCode() -> hashCode
    java.lang.Byte setValue(java.lang.Byte) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TFloatCharMapDecorator -> gnu.trove.decorator.TFloatCharMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatCharMap _map -> _map
    gnu.trove.map.TFloatCharMap getMap() -> getMap
    java.lang.Character put(java.lang.Float,java.lang.Character) -> put
    java.lang.Character get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Character remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Float wrapKey(float) -> wrapKey
    float unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Character wrapValue(char) -> wrapValue
    char unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TFloatCharMapDecorator$1 -> gnu.trove.decorator.ca:
    gnu.trove.decorator.TFloatCharMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TFloatCharMapDecorator$1$1 -> gnu.trove.decorator.cb:
    gnu.trove.iterator.TFloatCharIterator it -> b
    gnu.trove.decorator.TFloatCharMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TFloatCharMapDecorator$1$1$1 -> gnu.trove.decorator.cc:
    java.lang.Character val -> d
    java.lang.Character val$v -> a
    java.lang.Float val$key -> b
    gnu.trove.decorator.TFloatCharMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Float getKey() -> a
    java.lang.Character getValue() -> b
    int hashCode() -> hashCode
    java.lang.Character setValue(java.lang.Character) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TFloatDoubleMapDecorator -> gnu.trove.decorator.TFloatDoubleMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatDoubleMap _map -> _map
    gnu.trove.map.TFloatDoubleMap getMap() -> getMap
    java.lang.Double put(java.lang.Float,java.lang.Double) -> put
    java.lang.Double get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Double remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Float wrapKey(float) -> wrapKey
    float unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Double wrapValue(double) -> wrapValue
    double unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TFloatDoubleMapDecorator$1 -> gnu.trove.decorator.cd:
    gnu.trove.decorator.TFloatDoubleMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TFloatDoubleMapDecorator$1$1 -> gnu.trove.decorator.ce:
    gnu.trove.iterator.TFloatDoubleIterator it -> b
    gnu.trove.decorator.TFloatDoubleMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TFloatDoubleMapDecorator$1$1$1 -> gnu.trove.decorator.cf:
    java.lang.Double val -> d
    java.lang.Double val$v -> a
    java.lang.Float val$key -> b
    gnu.trove.decorator.TFloatDoubleMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Float getKey() -> a
    java.lang.Double getValue() -> b
    int hashCode() -> hashCode
    java.lang.Double setValue(java.lang.Double) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TFloatFloatMapDecorator -> gnu.trove.decorator.TFloatFloatMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatFloatMap _map -> _map
    gnu.trove.map.TFloatFloatMap getMap() -> getMap
    java.lang.Float put(java.lang.Float,java.lang.Float) -> put
    java.lang.Float get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Float remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Float wrapKey(float) -> wrapKey
    float unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Float wrapValue(float) -> wrapValue
    float unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TFloatFloatMapDecorator$1 -> gnu.trove.decorator.cg:
    gnu.trove.decorator.TFloatFloatMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TFloatFloatMapDecorator$1$1 -> gnu.trove.decorator.ch:
    gnu.trove.iterator.TFloatFloatIterator it -> b
    gnu.trove.decorator.TFloatFloatMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TFloatFloatMapDecorator$1$1$1 -> gnu.trove.decorator.ci:
    java.lang.Float val -> d
    java.lang.Float val$v -> a
    java.lang.Float val$key -> b
    gnu.trove.decorator.TFloatFloatMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Float getKey() -> a
    java.lang.Float getValue() -> b
    int hashCode() -> hashCode
    java.lang.Float setValue(java.lang.Float) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TFloatIntMapDecorator -> gnu.trove.decorator.TFloatIntMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatIntMap _map -> _map
    gnu.trove.map.TFloatIntMap getMap() -> getMap
    java.lang.Integer put(java.lang.Float,java.lang.Integer) -> put
    java.lang.Integer get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Integer remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Float wrapKey(float) -> wrapKey
    float unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Integer wrapValue(int) -> wrapValue
    int unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TFloatIntMapDecorator$1 -> gnu.trove.decorator.cj:
    gnu.trove.decorator.TFloatIntMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TFloatIntMapDecorator$1$1 -> gnu.trove.decorator.ck:
    gnu.trove.iterator.TFloatIntIterator it -> b
    gnu.trove.decorator.TFloatIntMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TFloatIntMapDecorator$1$1$1 -> gnu.trove.decorator.cl:
    java.lang.Integer val -> d
    java.lang.Integer val$v -> a
    java.lang.Float val$key -> b
    gnu.trove.decorator.TFloatIntMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Float getKey() -> a
    java.lang.Integer getValue() -> b
    int hashCode() -> hashCode
    java.lang.Integer setValue(java.lang.Integer) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TFloatListDecorator -> gnu.trove.decorator.TFloatListDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TFloatList list -> list
    gnu.trove.list.TFloatList getList() -> getList
    int size() -> size
    java.lang.Float get(int) -> get
    java.lang.Float set(int,java.lang.Float) -> set
    void add(int,java.lang.Float) -> add
    java.lang.Float remove(int) -> remove
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
gnu.trove.decorator.TFloatLongMapDecorator -> gnu.trove.decorator.TFloatLongMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatLongMap _map -> _map
    gnu.trove.map.TFloatLongMap getMap() -> getMap
    java.lang.Long put(java.lang.Float,java.lang.Long) -> put
    java.lang.Long get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Long remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Float wrapKey(float) -> wrapKey
    float unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Long wrapValue(long) -> wrapValue
    long unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TFloatLongMapDecorator$1 -> gnu.trove.decorator.cm:
    gnu.trove.decorator.TFloatLongMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TFloatLongMapDecorator$1$1 -> gnu.trove.decorator.cn:
    gnu.trove.iterator.TFloatLongIterator it -> b
    gnu.trove.decorator.TFloatLongMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TFloatLongMapDecorator$1$1$1 -> gnu.trove.decorator.co:
    java.lang.Long val -> d
    java.lang.Long val$v -> a
    java.lang.Float val$key -> b
    gnu.trove.decorator.TFloatLongMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Float getKey() -> a
    java.lang.Long getValue() -> b
    int hashCode() -> hashCode
    java.lang.Long setValue(java.lang.Long) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TFloatObjectMapDecorator -> gnu.trove.decorator.TFloatObjectMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatObjectMap _map -> _map
    gnu.trove.map.TFloatObjectMap getMap() -> getMap
    java.lang.Object put(java.lang.Float,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Float wrapKey(float) -> wrapKey
    float unwrapKey(java.lang.Float) -> unwrapKey
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
gnu.trove.decorator.TFloatObjectMapDecorator$1 -> gnu.trove.decorator.cp:
    gnu.trove.decorator.TFloatObjectMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TFloatObjectMapDecorator$1$1 -> gnu.trove.decorator.cq:
    gnu.trove.iterator.TFloatObjectIterator it -> b
    gnu.trove.decorator.TFloatObjectMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TFloatObjectMapDecorator$1$1$1 -> gnu.trove.decorator.cr:
    java.lang.Object val -> d
    java.lang.Object val$v -> a
    java.lang.Float val$key -> b
    gnu.trove.decorator.TFloatObjectMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Float getKey() -> a
    java.lang.Object getValue() -> getValue
    int hashCode() -> hashCode
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TFloatSetDecorator -> gnu.trove.decorator.TFloatSetDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.set.TFloatSet _set -> _set
    gnu.trove.set.TFloatSet getSet() -> getSet
    boolean add(java.lang.Float) -> add
    boolean equals(java.lang.Object) -> equals
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TFloatSetDecorator$1 -> gnu.trove.decorator.cs:
    gnu.trove.iterator.TFloatIterator it -> b
    gnu.trove.decorator.TFloatSetDecorator this$0 -> a
    java.lang.Float next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TFloatShortMapDecorator -> gnu.trove.decorator.TFloatShortMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatShortMap _map -> _map
    gnu.trove.map.TFloatShortMap getMap() -> getMap
    java.lang.Short put(java.lang.Float,java.lang.Short) -> put
    java.lang.Short get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Short remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Float wrapKey(float) -> wrapKey
    float unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Short wrapValue(short) -> wrapValue
    short unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TFloatShortMapDecorator$1 -> gnu.trove.decorator.ct:
    gnu.trove.decorator.TFloatShortMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TFloatShortMapDecorator$1$1 -> gnu.trove.decorator.cu:
    gnu.trove.iterator.TFloatShortIterator it -> b
    gnu.trove.decorator.TFloatShortMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TFloatShortMapDecorator$1$1$1 -> gnu.trove.decorator.cv:
    java.lang.Short val -> d
    java.lang.Short val$v -> a
    java.lang.Float val$key -> b
    gnu.trove.decorator.TFloatShortMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Float getKey() -> a
    java.lang.Short getValue() -> b
    int hashCode() -> hashCode
    java.lang.Short setValue(java.lang.Short) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TIntByteMapDecorator -> gnu.trove.decorator.TIntByteMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntByteMap _map -> _map
    gnu.trove.map.TIntByteMap getMap() -> getMap
    java.lang.Byte put(java.lang.Integer,java.lang.Byte) -> put
    java.lang.Byte get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Byte remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Integer wrapKey(int) -> wrapKey
    int unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Byte wrapValue(byte) -> wrapValue
    byte unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TIntByteMapDecorator$1 -> gnu.trove.decorator.cw:
    gnu.trove.decorator.TIntByteMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TIntByteMapDecorator$1$1 -> gnu.trove.decorator.cx:
    gnu.trove.iterator.TIntByteIterator it -> b
    gnu.trove.decorator.TIntByteMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TIntByteMapDecorator$1$1$1 -> gnu.trove.decorator.cy:
    java.lang.Byte val -> d
    java.lang.Byte val$v -> a
    java.lang.Integer val$key -> b
    gnu.trove.decorator.TIntByteMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Integer getKey() -> a
    java.lang.Byte getValue() -> b
    int hashCode() -> hashCode
    java.lang.Byte setValue(java.lang.Byte) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TIntCharMapDecorator -> gnu.trove.decorator.TIntCharMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntCharMap _map -> _map
    gnu.trove.map.TIntCharMap getMap() -> getMap
    java.lang.Character put(java.lang.Integer,java.lang.Character) -> put
    java.lang.Character get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Character remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Integer wrapKey(int) -> wrapKey
    int unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Character wrapValue(char) -> wrapValue
    char unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TIntCharMapDecorator$1 -> gnu.trove.decorator.cz:
    gnu.trove.decorator.TIntCharMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TIntCharMapDecorator$1$1 -> gnu.trove.decorator.da:
    gnu.trove.iterator.TIntCharIterator it -> b
    gnu.trove.decorator.TIntCharMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TIntCharMapDecorator$1$1$1 -> gnu.trove.decorator.db:
    java.lang.Character val -> d
    java.lang.Character val$v -> a
    java.lang.Integer val$key -> b
    gnu.trove.decorator.TIntCharMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Integer getKey() -> a
    java.lang.Character getValue() -> b
    int hashCode() -> hashCode
    java.lang.Character setValue(java.lang.Character) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TIntDoubleMapDecorator -> gnu.trove.decorator.TIntDoubleMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntDoubleMap _map -> _map
    gnu.trove.map.TIntDoubleMap getMap() -> getMap
    java.lang.Double put(java.lang.Integer,java.lang.Double) -> put
    java.lang.Double get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Double remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Integer wrapKey(int) -> wrapKey
    int unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Double wrapValue(double) -> wrapValue
    double unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TIntDoubleMapDecorator$1 -> gnu.trove.decorator.dc:
    gnu.trove.decorator.TIntDoubleMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TIntDoubleMapDecorator$1$1 -> gnu.trove.decorator.dd:
    gnu.trove.iterator.TIntDoubleIterator it -> b
    gnu.trove.decorator.TIntDoubleMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TIntDoubleMapDecorator$1$1$1 -> gnu.trove.decorator.de:
    java.lang.Double val -> d
    java.lang.Double val$v -> a
    java.lang.Integer val$key -> b
    gnu.trove.decorator.TIntDoubleMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Integer getKey() -> a
    java.lang.Double getValue() -> b
    int hashCode() -> hashCode
    java.lang.Double setValue(java.lang.Double) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TIntFloatMapDecorator -> gnu.trove.decorator.TIntFloatMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntFloatMap _map -> _map
    gnu.trove.map.TIntFloatMap getMap() -> getMap
    java.lang.Float put(java.lang.Integer,java.lang.Float) -> put
    java.lang.Float get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Float remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Integer wrapKey(int) -> wrapKey
    int unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Float wrapValue(float) -> wrapValue
    float unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TIntFloatMapDecorator$1 -> gnu.trove.decorator.df:
    gnu.trove.decorator.TIntFloatMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TIntFloatMapDecorator$1$1 -> gnu.trove.decorator.dg:
    gnu.trove.iterator.TIntFloatIterator it -> b
    gnu.trove.decorator.TIntFloatMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TIntFloatMapDecorator$1$1$1 -> gnu.trove.decorator.dh:
    java.lang.Float val -> d
    java.lang.Float val$v -> a
    java.lang.Integer val$key -> b
    gnu.trove.decorator.TIntFloatMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Integer getKey() -> a
    java.lang.Float getValue() -> b
    int hashCode() -> hashCode
    java.lang.Float setValue(java.lang.Float) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TIntIntMapDecorator -> gnu.trove.decorator.TIntIntMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntIntMap _map -> _map
    gnu.trove.map.TIntIntMap getMap() -> getMap
    java.lang.Integer put(java.lang.Integer,java.lang.Integer) -> put
    java.lang.Integer get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Integer remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Integer wrapKey(int) -> wrapKey
    int unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Integer wrapValue(int) -> wrapValue
    int unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TIntIntMapDecorator$1 -> gnu.trove.decorator.di:
    gnu.trove.decorator.TIntIntMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TIntIntMapDecorator$1$1 -> gnu.trove.decorator.dj:
    gnu.trove.iterator.TIntIntIterator it -> b
    gnu.trove.decorator.TIntIntMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TIntIntMapDecorator$1$1$1 -> gnu.trove.decorator.dk:
    java.lang.Integer val -> d
    java.lang.Integer val$v -> a
    java.lang.Integer val$key -> b
    gnu.trove.decorator.TIntIntMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Integer getKey() -> a
    java.lang.Integer getValue() -> b
    int hashCode() -> hashCode
    java.lang.Integer setValue(java.lang.Integer) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TIntListDecorator -> gnu.trove.decorator.TIntListDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TIntList list -> list
    gnu.trove.list.TIntList getList() -> getList
    int size() -> size
    java.lang.Integer get(int) -> get
    java.lang.Integer set(int,java.lang.Integer) -> set
    void add(int,java.lang.Integer) -> add
    java.lang.Integer remove(int) -> remove
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
gnu.trove.decorator.TIntLongMapDecorator -> gnu.trove.decorator.TIntLongMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntLongMap _map -> _map
    gnu.trove.map.TIntLongMap getMap() -> getMap
    java.lang.Long put(java.lang.Integer,java.lang.Long) -> put
    java.lang.Long get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Long remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Integer wrapKey(int) -> wrapKey
    int unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Long wrapValue(long) -> wrapValue
    long unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TIntLongMapDecorator$1 -> gnu.trove.decorator.dl:
    gnu.trove.decorator.TIntLongMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TIntLongMapDecorator$1$1 -> gnu.trove.decorator.dm:
    gnu.trove.iterator.TIntLongIterator it -> b
    gnu.trove.decorator.TIntLongMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TIntLongMapDecorator$1$1$1 -> gnu.trove.decorator.dn:
    java.lang.Long val -> d
    java.lang.Long val$v -> a
    java.lang.Integer val$key -> b
    gnu.trove.decorator.TIntLongMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Integer getKey() -> a
    java.lang.Long getValue() -> b
    int hashCode() -> hashCode
    java.lang.Long setValue(java.lang.Long) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TIntObjectMapDecorator -> gnu.trove.decorator.TIntObjectMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntObjectMap _map -> _map
    gnu.trove.map.TIntObjectMap getMap() -> getMap
    java.lang.Object put(java.lang.Integer,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Integer wrapKey(int) -> wrapKey
    int unwrapKey(java.lang.Integer) -> unwrapKey
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
gnu.trove.decorator.TIntObjectMapDecorator$1 -> gnu.trove.decorator.do:
    gnu.trove.decorator.TIntObjectMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TIntObjectMapDecorator$1$1 -> gnu.trove.decorator.dp:
    gnu.trove.iterator.TIntObjectIterator it -> b
    gnu.trove.decorator.TIntObjectMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TIntObjectMapDecorator$1$1$1 -> gnu.trove.decorator.dq:
    java.lang.Object val -> d
    java.lang.Object val$v -> a
    java.lang.Integer val$key -> b
    gnu.trove.decorator.TIntObjectMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Integer getKey() -> a
    java.lang.Object getValue() -> getValue
    int hashCode() -> hashCode
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TIntSetDecorator -> gnu.trove.decorator.TIntSetDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.set.TIntSet _set -> _set
    gnu.trove.set.TIntSet getSet() -> getSet
    boolean add(java.lang.Integer) -> add
    boolean equals(java.lang.Object) -> equals
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TIntSetDecorator$1 -> gnu.trove.decorator.dr:
    gnu.trove.iterator.TIntIterator it -> b
    gnu.trove.decorator.TIntSetDecorator this$0 -> a
    java.lang.Integer next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TIntShortMapDecorator -> gnu.trove.decorator.TIntShortMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntShortMap _map -> _map
    gnu.trove.map.TIntShortMap getMap() -> getMap
    java.lang.Short put(java.lang.Integer,java.lang.Short) -> put
    java.lang.Short get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Short remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Integer wrapKey(int) -> wrapKey
    int unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Short wrapValue(short) -> wrapValue
    short unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TIntShortMapDecorator$1 -> gnu.trove.decorator.ds:
    gnu.trove.decorator.TIntShortMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TIntShortMapDecorator$1$1 -> gnu.trove.decorator.dt:
    gnu.trove.iterator.TIntShortIterator it -> b
    gnu.trove.decorator.TIntShortMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TIntShortMapDecorator$1$1$1 -> gnu.trove.decorator.du:
    java.lang.Short val -> d
    java.lang.Short val$v -> a
    java.lang.Integer val$key -> b
    gnu.trove.decorator.TIntShortMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Integer getKey() -> a
    java.lang.Short getValue() -> b
    int hashCode() -> hashCode
    java.lang.Short setValue(java.lang.Short) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TLongByteMapDecorator -> gnu.trove.decorator.TLongByteMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongByteMap _map -> _map
    gnu.trove.map.TLongByteMap getMap() -> getMap
    java.lang.Byte put(java.lang.Long,java.lang.Byte) -> put
    java.lang.Byte get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Byte remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Long wrapKey(long) -> wrapKey
    long unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Byte wrapValue(byte) -> wrapValue
    byte unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TLongByteMapDecorator$1 -> gnu.trove.decorator.dv:
    gnu.trove.decorator.TLongByteMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TLongByteMapDecorator$1$1 -> gnu.trove.decorator.dw:
    gnu.trove.iterator.TLongByteIterator it -> b
    gnu.trove.decorator.TLongByteMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TLongByteMapDecorator$1$1$1 -> gnu.trove.decorator.dx:
    java.lang.Byte val -> d
    java.lang.Byte val$v -> a
    java.lang.Long val$key -> b
    gnu.trove.decorator.TLongByteMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Long getKey() -> a
    java.lang.Byte getValue() -> b
    int hashCode() -> hashCode
    java.lang.Byte setValue(java.lang.Byte) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TLongCharMapDecorator -> gnu.trove.decorator.TLongCharMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongCharMap _map -> _map
    gnu.trove.map.TLongCharMap getMap() -> getMap
    java.lang.Character put(java.lang.Long,java.lang.Character) -> put
    java.lang.Character get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Character remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Long wrapKey(long) -> wrapKey
    long unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Character wrapValue(char) -> wrapValue
    char unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TLongCharMapDecorator$1 -> gnu.trove.decorator.dy:
    gnu.trove.decorator.TLongCharMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TLongCharMapDecorator$1$1 -> gnu.trove.decorator.dz:
    gnu.trove.iterator.TLongCharIterator it -> b
    gnu.trove.decorator.TLongCharMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TLongCharMapDecorator$1$1$1 -> gnu.trove.decorator.ea:
    java.lang.Character val -> d
    java.lang.Character val$v -> a
    java.lang.Long val$key -> b
    gnu.trove.decorator.TLongCharMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Long getKey() -> a
    java.lang.Character getValue() -> b
    int hashCode() -> hashCode
    java.lang.Character setValue(java.lang.Character) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TLongDoubleMapDecorator -> gnu.trove.decorator.TLongDoubleMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongDoubleMap _map -> _map
    gnu.trove.map.TLongDoubleMap getMap() -> getMap
    java.lang.Double put(java.lang.Long,java.lang.Double) -> put
    java.lang.Double get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Double remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Long wrapKey(long) -> wrapKey
    long unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Double wrapValue(double) -> wrapValue
    double unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TLongDoubleMapDecorator$1 -> gnu.trove.decorator.eb:
    gnu.trove.decorator.TLongDoubleMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TLongDoubleMapDecorator$1$1 -> gnu.trove.decorator.ec:
    gnu.trove.iterator.TLongDoubleIterator it -> b
    gnu.trove.decorator.TLongDoubleMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TLongDoubleMapDecorator$1$1$1 -> gnu.trove.decorator.ed:
    java.lang.Double val -> d
    java.lang.Double val$v -> a
    java.lang.Long val$key -> b
    gnu.trove.decorator.TLongDoubleMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Long getKey() -> a
    java.lang.Double getValue() -> b
    int hashCode() -> hashCode
    java.lang.Double setValue(java.lang.Double) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TLongFloatMapDecorator -> gnu.trove.decorator.TLongFloatMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongFloatMap _map -> _map
    gnu.trove.map.TLongFloatMap getMap() -> getMap
    java.lang.Float put(java.lang.Long,java.lang.Float) -> put
    java.lang.Float get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Float remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Long wrapKey(long) -> wrapKey
    long unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Float wrapValue(float) -> wrapValue
    float unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TLongFloatMapDecorator$1 -> gnu.trove.decorator.ee:
    gnu.trove.decorator.TLongFloatMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TLongFloatMapDecorator$1$1 -> gnu.trove.decorator.ef:
    gnu.trove.iterator.TLongFloatIterator it -> b
    gnu.trove.decorator.TLongFloatMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TLongFloatMapDecorator$1$1$1 -> gnu.trove.decorator.eg:
    java.lang.Float val -> d
    java.lang.Float val$v -> a
    java.lang.Long val$key -> b
    gnu.trove.decorator.TLongFloatMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Long getKey() -> a
    java.lang.Float getValue() -> b
    int hashCode() -> hashCode
    java.lang.Float setValue(java.lang.Float) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TLongIntMapDecorator -> gnu.trove.decorator.TLongIntMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongIntMap _map -> _map
    gnu.trove.map.TLongIntMap getMap() -> getMap
    java.lang.Integer put(java.lang.Long,java.lang.Integer) -> put
    java.lang.Integer get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Integer remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Long wrapKey(long) -> wrapKey
    long unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Integer wrapValue(int) -> wrapValue
    int unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TLongIntMapDecorator$1 -> gnu.trove.decorator.eh:
    gnu.trove.decorator.TLongIntMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TLongIntMapDecorator$1$1 -> gnu.trove.decorator.ei:
    gnu.trove.iterator.TLongIntIterator it -> b
    gnu.trove.decorator.TLongIntMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TLongIntMapDecorator$1$1$1 -> gnu.trove.decorator.ej:
    java.lang.Integer val -> d
    java.lang.Integer val$v -> a
    java.lang.Long val$key -> b
    gnu.trove.decorator.TLongIntMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Long getKey() -> a
    java.lang.Integer getValue() -> b
    int hashCode() -> hashCode
    java.lang.Integer setValue(java.lang.Integer) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TLongListDecorator -> gnu.trove.decorator.TLongListDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TLongList list -> list
    gnu.trove.list.TLongList getList() -> getList
    int size() -> size
    java.lang.Long get(int) -> get
    java.lang.Long set(int,java.lang.Long) -> set
    void add(int,java.lang.Long) -> add
    java.lang.Long remove(int) -> remove
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
gnu.trove.decorator.TLongLongMapDecorator -> gnu.trove.decorator.TLongLongMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongLongMap _map -> _map
    gnu.trove.map.TLongLongMap getMap() -> getMap
    java.lang.Long put(java.lang.Long,java.lang.Long) -> put
    java.lang.Long get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Long remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Long wrapKey(long) -> wrapKey
    long unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Long wrapValue(long) -> wrapValue
    long unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TLongLongMapDecorator$1 -> gnu.trove.decorator.ek:
    gnu.trove.decorator.TLongLongMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TLongLongMapDecorator$1$1 -> gnu.trove.decorator.el:
    gnu.trove.iterator.TLongLongIterator it -> b
    gnu.trove.decorator.TLongLongMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TLongLongMapDecorator$1$1$1 -> gnu.trove.decorator.em:
    java.lang.Long val -> d
    java.lang.Long val$v -> a
    java.lang.Long val$key -> b
    gnu.trove.decorator.TLongLongMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Long getKey() -> a
    java.lang.Long getValue() -> b
    int hashCode() -> hashCode
    java.lang.Long setValue(java.lang.Long) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TLongObjectMapDecorator -> gnu.trove.decorator.TLongObjectMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongObjectMap _map -> _map
    gnu.trove.map.TLongObjectMap getMap() -> getMap
    java.lang.Object put(java.lang.Long,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Long wrapKey(long) -> wrapKey
    long unwrapKey(java.lang.Long) -> unwrapKey
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
gnu.trove.decorator.TLongObjectMapDecorator$1 -> gnu.trove.decorator.en:
    gnu.trove.decorator.TLongObjectMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TLongObjectMapDecorator$1$1 -> gnu.trove.decorator.eo:
    gnu.trove.iterator.TLongObjectIterator it -> b
    gnu.trove.decorator.TLongObjectMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TLongObjectMapDecorator$1$1$1 -> gnu.trove.decorator.ep:
    java.lang.Object val -> d
    java.lang.Object val$v -> a
    java.lang.Long val$key -> b
    gnu.trove.decorator.TLongObjectMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Long getKey() -> a
    java.lang.Object getValue() -> getValue
    int hashCode() -> hashCode
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TLongSetDecorator -> gnu.trove.decorator.TLongSetDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.set.TLongSet _set -> _set
    gnu.trove.set.TLongSet getSet() -> getSet
    boolean add(java.lang.Long) -> add
    boolean equals(java.lang.Object) -> equals
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TLongSetDecorator$1 -> gnu.trove.decorator.eq:
    gnu.trove.iterator.TLongIterator it -> b
    gnu.trove.decorator.TLongSetDecorator this$0 -> a
    java.lang.Long next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TLongShortMapDecorator -> gnu.trove.decorator.TLongShortMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongShortMap _map -> _map
    gnu.trove.map.TLongShortMap getMap() -> getMap
    java.lang.Short put(java.lang.Long,java.lang.Short) -> put
    java.lang.Short get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Short remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Long wrapKey(long) -> wrapKey
    long unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Short wrapValue(short) -> wrapValue
    short unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TLongShortMapDecorator$1 -> gnu.trove.decorator.er:
    gnu.trove.decorator.TLongShortMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TLongShortMapDecorator$1$1 -> gnu.trove.decorator.es:
    gnu.trove.iterator.TLongShortIterator it -> b
    gnu.trove.decorator.TLongShortMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TLongShortMapDecorator$1$1$1 -> gnu.trove.decorator.et:
    java.lang.Short val -> d
    java.lang.Short val$v -> a
    java.lang.Long val$key -> b
    gnu.trove.decorator.TLongShortMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Long getKey() -> a
    java.lang.Short getValue() -> b
    int hashCode() -> hashCode
    java.lang.Short setValue(java.lang.Short) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TObjectByteMapDecorator -> gnu.trove.decorator.TObjectByteMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectByteMap _map -> _map
    gnu.trove.map.TObjectByteMap getMap() -> getMap
    java.lang.Byte put(java.lang.Object,java.lang.Byte) -> put
    java.lang.Byte get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Byte remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Byte wrapValue(byte) -> wrapValue
    byte unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TObjectByteMapDecorator$1 -> gnu.trove.decorator.eu:
    gnu.trove.decorator.TObjectByteMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TObjectByteMapDecorator$1$1 -> gnu.trove.decorator.ev:
    gnu.trove.iterator.TObjectByteIterator it -> b
    gnu.trove.decorator.TObjectByteMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TObjectByteMapDecorator$1$1$1 -> gnu.trove.decorator.ew:
    java.lang.Byte val -> d
    java.lang.Byte val$v -> a
    java.lang.Object val$key -> b
    gnu.trove.decorator.TObjectByteMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Object getKey() -> getKey
    java.lang.Byte getValue() -> a
    int hashCode() -> hashCode
    java.lang.Byte setValue(java.lang.Byte) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
gnu.trove.decorator.TObjectCharMapDecorator -> gnu.trove.decorator.TObjectCharMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectCharMap _map -> _map
    gnu.trove.map.TObjectCharMap getMap() -> getMap
    java.lang.Character put(java.lang.Object,java.lang.Character) -> put
    java.lang.Character get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Character remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Character wrapValue(char) -> wrapValue
    char unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TObjectCharMapDecorator$1 -> gnu.trove.decorator.ex:
    gnu.trove.decorator.TObjectCharMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TObjectCharMapDecorator$1$1 -> gnu.trove.decorator.ey:
    gnu.trove.iterator.TObjectCharIterator it -> b
    gnu.trove.decorator.TObjectCharMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TObjectCharMapDecorator$1$1$1 -> gnu.trove.decorator.ez:
    java.lang.Character val -> d
    java.lang.Character val$v -> a
    java.lang.Object val$key -> b
    gnu.trove.decorator.TObjectCharMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Object getKey() -> getKey
    java.lang.Character getValue() -> a
    int hashCode() -> hashCode
    java.lang.Character setValue(java.lang.Character) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
gnu.trove.decorator.TObjectDoubleMapDecorator -> gnu.trove.decorator.TObjectDoubleMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectDoubleMap _map -> _map
    gnu.trove.map.TObjectDoubleMap getMap() -> getMap
    java.lang.Double put(java.lang.Object,java.lang.Double) -> put
    java.lang.Double get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Double remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Double wrapValue(double) -> wrapValue
    double unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TObjectDoubleMapDecorator$1 -> gnu.trove.decorator.fa:
    gnu.trove.decorator.TObjectDoubleMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TObjectDoubleMapDecorator$1$1 -> gnu.trove.decorator.fb:
    gnu.trove.iterator.TObjectDoubleIterator it -> b
    gnu.trove.decorator.TObjectDoubleMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TObjectDoubleMapDecorator$1$1$1 -> gnu.trove.decorator.fc:
    java.lang.Double val -> d
    java.lang.Double val$v -> a
    java.lang.Object val$key -> b
    gnu.trove.decorator.TObjectDoubleMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Object getKey() -> getKey
    java.lang.Double getValue() -> a
    int hashCode() -> hashCode
    java.lang.Double setValue(java.lang.Double) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
gnu.trove.decorator.TObjectFloatMapDecorator -> gnu.trove.decorator.TObjectFloatMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectFloatMap _map -> _map
    gnu.trove.map.TObjectFloatMap getMap() -> getMap
    java.lang.Float put(java.lang.Object,java.lang.Float) -> put
    java.lang.Float get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Float remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Float wrapValue(float) -> wrapValue
    float unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TObjectFloatMapDecorator$1 -> gnu.trove.decorator.fd:
    gnu.trove.decorator.TObjectFloatMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TObjectFloatMapDecorator$1$1 -> gnu.trove.decorator.fe:
    gnu.trove.iterator.TObjectFloatIterator it -> b
    gnu.trove.decorator.TObjectFloatMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TObjectFloatMapDecorator$1$1$1 -> gnu.trove.decorator.ff:
    java.lang.Float val -> d
    java.lang.Float val$v -> a
    java.lang.Object val$key -> b
    gnu.trove.decorator.TObjectFloatMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Object getKey() -> getKey
    java.lang.Float getValue() -> a
    int hashCode() -> hashCode
    java.lang.Float setValue(java.lang.Float) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
gnu.trove.decorator.TObjectIntMapDecorator -> gnu.trove.decorator.TObjectIntMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectIntMap _map -> _map
    gnu.trove.map.TObjectIntMap getMap() -> getMap
    java.lang.Integer put(java.lang.Object,java.lang.Integer) -> put
    java.lang.Integer get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Integer remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Integer wrapValue(int) -> wrapValue
    int unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TObjectIntMapDecorator$1 -> gnu.trove.decorator.fg:
    gnu.trove.decorator.TObjectIntMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TObjectIntMapDecorator$1$1 -> gnu.trove.decorator.fh:
    gnu.trove.iterator.TObjectIntIterator it -> b
    gnu.trove.decorator.TObjectIntMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TObjectIntMapDecorator$1$1$1 -> gnu.trove.decorator.fi:
    java.lang.Integer val -> d
    java.lang.Integer val$v -> a
    java.lang.Object val$key -> b
    gnu.trove.decorator.TObjectIntMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Object getKey() -> getKey
    java.lang.Integer getValue() -> a
    int hashCode() -> hashCode
    java.lang.Integer setValue(java.lang.Integer) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
gnu.trove.decorator.TObjectLongMapDecorator -> gnu.trove.decorator.TObjectLongMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectLongMap _map -> _map
    gnu.trove.map.TObjectLongMap getMap() -> getMap
    java.lang.Long put(java.lang.Object,java.lang.Long) -> put
    java.lang.Long get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Long remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Long wrapValue(long) -> wrapValue
    long unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TObjectLongMapDecorator$1 -> gnu.trove.decorator.fj:
    gnu.trove.decorator.TObjectLongMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TObjectLongMapDecorator$1$1 -> gnu.trove.decorator.fk:
    gnu.trove.iterator.TObjectLongIterator it -> b
    gnu.trove.decorator.TObjectLongMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TObjectLongMapDecorator$1$1$1 -> gnu.trove.decorator.fl:
    java.lang.Long val -> d
    java.lang.Long val$v -> a
    java.lang.Object val$key -> b
    gnu.trove.decorator.TObjectLongMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Object getKey() -> getKey
    java.lang.Long getValue() -> a
    int hashCode() -> hashCode
    java.lang.Long setValue(java.lang.Long) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
gnu.trove.decorator.TObjectShortMapDecorator -> gnu.trove.decorator.TObjectShortMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectShortMap _map -> _map
    gnu.trove.map.TObjectShortMap getMap() -> getMap
    java.lang.Short put(java.lang.Object,java.lang.Short) -> put
    java.lang.Short get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Short remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Short wrapValue(short) -> wrapValue
    short unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TObjectShortMapDecorator$1 -> gnu.trove.decorator.fm:
    gnu.trove.decorator.TObjectShortMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TObjectShortMapDecorator$1$1 -> gnu.trove.decorator.fn:
    gnu.trove.iterator.TObjectShortIterator it -> b
    gnu.trove.decorator.TObjectShortMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TObjectShortMapDecorator$1$1$1 -> gnu.trove.decorator.fo:
    java.lang.Short val -> d
    java.lang.Short val$v -> a
    java.lang.Object val$key -> b
    gnu.trove.decorator.TObjectShortMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Object getKey() -> getKey
    java.lang.Short getValue() -> a
    int hashCode() -> hashCode
    java.lang.Short setValue(java.lang.Short) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
gnu.trove.decorator.TShortByteMapDecorator -> gnu.trove.decorator.TShortByteMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortByteMap _map -> _map
    gnu.trove.map.TShortByteMap getMap() -> getMap
    java.lang.Byte put(java.lang.Short,java.lang.Byte) -> put
    java.lang.Byte get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Byte remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Short wrapKey(short) -> wrapKey
    short unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Byte wrapValue(byte) -> wrapValue
    byte unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TShortByteMapDecorator$1 -> gnu.trove.decorator.fp:
    gnu.trove.decorator.TShortByteMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TShortByteMapDecorator$1$1 -> gnu.trove.decorator.fq:
    gnu.trove.iterator.TShortByteIterator it -> b
    gnu.trove.decorator.TShortByteMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TShortByteMapDecorator$1$1$1 -> gnu.trove.decorator.fr:
    java.lang.Byte val -> d
    java.lang.Byte val$v -> a
    java.lang.Short val$key -> b
    gnu.trove.decorator.TShortByteMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Short getKey() -> a
    java.lang.Byte getValue() -> b
    int hashCode() -> hashCode
    java.lang.Byte setValue(java.lang.Byte) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TShortCharMapDecorator -> gnu.trove.decorator.TShortCharMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortCharMap _map -> _map
    gnu.trove.map.TShortCharMap getMap() -> getMap
    java.lang.Character put(java.lang.Short,java.lang.Character) -> put
    java.lang.Character get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Character remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Short wrapKey(short) -> wrapKey
    short unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Character wrapValue(char) -> wrapValue
    char unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TShortCharMapDecorator$1 -> gnu.trove.decorator.fs:
    gnu.trove.decorator.TShortCharMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TShortCharMapDecorator$1$1 -> gnu.trove.decorator.ft:
    gnu.trove.iterator.TShortCharIterator it -> b
    gnu.trove.decorator.TShortCharMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TShortCharMapDecorator$1$1$1 -> gnu.trove.decorator.fu:
    java.lang.Character val -> d
    java.lang.Character val$v -> a
    java.lang.Short val$key -> b
    gnu.trove.decorator.TShortCharMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Short getKey() -> a
    java.lang.Character getValue() -> b
    int hashCode() -> hashCode
    java.lang.Character setValue(java.lang.Character) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TShortDoubleMapDecorator -> gnu.trove.decorator.TShortDoubleMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortDoubleMap _map -> _map
    gnu.trove.map.TShortDoubleMap getMap() -> getMap
    java.lang.Double put(java.lang.Short,java.lang.Double) -> put
    java.lang.Double get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Double remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Short wrapKey(short) -> wrapKey
    short unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Double wrapValue(double) -> wrapValue
    double unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TShortDoubleMapDecorator$1 -> gnu.trove.decorator.fv:
    gnu.trove.decorator.TShortDoubleMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TShortDoubleMapDecorator$1$1 -> gnu.trove.decorator.fw:
    gnu.trove.iterator.TShortDoubleIterator it -> b
    gnu.trove.decorator.TShortDoubleMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TShortDoubleMapDecorator$1$1$1 -> gnu.trove.decorator.fx:
    java.lang.Double val -> d
    java.lang.Double val$v -> a
    java.lang.Short val$key -> b
    gnu.trove.decorator.TShortDoubleMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Short getKey() -> a
    java.lang.Double getValue() -> b
    int hashCode() -> hashCode
    java.lang.Double setValue(java.lang.Double) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TShortFloatMapDecorator -> gnu.trove.decorator.TShortFloatMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortFloatMap _map -> _map
    gnu.trove.map.TShortFloatMap getMap() -> getMap
    java.lang.Float put(java.lang.Short,java.lang.Float) -> put
    java.lang.Float get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Float remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Short wrapKey(short) -> wrapKey
    short unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Float wrapValue(float) -> wrapValue
    float unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TShortFloatMapDecorator$1 -> gnu.trove.decorator.fy:
    gnu.trove.decorator.TShortFloatMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TShortFloatMapDecorator$1$1 -> gnu.trove.decorator.fz:
    gnu.trove.iterator.TShortFloatIterator it -> b
    gnu.trove.decorator.TShortFloatMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TShortFloatMapDecorator$1$1$1 -> gnu.trove.decorator.ga:
    java.lang.Float val -> d
    java.lang.Float val$v -> a
    java.lang.Short val$key -> b
    gnu.trove.decorator.TShortFloatMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Short getKey() -> a
    java.lang.Float getValue() -> b
    int hashCode() -> hashCode
    java.lang.Float setValue(java.lang.Float) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TShortIntMapDecorator -> gnu.trove.decorator.TShortIntMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortIntMap _map -> _map
    gnu.trove.map.TShortIntMap getMap() -> getMap
    java.lang.Integer put(java.lang.Short,java.lang.Integer) -> put
    java.lang.Integer get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Integer remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Short wrapKey(short) -> wrapKey
    short unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Integer wrapValue(int) -> wrapValue
    int unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TShortIntMapDecorator$1 -> gnu.trove.decorator.gb:
    gnu.trove.decorator.TShortIntMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TShortIntMapDecorator$1$1 -> gnu.trove.decorator.gc:
    gnu.trove.iterator.TShortIntIterator it -> b
    gnu.trove.decorator.TShortIntMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TShortIntMapDecorator$1$1$1 -> gnu.trove.decorator.gd:
    java.lang.Integer val -> d
    java.lang.Integer val$v -> a
    java.lang.Short val$key -> b
    gnu.trove.decorator.TShortIntMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Short getKey() -> a
    java.lang.Integer getValue() -> b
    int hashCode() -> hashCode
    java.lang.Integer setValue(java.lang.Integer) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TShortListDecorator -> gnu.trove.decorator.TShortListDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TShortList list -> list
    gnu.trove.list.TShortList getList() -> getList
    int size() -> size
    java.lang.Short get(int) -> get
    java.lang.Short set(int,java.lang.Short) -> set
    void add(int,java.lang.Short) -> add
    java.lang.Short remove(int) -> remove
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
gnu.trove.decorator.TShortLongMapDecorator -> gnu.trove.decorator.TShortLongMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortLongMap _map -> _map
    gnu.trove.map.TShortLongMap getMap() -> getMap
    java.lang.Long put(java.lang.Short,java.lang.Long) -> put
    java.lang.Long get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Long remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Short wrapKey(short) -> wrapKey
    short unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Long wrapValue(long) -> wrapValue
    long unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TShortLongMapDecorator$1 -> gnu.trove.decorator.ge:
    gnu.trove.decorator.TShortLongMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TShortLongMapDecorator$1$1 -> gnu.trove.decorator.gf:
    gnu.trove.iterator.TShortLongIterator it -> b
    gnu.trove.decorator.TShortLongMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TShortLongMapDecorator$1$1$1 -> gnu.trove.decorator.gg:
    java.lang.Long val -> d
    java.lang.Long val$v -> a
    java.lang.Short val$key -> b
    gnu.trove.decorator.TShortLongMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Short getKey() -> a
    java.lang.Long getValue() -> b
    int hashCode() -> hashCode
    java.lang.Long setValue(java.lang.Long) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TShortObjectMapDecorator -> gnu.trove.decorator.TShortObjectMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortObjectMap _map -> _map
    gnu.trove.map.TShortObjectMap getMap() -> getMap
    java.lang.Object put(java.lang.Short,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Short wrapKey(short) -> wrapKey
    short unwrapKey(java.lang.Short) -> unwrapKey
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
gnu.trove.decorator.TShortObjectMapDecorator$1 -> gnu.trove.decorator.gh:
    gnu.trove.decorator.TShortObjectMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TShortObjectMapDecorator$1$1 -> gnu.trove.decorator.gi:
    gnu.trove.iterator.TShortObjectIterator it -> b
    gnu.trove.decorator.TShortObjectMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TShortObjectMapDecorator$1$1$1 -> gnu.trove.decorator.gj:
    java.lang.Object val -> d
    java.lang.Object val$v -> a
    java.lang.Short val$key -> b
    gnu.trove.decorator.TShortObjectMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Short getKey() -> a
    java.lang.Object getValue() -> getValue
    int hashCode() -> hashCode
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getKey() -> getKey
gnu.trove.decorator.TShortSetDecorator -> gnu.trove.decorator.TShortSetDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.set.TShortSet _set -> _set
    gnu.trove.set.TShortSet getSet() -> getSet
    boolean add(java.lang.Short) -> add
    boolean equals(java.lang.Object) -> equals
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TShortSetDecorator$1 -> gnu.trove.decorator.gk:
    gnu.trove.iterator.TShortIterator it -> b
    gnu.trove.decorator.TShortSetDecorator this$0 -> a
    java.lang.Short next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TShortShortMapDecorator -> gnu.trove.decorator.TShortShortMapDecorator:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortShortMap _map -> _map
    gnu.trove.map.TShortShortMap getMap() -> getMap
    java.lang.Short put(java.lang.Short,java.lang.Short) -> put
    java.lang.Short get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Short remove(java.lang.Object) -> remove
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    void putAll(java.util.Map) -> putAll
    java.lang.Short wrapKey(short) -> wrapKey
    short unwrapKey(java.lang.Object) -> unwrapKey
    java.lang.Short wrapValue(short) -> wrapValue
    short unwrapValue(java.lang.Object) -> unwrapValue
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
gnu.trove.decorator.TShortShortMapDecorator$1 -> gnu.trove.decorator.gl:
    gnu.trove.decorator.TShortShortMapDecorator this$0 -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    boolean add(java.util.Map$Entry) -> a
    boolean remove(java.lang.Object) -> remove
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean add(java.lang.Object) -> add
gnu.trove.decorator.TShortShortMapDecorator$1$1 -> gnu.trove.decorator.gm:
    gnu.trove.iterator.TShortShortIterator it -> b
    gnu.trove.decorator.TShortShortMapDecorator$1 this$1 -> a
    java.util.Map$Entry next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
gnu.trove.decorator.TShortShortMapDecorator$1$1$1 -> gnu.trove.decorator.gn:
    java.lang.Short val -> d
    java.lang.Short val$v -> a
    java.lang.Short val$key -> b
    gnu.trove.decorator.TShortShortMapDecorator$1$1 this$2 -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.Short getKey() -> a
    java.lang.Short getValue() -> b
    int hashCode() -> hashCode
    java.lang.Short setValue(java.lang.Short) -> a
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gnu.trove.function.TByteFunction -> gnu.trove.a.a:
    byte execute(byte) -> a
gnu.trove.function.TCharFunction -> gnu.trove.a.b:
    char execute(char) -> a
gnu.trove.function.TDoubleFunction -> gnu.trove.a.c:
    double execute(double) -> a
gnu.trove.function.TFloatFunction -> gnu.trove.a.d:
    float execute(float) -> a
gnu.trove.function.TIntFunction -> gnu.trove.a.e:
    int execute(int) -> a
gnu.trove.function.TLongFunction -> gnu.trove.a.f:
    long execute(long) -> a
gnu.trove.function.TObjectFunction -> gnu.trove.a.g:
    java.lang.Object execute(java.lang.Object) -> a
gnu.trove.function.TShortFunction -> gnu.trove.a.h:
    short execute(short) -> a
gnu.trove.impl.Constants -> gnu.trove.impl.a:
    boolean VERBOSE -> h
    byte DEFAULT_BYTE_NO_ENTRY_VALUE -> a
    short DEFAULT_SHORT_NO_ENTRY_VALUE -> b
    char DEFAULT_CHAR_NO_ENTRY_VALUE -> c
    int DEFAULT_INT_NO_ENTRY_VALUE -> d
    long DEFAULT_LONG_NO_ENTRY_VALUE -> e
    float DEFAULT_FLOAT_NO_ENTRY_VALUE -> f
    double DEFAULT_DOUBLE_NO_ENTRY_VALUE -> g
gnu.trove.impl.HashFunctions -> gnu.trove.impl.b:
    boolean $assertionsDisabled -> a
    int hash(double) -> a
    int hash(float) -> a
    int hash(int) -> a
    int hash(long) -> a
    int hash(java.lang.Object) -> a
    int fastCeil(float) -> b
gnu.trove.impl.PrimeFinder -> gnu.trove.impl.c:
    int[] primeCapacities -> a
    int nextPrime(int) -> a
gnu.trove.impl.hash.TByteByteHash -> gnu.trove.impl.hash.TByteByteHash:
    long serialVersionUID -> serialVersionUID
    byte[] _set -> _set
    byte no_entry_key -> no_entry_key
    byte no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    byte getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(byte) -> contains
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(byte) -> index
    int indexRehashed(byte,int,int,byte) -> indexRehashed
    int insertKey(byte) -> insertKey
    int insertKeyRehash(byte,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,byte) -> insertKeyAt
    int XinsertKey(byte) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TByteCharHash -> gnu.trove.impl.hash.TByteCharHash:
    long serialVersionUID -> serialVersionUID
    byte[] _set -> _set
    byte no_entry_key -> no_entry_key
    char no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    byte getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(byte) -> contains
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(byte) -> index
    int indexRehashed(byte,int,int,byte) -> indexRehashed
    int insertKey(byte) -> insertKey
    int insertKeyRehash(byte,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,byte) -> insertKeyAt
    int XinsertKey(byte) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TByteDoubleHash -> gnu.trove.impl.hash.TByteDoubleHash:
    long serialVersionUID -> serialVersionUID
    byte[] _set -> _set
    byte no_entry_key -> no_entry_key
    double no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    byte getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(byte) -> contains
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(byte) -> index
    int indexRehashed(byte,int,int,byte) -> indexRehashed
    int insertKey(byte) -> insertKey
    int insertKeyRehash(byte,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,byte) -> insertKeyAt
    int XinsertKey(byte) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TByteFloatHash -> gnu.trove.impl.hash.TByteFloatHash:
    long serialVersionUID -> serialVersionUID
    byte[] _set -> _set
    byte no_entry_key -> no_entry_key
    float no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    byte getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(byte) -> contains
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(byte) -> index
    int indexRehashed(byte,int,int,byte) -> indexRehashed
    int insertKey(byte) -> insertKey
    int insertKeyRehash(byte,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,byte) -> insertKeyAt
    int XinsertKey(byte) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TByteHash -> gnu.trove.impl.hash.TByteHash:
    long serialVersionUID -> serialVersionUID
    byte[] _set -> _set
    byte no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    byte getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(byte) -> contains
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(byte) -> index
    int indexRehashed(byte,int,int,byte) -> indexRehashed
    int insertKey(byte) -> insertKey
    int insertKeyRehash(byte,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,byte) -> insertKeyAt
gnu.trove.impl.hash.TByteIntHash -> gnu.trove.impl.hash.TByteIntHash:
    long serialVersionUID -> serialVersionUID
    byte[] _set -> _set
    byte no_entry_key -> no_entry_key
    int no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    byte getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(byte) -> contains
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(byte) -> index
    int indexRehashed(byte,int,int,byte) -> indexRehashed
    int insertKey(byte) -> insertKey
    int insertKeyRehash(byte,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,byte) -> insertKeyAt
    int XinsertKey(byte) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TByteLongHash -> gnu.trove.impl.hash.TByteLongHash:
    long serialVersionUID -> serialVersionUID
    byte[] _set -> _set
    byte no_entry_key -> no_entry_key
    long no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    byte getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(byte) -> contains
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(byte) -> index
    int indexRehashed(byte,int,int,byte) -> indexRehashed
    int insertKey(byte) -> insertKey
    int insertKeyRehash(byte,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,byte) -> insertKeyAt
    int XinsertKey(byte) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TByteShortHash -> gnu.trove.impl.hash.TByteShortHash:
    long serialVersionUID -> serialVersionUID
    byte[] _set -> _set
    byte no_entry_key -> no_entry_key
    short no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    byte getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(byte) -> contains
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(byte) -> index
    int indexRehashed(byte,int,int,byte) -> indexRehashed
    int insertKey(byte) -> insertKey
    int insertKeyRehash(byte,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,byte) -> insertKeyAt
    int XinsertKey(byte) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TCharByteHash -> gnu.trove.impl.hash.TCharByteHash:
    long serialVersionUID -> serialVersionUID
    char[] _set -> _set
    char no_entry_key -> no_entry_key
    byte no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    char getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(char) -> contains
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(char) -> index
    int indexRehashed(char,int,int,byte) -> indexRehashed
    int insertKey(char) -> insertKey
    int insertKeyRehash(char,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,char) -> insertKeyAt
    int XinsertKey(char) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TCharCharHash -> gnu.trove.impl.hash.TCharCharHash:
    long serialVersionUID -> serialVersionUID
    char[] _set -> _set
    char no_entry_key -> no_entry_key
    char no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    char getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(char) -> contains
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(char) -> index
    int indexRehashed(char,int,int,byte) -> indexRehashed
    int insertKey(char) -> insertKey
    int insertKeyRehash(char,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,char) -> insertKeyAt
    int XinsertKey(char) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TCharDoubleHash -> gnu.trove.impl.hash.TCharDoubleHash:
    long serialVersionUID -> serialVersionUID
    char[] _set -> _set
    char no_entry_key -> no_entry_key
    double no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    char getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(char) -> contains
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(char) -> index
    int indexRehashed(char,int,int,byte) -> indexRehashed
    int insertKey(char) -> insertKey
    int insertKeyRehash(char,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,char) -> insertKeyAt
    int XinsertKey(char) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TCharFloatHash -> gnu.trove.impl.hash.TCharFloatHash:
    long serialVersionUID -> serialVersionUID
    char[] _set -> _set
    char no_entry_key -> no_entry_key
    float no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    char getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(char) -> contains
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(char) -> index
    int indexRehashed(char,int,int,byte) -> indexRehashed
    int insertKey(char) -> insertKey
    int insertKeyRehash(char,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,char) -> insertKeyAt
    int XinsertKey(char) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TCharHash -> gnu.trove.impl.hash.TCharHash:
    long serialVersionUID -> serialVersionUID
    char[] _set -> _set
    char no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    char getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(char) -> contains
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(char) -> index
    int indexRehashed(char,int,int,byte) -> indexRehashed
    int insertKey(char) -> insertKey
    int insertKeyRehash(char,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,char) -> insertKeyAt
gnu.trove.impl.hash.TCharIntHash -> gnu.trove.impl.hash.TCharIntHash:
    long serialVersionUID -> serialVersionUID
    char[] _set -> _set
    char no_entry_key -> no_entry_key
    int no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    char getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(char) -> contains
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(char) -> index
    int indexRehashed(char,int,int,byte) -> indexRehashed
    int insertKey(char) -> insertKey
    int insertKeyRehash(char,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,char) -> insertKeyAt
    int XinsertKey(char) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TCharLongHash -> gnu.trove.impl.hash.TCharLongHash:
    long serialVersionUID -> serialVersionUID
    char[] _set -> _set
    char no_entry_key -> no_entry_key
    long no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    char getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(char) -> contains
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(char) -> index
    int indexRehashed(char,int,int,byte) -> indexRehashed
    int insertKey(char) -> insertKey
    int insertKeyRehash(char,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,char) -> insertKeyAt
    int XinsertKey(char) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TCharShortHash -> gnu.trove.impl.hash.TCharShortHash:
    long serialVersionUID -> serialVersionUID
    char[] _set -> _set
    char no_entry_key -> no_entry_key
    short no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    char getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(char) -> contains
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(char) -> index
    int indexRehashed(char,int,int,byte) -> indexRehashed
    int insertKey(char) -> insertKey
    int insertKeyRehash(char,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,char) -> insertKeyAt
    int XinsertKey(char) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TCustomObjectHash -> gnu.trove.impl.hash.TCustomObjectHash:
    long serialVersionUID -> serialVersionUID
    gnu.trove.strategy.HashingStrategy strategy -> strategy
    int hash(java.lang.Object) -> hash
    boolean equals(java.lang.Object,java.lang.Object) -> equals
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TDoubleByteHash -> gnu.trove.impl.hash.TDoubleByteHash:
    long serialVersionUID -> serialVersionUID
    double[] _set -> _set
    double no_entry_key -> no_entry_key
    byte no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    double getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(double) -> contains
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(double) -> index
    int indexRehashed(double,int,int,byte) -> indexRehashed
    int insertKey(double) -> insertKey
    int insertKeyRehash(double,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,double) -> insertKeyAt
    int XinsertKey(double) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TDoubleCharHash -> gnu.trove.impl.hash.TDoubleCharHash:
    long serialVersionUID -> serialVersionUID
    double[] _set -> _set
    double no_entry_key -> no_entry_key
    char no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    double getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(double) -> contains
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(double) -> index
    int indexRehashed(double,int,int,byte) -> indexRehashed
    int insertKey(double) -> insertKey
    int insertKeyRehash(double,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,double) -> insertKeyAt
    int XinsertKey(double) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TDoubleDoubleHash -> gnu.trove.impl.hash.TDoubleDoubleHash:
    long serialVersionUID -> serialVersionUID
    double[] _set -> _set
    double no_entry_key -> no_entry_key
    double no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    double getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(double) -> contains
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(double) -> index
    int indexRehashed(double,int,int,byte) -> indexRehashed
    int insertKey(double) -> insertKey
    int insertKeyRehash(double,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,double) -> insertKeyAt
    int XinsertKey(double) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TDoubleFloatHash -> gnu.trove.impl.hash.TDoubleFloatHash:
    long serialVersionUID -> serialVersionUID
    double[] _set -> _set
    double no_entry_key -> no_entry_key
    float no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    double getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(double) -> contains
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(double) -> index
    int indexRehashed(double,int,int,byte) -> indexRehashed
    int insertKey(double) -> insertKey
    int insertKeyRehash(double,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,double) -> insertKeyAt
    int XinsertKey(double) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TDoubleHash -> gnu.trove.impl.hash.TDoubleHash:
    long serialVersionUID -> serialVersionUID
    double[] _set -> _set
    double no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    double getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(double) -> contains
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(double) -> index
    int indexRehashed(double,int,int,byte) -> indexRehashed
    int insertKey(double) -> insertKey
    int insertKeyRehash(double,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,double) -> insertKeyAt
gnu.trove.impl.hash.TDoubleIntHash -> gnu.trove.impl.hash.TDoubleIntHash:
    long serialVersionUID -> serialVersionUID
    double[] _set -> _set
    double no_entry_key -> no_entry_key
    int no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    double getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(double) -> contains
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(double) -> index
    int indexRehashed(double,int,int,byte) -> indexRehashed
    int insertKey(double) -> insertKey
    int insertKeyRehash(double,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,double) -> insertKeyAt
    int XinsertKey(double) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TDoubleLongHash -> gnu.trove.impl.hash.TDoubleLongHash:
    long serialVersionUID -> serialVersionUID
    double[] _set -> _set
    double no_entry_key -> no_entry_key
    long no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    double getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(double) -> contains
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(double) -> index
    int indexRehashed(double,int,int,byte) -> indexRehashed
    int insertKey(double) -> insertKey
    int insertKeyRehash(double,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,double) -> insertKeyAt
    int XinsertKey(double) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TDoubleShortHash -> gnu.trove.impl.hash.TDoubleShortHash:
    long serialVersionUID -> serialVersionUID
    double[] _set -> _set
    double no_entry_key -> no_entry_key
    short no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    double getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(double) -> contains
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(double) -> index
    int indexRehashed(double,int,int,byte) -> indexRehashed
    int insertKey(double) -> insertKey
    int insertKeyRehash(double,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,double) -> insertKeyAt
    int XinsertKey(double) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TFloatByteHash -> gnu.trove.impl.hash.TFloatByteHash:
    long serialVersionUID -> serialVersionUID
    float[] _set -> _set
    float no_entry_key -> no_entry_key
    byte no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    float getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(float) -> contains
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(float) -> index
    int indexRehashed(float,int,int,byte) -> indexRehashed
    int insertKey(float) -> insertKey
    int insertKeyRehash(float,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,float) -> insertKeyAt
    int XinsertKey(float) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TFloatCharHash -> gnu.trove.impl.hash.TFloatCharHash:
    long serialVersionUID -> serialVersionUID
    float[] _set -> _set
    float no_entry_key -> no_entry_key
    char no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    float getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(float) -> contains
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(float) -> index
    int indexRehashed(float,int,int,byte) -> indexRehashed
    int insertKey(float) -> insertKey
    int insertKeyRehash(float,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,float) -> insertKeyAt
    int XinsertKey(float) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TFloatDoubleHash -> gnu.trove.impl.hash.TFloatDoubleHash:
    long serialVersionUID -> serialVersionUID
    float[] _set -> _set
    float no_entry_key -> no_entry_key
    double no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    float getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(float) -> contains
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(float) -> index
    int indexRehashed(float,int,int,byte) -> indexRehashed
    int insertKey(float) -> insertKey
    int insertKeyRehash(float,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,float) -> insertKeyAt
    int XinsertKey(float) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TFloatFloatHash -> gnu.trove.impl.hash.TFloatFloatHash:
    long serialVersionUID -> serialVersionUID
    float[] _set -> _set
    float no_entry_key -> no_entry_key
    float no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    float getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(float) -> contains
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(float) -> index
    int indexRehashed(float,int,int,byte) -> indexRehashed
    int insertKey(float) -> insertKey
    int insertKeyRehash(float,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,float) -> insertKeyAt
    int XinsertKey(float) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TFloatHash -> gnu.trove.impl.hash.TFloatHash:
    long serialVersionUID -> serialVersionUID
    float[] _set -> _set
    float no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    float getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(float) -> contains
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(float) -> index
    int indexRehashed(float,int,int,byte) -> indexRehashed
    int insertKey(float) -> insertKey
    int insertKeyRehash(float,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,float) -> insertKeyAt
gnu.trove.impl.hash.TFloatIntHash -> gnu.trove.impl.hash.TFloatIntHash:
    long serialVersionUID -> serialVersionUID
    float[] _set -> _set
    float no_entry_key -> no_entry_key
    int no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    float getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(float) -> contains
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(float) -> index
    int indexRehashed(float,int,int,byte) -> indexRehashed
    int insertKey(float) -> insertKey
    int insertKeyRehash(float,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,float) -> insertKeyAt
    int XinsertKey(float) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TFloatLongHash -> gnu.trove.impl.hash.TFloatLongHash:
    long serialVersionUID -> serialVersionUID
    float[] _set -> _set
    float no_entry_key -> no_entry_key
    long no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    float getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(float) -> contains
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(float) -> index
    int indexRehashed(float,int,int,byte) -> indexRehashed
    int insertKey(float) -> insertKey
    int insertKeyRehash(float,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,float) -> insertKeyAt
    int XinsertKey(float) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TFloatShortHash -> gnu.trove.impl.hash.TFloatShortHash:
    long serialVersionUID -> serialVersionUID
    float[] _set -> _set
    float no_entry_key -> no_entry_key
    short no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    float getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(float) -> contains
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(float) -> index
    int indexRehashed(float,int,int,byte) -> indexRehashed
    int insertKey(float) -> insertKey
    int insertKeyRehash(float,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,float) -> insertKeyAt
    int XinsertKey(float) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.THash -> gnu.trove.impl.hash.THash:
    long serialVersionUID -> serialVersionUID
    float DEFAULT_LOAD_FACTOR -> DEFAULT_LOAD_FACTOR
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    int _size -> _size
    int _free -> _free
    float _loadFactor -> _loadFactor
    int _maxSize -> _maxSize
    int _autoCompactRemovesRemaining -> _autoCompactRemovesRemaining
    float _autoCompactionFactor -> _autoCompactionFactor
    boolean _autoCompactTemporaryDisable -> _autoCompactTemporaryDisable
    boolean isEmpty() -> isEmpty
    int size() -> size
    int capacity() -> capacity
    void ensureCapacity(int) -> ensureCapacity
    void compact() -> compact
    void setAutoCompactionFactor(float) -> setAutoCompactionFactor
    float getAutoCompactionFactor() -> getAutoCompactionFactor
    void trimToSize() -> trimToSize
    void removeAt(int) -> removeAt
    void clear() -> clear
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    void tempDisableAutoCompaction() -> tempDisableAutoCompaction
    void reenableAutoCompaction(boolean) -> reenableAutoCompaction
    void computeMaxSize(int) -> computeMaxSize
    void computeNextAutoCompactionAmount(int) -> computeNextAutoCompactionAmount
    void postInsertHook(boolean) -> postInsertHook
    int calculateGrownCapacity() -> calculateGrownCapacity
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.THashIterator -> gnu.trove.impl.hash.a:
    gnu.trove.impl.hash.TObjectHash _object_hash -> d
    gnu.trove.impl.hash.THash _hash -> a
    int _expectedSize -> b
    int _index -> c
    java.lang.Object next() -> next
    boolean hasNext() -> hasNext
    void remove() -> remove
    void moveToNextIndex() -> w_
    int nextIndex() -> b
    java.lang.Object objectAtIndex(int) -> a
gnu.trove.impl.hash.THashPrimitiveIterator -> gnu.trove.impl.hash.b:
    gnu.trove.impl.hash.TPrimitiveHash _hash -> a
    int _expectedSize -> b
    int _index -> c
    int nextIndex() -> E_
    boolean hasNext() -> hasNext
    void remove() -> remove
    void moveToNextIndex() -> b
gnu.trove.impl.hash.TIntByteHash -> gnu.trove.impl.hash.TIntByteHash:
    long serialVersionUID -> serialVersionUID
    int[] _set -> _set
    int no_entry_key -> no_entry_key
    byte no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    int getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(int) -> contains
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(int) -> index
    int indexRehashed(int,int,int,byte) -> indexRehashed
    int insertKey(int) -> insertKey
    int insertKeyRehash(int,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,int) -> insertKeyAt
    int XinsertKey(int) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TIntCharHash -> gnu.trove.impl.hash.TIntCharHash:
    long serialVersionUID -> serialVersionUID
    int[] _set -> _set
    int no_entry_key -> no_entry_key
    char no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    int getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(int) -> contains
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(int) -> index
    int indexRehashed(int,int,int,byte) -> indexRehashed
    int insertKey(int) -> insertKey
    int insertKeyRehash(int,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,int) -> insertKeyAt
    int XinsertKey(int) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TIntDoubleHash -> gnu.trove.impl.hash.TIntDoubleHash:
    long serialVersionUID -> serialVersionUID
    int[] _set -> _set
    int no_entry_key -> no_entry_key
    double no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    int getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(int) -> contains
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(int) -> index
    int indexRehashed(int,int,int,byte) -> indexRehashed
    int insertKey(int) -> insertKey
    int insertKeyRehash(int,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,int) -> insertKeyAt
    int XinsertKey(int) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TIntFloatHash -> gnu.trove.impl.hash.TIntFloatHash:
    long serialVersionUID -> serialVersionUID
    int[] _set -> _set
    int no_entry_key -> no_entry_key
    float no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    int getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(int) -> contains
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(int) -> index
    int indexRehashed(int,int,int,byte) -> indexRehashed
    int insertKey(int) -> insertKey
    int insertKeyRehash(int,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,int) -> insertKeyAt
    int XinsertKey(int) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TIntHash -> gnu.trove.impl.hash.TIntHash:
    long serialVersionUID -> serialVersionUID
    int[] _set -> _set
    int no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    int getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(int) -> contains
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(int) -> index
    int indexRehashed(int,int,int,byte) -> indexRehashed
    int insertKey(int) -> insertKey
    int insertKeyRehash(int,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,int) -> insertKeyAt
gnu.trove.impl.hash.TIntIntHash -> gnu.trove.impl.hash.TIntIntHash:
    long serialVersionUID -> serialVersionUID
    int[] _set -> _set
    int no_entry_key -> no_entry_key
    int no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    int getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(int) -> contains
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(int) -> index
    int indexRehashed(int,int,int,byte) -> indexRehashed
    int insertKey(int) -> insertKey
    int insertKeyRehash(int,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,int) -> insertKeyAt
    int XinsertKey(int) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TIntLongHash -> gnu.trove.impl.hash.TIntLongHash:
    long serialVersionUID -> serialVersionUID
    int[] _set -> _set
    int no_entry_key -> no_entry_key
    long no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    int getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(int) -> contains
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(int) -> index
    int indexRehashed(int,int,int,byte) -> indexRehashed
    int insertKey(int) -> insertKey
    int insertKeyRehash(int,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,int) -> insertKeyAt
    int XinsertKey(int) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TIntShortHash -> gnu.trove.impl.hash.TIntShortHash:
    long serialVersionUID -> serialVersionUID
    int[] _set -> _set
    int no_entry_key -> no_entry_key
    short no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    int getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(int) -> contains
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(int) -> index
    int indexRehashed(int,int,int,byte) -> indexRehashed
    int insertKey(int) -> insertKey
    int insertKeyRehash(int,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,int) -> insertKeyAt
    int XinsertKey(int) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TLongByteHash -> gnu.trove.impl.hash.TLongByteHash:
    long serialVersionUID -> serialVersionUID
    long[] _set -> _set
    long no_entry_key -> no_entry_key
    byte no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    long getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(long) -> contains
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(long) -> index
    int indexRehashed(long,int,int,byte) -> indexRehashed
    int insertKey(long) -> insertKey
    int insertKeyRehash(long,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,long) -> insertKeyAt
    int XinsertKey(long) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TLongCharHash -> gnu.trove.impl.hash.TLongCharHash:
    long serialVersionUID -> serialVersionUID
    long[] _set -> _set
    long no_entry_key -> no_entry_key
    char no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    long getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(long) -> contains
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(long) -> index
    int indexRehashed(long,int,int,byte) -> indexRehashed
    int insertKey(long) -> insertKey
    int insertKeyRehash(long,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,long) -> insertKeyAt
    int XinsertKey(long) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TLongDoubleHash -> gnu.trove.impl.hash.TLongDoubleHash:
    long serialVersionUID -> serialVersionUID
    long[] _set -> _set
    long no_entry_key -> no_entry_key
    double no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    long getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(long) -> contains
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(long) -> index
    int indexRehashed(long,int,int,byte) -> indexRehashed
    int insertKey(long) -> insertKey
    int insertKeyRehash(long,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,long) -> insertKeyAt
    int XinsertKey(long) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TLongFloatHash -> gnu.trove.impl.hash.TLongFloatHash:
    long serialVersionUID -> serialVersionUID
    long[] _set -> _set
    long no_entry_key -> no_entry_key
    float no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    long getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(long) -> contains
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(long) -> index
    int indexRehashed(long,int,int,byte) -> indexRehashed
    int insertKey(long) -> insertKey
    int insertKeyRehash(long,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,long) -> insertKeyAt
    int XinsertKey(long) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TLongHash -> gnu.trove.impl.hash.TLongHash:
    long serialVersionUID -> serialVersionUID
    long[] _set -> _set
    long no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    long getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(long) -> contains
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(long) -> index
    int indexRehashed(long,int,int,byte) -> indexRehashed
    int insertKey(long) -> insertKey
    int insertKeyRehash(long,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,long) -> insertKeyAt
gnu.trove.impl.hash.TLongIntHash -> gnu.trove.impl.hash.TLongIntHash:
    long serialVersionUID -> serialVersionUID
    long[] _set -> _set
    long no_entry_key -> no_entry_key
    int no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    long getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(long) -> contains
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(long) -> index
    int indexRehashed(long,int,int,byte) -> indexRehashed
    int insertKey(long) -> insertKey
    int insertKeyRehash(long,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,long) -> insertKeyAt
    int XinsertKey(long) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TLongLongHash -> gnu.trove.impl.hash.TLongLongHash:
    long serialVersionUID -> serialVersionUID
    long[] _set -> _set
    long no_entry_key -> no_entry_key
    long no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    long getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(long) -> contains
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(long) -> index
    int indexRehashed(long,int,int,byte) -> indexRehashed
    int insertKey(long) -> insertKey
    int insertKeyRehash(long,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,long) -> insertKeyAt
    int XinsertKey(long) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TLongShortHash -> gnu.trove.impl.hash.TLongShortHash:
    long serialVersionUID -> serialVersionUID
    long[] _set -> _set
    long no_entry_key -> no_entry_key
    short no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    long getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(long) -> contains
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(long) -> index
    int indexRehashed(long,int,int,byte) -> indexRehashed
    int insertKey(long) -> insertKey
    int insertKeyRehash(long,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,long) -> insertKeyAt
    int XinsertKey(long) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TObjectHash -> gnu.trove.impl.hash.TObjectHash:
    long serialVersionUID -> serialVersionUID
    java.lang.Object[] _set -> _set
    java.lang.Object REMOVED -> REMOVED
    java.lang.Object FREE -> FREE
    boolean consumeFreeSlot -> consumeFreeSlot
    int capacity() -> capacity
    void removeAt(int) -> removeAt
    int setUp(int) -> setUp
    boolean forEach(gnu.trove.procedure.TObjectProcedure) -> forEach
    boolean contains(java.lang.Object) -> contains
    int index(java.lang.Object) -> index
    int indexRehashed(java.lang.Object,int,int,java.lang.Object) -> a
    int indexForNull() -> a
    int insertionIndex(java.lang.Object) -> insertionIndex
    int insertKey(java.lang.Object) -> insertKey
    int insertKeyRehash(java.lang.Object,int,int,java.lang.Object) -> b
    int insertKeyForNull() -> b
    void throwObjectContractViolation(java.lang.Object,java.lang.Object) -> throwObjectContractViolation
    void throwObjectContractViolation(java.lang.Object,java.lang.Object,int,int,java.lang.Object[]) -> throwObjectContractViolation
    java.lang.IllegalArgumentException buildObjectContractViolation(java.lang.Object,java.lang.Object,java.lang.String) -> buildObjectContractViolation
    boolean equals(java.lang.Object,java.lang.Object) -> equals
    int hash(java.lang.Object) -> hash
    java.lang.String reportPotentialConcurrentMod(int,int) -> reportPotentialConcurrentMod
    java.lang.String dumpExtraInfo(java.lang.Object,java.lang.Object,int,int,java.lang.Object[]) -> dumpExtraInfo
    java.lang.String detectKeyLoss(java.lang.Object[],int) -> a
    java.util.Set makeKeySet(java.lang.Object[]) -> a
    java.lang.String equalsSymmetryInfo(java.lang.Object,java.lang.Object) -> a
    java.lang.String objectInfo(java.lang.Object) -> objectInfo
    java.lang.String dumpKeyTypes(java.lang.Object,java.lang.Object) -> b
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TPrimitiveHash -> gnu.trove.impl.hash.TPrimitiveHash:
    long serialVersionUID -> serialVersionUID
    byte[] _states -> _states
    byte FREE -> FREE
    byte FULL -> FULL
    byte REMOVED -> REMOVED
    int capacity() -> capacity
    void removeAt(int) -> removeAt
    int setUp(int) -> setUp
gnu.trove.impl.hash.TShortByteHash -> gnu.trove.impl.hash.TShortByteHash:
    long serialVersionUID -> serialVersionUID
    short[] _set -> _set
    short no_entry_key -> no_entry_key
    byte no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    short getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(short) -> contains
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(short) -> index
    int indexRehashed(short,int,int,byte) -> indexRehashed
    int insertKey(short) -> insertKey
    int insertKeyRehash(short,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,short) -> insertKeyAt
    int XinsertKey(short) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TShortCharHash -> gnu.trove.impl.hash.TShortCharHash:
    long serialVersionUID -> serialVersionUID
    short[] _set -> _set
    short no_entry_key -> no_entry_key
    char no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    short getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(short) -> contains
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(short) -> index
    int indexRehashed(short,int,int,byte) -> indexRehashed
    int insertKey(short) -> insertKey
    int insertKeyRehash(short,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,short) -> insertKeyAt
    int XinsertKey(short) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TShortDoubleHash -> gnu.trove.impl.hash.TShortDoubleHash:
    long serialVersionUID -> serialVersionUID
    short[] _set -> _set
    short no_entry_key -> no_entry_key
    double no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    short getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(short) -> contains
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(short) -> index
    int indexRehashed(short,int,int,byte) -> indexRehashed
    int insertKey(short) -> insertKey
    int insertKeyRehash(short,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,short) -> insertKeyAt
    int XinsertKey(short) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TShortFloatHash -> gnu.trove.impl.hash.TShortFloatHash:
    long serialVersionUID -> serialVersionUID
    short[] _set -> _set
    short no_entry_key -> no_entry_key
    float no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    short getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(short) -> contains
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(short) -> index
    int indexRehashed(short,int,int,byte) -> indexRehashed
    int insertKey(short) -> insertKey
    int insertKeyRehash(short,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,short) -> insertKeyAt
    int XinsertKey(short) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TShortHash -> gnu.trove.impl.hash.TShortHash:
    long serialVersionUID -> serialVersionUID
    short[] _set -> _set
    short no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    short getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(short) -> contains
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(short) -> index
    int indexRehashed(short,int,int,byte) -> indexRehashed
    int insertKey(short) -> insertKey
    int insertKeyRehash(short,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,short) -> insertKeyAt
gnu.trove.impl.hash.TShortIntHash -> gnu.trove.impl.hash.TShortIntHash:
    long serialVersionUID -> serialVersionUID
    short[] _set -> _set
    short no_entry_key -> no_entry_key
    int no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    short getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(short) -> contains
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(short) -> index
    int indexRehashed(short,int,int,byte) -> indexRehashed
    int insertKey(short) -> insertKey
    int insertKeyRehash(short,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,short) -> insertKeyAt
    int XinsertKey(short) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TShortLongHash -> gnu.trove.impl.hash.TShortLongHash:
    long serialVersionUID -> serialVersionUID
    short[] _set -> _set
    short no_entry_key -> no_entry_key
    long no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    short getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(short) -> contains
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(short) -> index
    int indexRehashed(short,int,int,byte) -> indexRehashed
    int insertKey(short) -> insertKey
    int insertKeyRehash(short,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,short) -> insertKeyAt
    int XinsertKey(short) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.hash.TShortShortHash -> gnu.trove.impl.hash.TShortShortHash:
    long serialVersionUID -> serialVersionUID
    short[] _set -> _set
    short no_entry_key -> no_entry_key
    short no_entry_value -> no_entry_value
    boolean consumeFreeSlot -> consumeFreeSlot
    short getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    int setUp(int) -> setUp
    boolean contains(short) -> contains
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    void removeAt(int) -> removeAt
    int index(short) -> index
    int indexRehashed(short,int,int,byte) -> indexRehashed
    int insertKey(short) -> insertKey
    int insertKeyRehash(short,int,int,byte) -> insertKeyRehash
    void insertKeyAt(int,short) -> insertKeyAt
    int XinsertKey(short) -> XinsertKey
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.impl.sync.SynchronizedCollection -> gnu.trove.impl.sync.SynchronizedCollection:
    long serialVersionUID -> serialVersionUID
    java.util.Collection c -> c
    java.lang.Object mutex -> mutex
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(java.lang.Object) -> contains
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.util.Iterator iterator() -> iterator
    boolean add(java.lang.Object) -> add
    boolean remove(java.lang.Object) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    void clear() -> clear
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.SynchronizedSet -> gnu.trove.impl.sync.SynchronizedSet:
    long serialVersionUID -> serialVersionUID
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
gnu.trove.impl.sync.TSynchronizedByteByteMap -> gnu.trove.impl.sync.TSynchronizedByteByteMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteByteMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TByteSet keySet -> a
    gnu.trove.TByteCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(byte) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(byte) -> get
    byte put(byte,byte) -> put
    byte remove(byte) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteByteMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    gnu.trove.iterator.TByteByteIterator iterator() -> iterator
    byte getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    byte putIfAbsent(byte,byte) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteByteProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,byte) -> adjustValue
    byte adjustOrPutValue(byte,byte,byte) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedByteCharMap -> gnu.trove.impl.sync.TSynchronizedByteCharMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteCharMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TByteSet keySet -> a
    gnu.trove.TCharCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(byte) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(byte) -> get
    char put(byte,char) -> put
    char remove(byte) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteCharMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    gnu.trove.iterator.TByteCharIterator iterator() -> iterator
    byte getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    char putIfAbsent(byte,char) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteCharProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,char) -> adjustValue
    char adjustOrPutValue(byte,char,char) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedByteCollection -> gnu.trove.impl.sync.TSynchronizedByteCollection:
    long serialVersionUID -> serialVersionUID
    gnu.trove.TByteCollection c -> c
    java.lang.Object mutex -> mutex
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    byte getNoEntryValue() -> getNoEntryValue
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    void clear() -> clear
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedByteDoubleMap -> gnu.trove.impl.sync.TSynchronizedByteDoubleMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteDoubleMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TByteSet keySet -> a
    gnu.trove.TDoubleCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(byte) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(byte) -> get
    double put(byte,double) -> put
    double remove(byte) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteDoubleMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    gnu.trove.iterator.TByteDoubleIterator iterator() -> iterator
    byte getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    double putIfAbsent(byte,double) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteDoubleProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,double) -> adjustValue
    double adjustOrPutValue(byte,double,double) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedByteFloatMap -> gnu.trove.impl.sync.TSynchronizedByteFloatMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteFloatMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TByteSet keySet -> a
    gnu.trove.TFloatCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(byte) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(byte) -> get
    float put(byte,float) -> put
    float remove(byte) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteFloatMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    gnu.trove.iterator.TByteFloatIterator iterator() -> iterator
    byte getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    float putIfAbsent(byte,float) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteFloatProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,float) -> adjustValue
    float adjustOrPutValue(byte,float,float) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedByteIntMap -> gnu.trove.impl.sync.TSynchronizedByteIntMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteIntMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TByteSet keySet -> a
    gnu.trove.TIntCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(byte) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(byte) -> get
    int put(byte,int) -> put
    int remove(byte) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteIntMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    gnu.trove.iterator.TByteIntIterator iterator() -> iterator
    byte getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int putIfAbsent(byte,int) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteIntProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,int) -> adjustValue
    int adjustOrPutValue(byte,int,int) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedByteList -> gnu.trove.impl.sync.TSynchronizedByteList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TByteList list -> list
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    byte get(int) -> get
    byte set(int,byte) -> set
    void set(int,byte[]) -> set
    void set(int,byte[],int,int) -> set
    byte replace(int,byte) -> replace
    void remove(int,int) -> remove
    byte removeAt(int) -> removeAt
    void add(byte[]) -> add
    void add(byte[],int,int) -> add
    void insert(int,byte) -> insert
    void insert(int,byte[]) -> insert
    void insert(int,byte[],int,int) -> insert
    int indexOf(byte) -> indexOf
    int lastIndexOf(byte) -> lastIndexOf
    gnu.trove.list.TByteList subList(int,int) -> subList
    byte[] toArray(int,int) -> toArray
    byte[] toArray(byte[],int,int) -> toArray
    byte[] toArray(byte[],int,int,int) -> toArray
    int indexOf(int,byte) -> indexOf
    int lastIndexOf(int,byte) -> lastIndexOf
    void fill(byte) -> fill
    void fill(int,int,byte) -> fill
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void sort() -> sort
    void sort(int,int) -> sort
    int binarySearch(byte) -> binarySearch
    int binarySearch(byte,int,int) -> binarySearch
    gnu.trove.list.TByteList grep(gnu.trove.procedure.TByteProcedure) -> grep
    gnu.trove.list.TByteList inverseGrep(gnu.trove.procedure.TByteProcedure) -> inverseGrep
    byte max() -> max
    byte min() -> min
    byte sum() -> sum
    boolean forEachDescending(gnu.trove.procedure.TByteProcedure) -> forEachDescending
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    java.lang.Object readResolve() -> readResolve
gnu.trove.impl.sync.TSynchronizedByteLongMap -> gnu.trove.impl.sync.TSynchronizedByteLongMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteLongMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TByteSet keySet -> a
    gnu.trove.TLongCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(byte) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(byte) -> get
    long put(byte,long) -> put
    long remove(byte) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteLongMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    gnu.trove.iterator.TByteLongIterator iterator() -> iterator
    byte getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    long putIfAbsent(byte,long) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteLongProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,long) -> adjustValue
    long adjustOrPutValue(byte,long,long) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedByteObjectMap -> gnu.trove.impl.sync.TSynchronizedByteObjectMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteObjectMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TByteSet keySet -> a
    java.util.Collection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(byte) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(byte) -> get
    java.lang.Object put(byte,java.lang.Object) -> put
    java.lang.Object remove(byte) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TByteObjectIterator iterator() -> iterator
    byte getNoEntryKey() -> getNoEntryKey
    java.lang.Object putIfAbsent(byte,java.lang.Object) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteObjectProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteObjectProcedure) -> retainEntries
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedByteSet -> gnu.trove.impl.sync.TSynchronizedByteSet:
    long serialVersionUID -> serialVersionUID
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
gnu.trove.impl.sync.TSynchronizedByteShortMap -> gnu.trove.impl.sync.TSynchronizedByteShortMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteShortMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TByteSet keySet -> a
    gnu.trove.TShortCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(byte) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(byte) -> get
    short put(byte,short) -> put
    short remove(byte) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteShortMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    gnu.trove.iterator.TByteShortIterator iterator() -> iterator
    byte getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    short putIfAbsent(byte,short) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteShortProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,short) -> adjustValue
    short adjustOrPutValue(byte,short,short) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedCharByteMap -> gnu.trove.impl.sync.TSynchronizedCharByteMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharByteMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TCharSet keySet -> a
    gnu.trove.TByteCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(char) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(char) -> get
    byte put(char,byte) -> put
    byte remove(char) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharByteMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    gnu.trove.iterator.TCharByteIterator iterator() -> iterator
    char getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    byte putIfAbsent(char,byte) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharByteProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,byte) -> adjustValue
    byte adjustOrPutValue(char,byte,byte) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedCharCharMap -> gnu.trove.impl.sync.TSynchronizedCharCharMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharCharMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TCharSet keySet -> a
    gnu.trove.TCharCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(char) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(char) -> get
    char put(char,char) -> put
    char remove(char) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharCharMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    gnu.trove.iterator.TCharCharIterator iterator() -> iterator
    char getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    char putIfAbsent(char,char) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharCharProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,char) -> adjustValue
    char adjustOrPutValue(char,char,char) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedCharCollection -> gnu.trove.impl.sync.TSynchronizedCharCollection:
    long serialVersionUID -> serialVersionUID
    gnu.trove.TCharCollection c -> c
    java.lang.Object mutex -> mutex
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    char getNoEntryValue() -> getNoEntryValue
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    void clear() -> clear
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedCharDoubleMap -> gnu.trove.impl.sync.TSynchronizedCharDoubleMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharDoubleMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TCharSet keySet -> a
    gnu.trove.TDoubleCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(char) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(char) -> get
    double put(char,double) -> put
    double remove(char) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharDoubleMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    gnu.trove.iterator.TCharDoubleIterator iterator() -> iterator
    char getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    double putIfAbsent(char,double) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharDoubleProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,double) -> adjustValue
    double adjustOrPutValue(char,double,double) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedCharFloatMap -> gnu.trove.impl.sync.TSynchronizedCharFloatMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharFloatMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TCharSet keySet -> a
    gnu.trove.TFloatCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(char) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(char) -> get
    float put(char,float) -> put
    float remove(char) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharFloatMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    gnu.trove.iterator.TCharFloatIterator iterator() -> iterator
    char getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    float putIfAbsent(char,float) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharFloatProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,float) -> adjustValue
    float adjustOrPutValue(char,float,float) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedCharIntMap -> gnu.trove.impl.sync.TSynchronizedCharIntMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharIntMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TCharSet keySet -> a
    gnu.trove.TIntCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(char) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(char) -> get
    int put(char,int) -> put
    int remove(char) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharIntMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    gnu.trove.iterator.TCharIntIterator iterator() -> iterator
    char getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int putIfAbsent(char,int) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharIntProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,int) -> adjustValue
    int adjustOrPutValue(char,int,int) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedCharList -> gnu.trove.impl.sync.TSynchronizedCharList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TCharList list -> list
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    char get(int) -> get
    char set(int,char) -> set
    void set(int,char[]) -> set
    void set(int,char[],int,int) -> set
    char replace(int,char) -> replace
    void remove(int,int) -> remove
    char removeAt(int) -> removeAt
    void add(char[]) -> add
    void add(char[],int,int) -> add
    void insert(int,char) -> insert
    void insert(int,char[]) -> insert
    void insert(int,char[],int,int) -> insert
    int indexOf(char) -> indexOf
    int lastIndexOf(char) -> lastIndexOf
    gnu.trove.list.TCharList subList(int,int) -> subList
    char[] toArray(int,int) -> toArray
    char[] toArray(char[],int,int) -> toArray
    char[] toArray(char[],int,int,int) -> toArray
    int indexOf(int,char) -> indexOf
    int lastIndexOf(int,char) -> lastIndexOf
    void fill(char) -> fill
    void fill(int,int,char) -> fill
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void sort() -> sort
    void sort(int,int) -> sort
    int binarySearch(char) -> binarySearch
    int binarySearch(char,int,int) -> binarySearch
    gnu.trove.list.TCharList grep(gnu.trove.procedure.TCharProcedure) -> grep
    gnu.trove.list.TCharList inverseGrep(gnu.trove.procedure.TCharProcedure) -> inverseGrep
    char max() -> max
    char min() -> min
    char sum() -> sum
    boolean forEachDescending(gnu.trove.procedure.TCharProcedure) -> forEachDescending
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    java.lang.Object readResolve() -> readResolve
gnu.trove.impl.sync.TSynchronizedCharLongMap -> gnu.trove.impl.sync.TSynchronizedCharLongMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharLongMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TCharSet keySet -> a
    gnu.trove.TLongCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(char) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(char) -> get
    long put(char,long) -> put
    long remove(char) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharLongMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    gnu.trove.iterator.TCharLongIterator iterator() -> iterator
    char getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    long putIfAbsent(char,long) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharLongProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,long) -> adjustValue
    long adjustOrPutValue(char,long,long) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedCharObjectMap -> gnu.trove.impl.sync.TSynchronizedCharObjectMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharObjectMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TCharSet keySet -> a
    java.util.Collection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(char) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(char) -> get
    java.lang.Object put(char,java.lang.Object) -> put
    java.lang.Object remove(char) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TCharObjectIterator iterator() -> iterator
    char getNoEntryKey() -> getNoEntryKey
    java.lang.Object putIfAbsent(char,java.lang.Object) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharObjectProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharObjectProcedure) -> retainEntries
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedCharSet -> gnu.trove.impl.sync.TSynchronizedCharSet:
    long serialVersionUID -> serialVersionUID
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
gnu.trove.impl.sync.TSynchronizedCharShortMap -> gnu.trove.impl.sync.TSynchronizedCharShortMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharShortMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TCharSet keySet -> a
    gnu.trove.TShortCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(char) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(char) -> get
    short put(char,short) -> put
    short remove(char) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharShortMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    gnu.trove.iterator.TCharShortIterator iterator() -> iterator
    char getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    short putIfAbsent(char,short) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharShortProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,short) -> adjustValue
    short adjustOrPutValue(char,short,short) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedDoubleByteMap -> gnu.trove.impl.sync.TSynchronizedDoubleByteMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleByteMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TDoubleSet keySet -> a
    gnu.trove.TByteCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(double) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(double) -> get
    byte put(double,byte) -> put
    byte remove(double) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleByteMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    gnu.trove.iterator.TDoubleByteIterator iterator() -> iterator
    double getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    byte putIfAbsent(double,byte) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleByteProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,byte) -> adjustValue
    byte adjustOrPutValue(double,byte,byte) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedDoubleCharMap -> gnu.trove.impl.sync.TSynchronizedDoubleCharMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleCharMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TDoubleSet keySet -> a
    gnu.trove.TCharCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(double) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(double) -> get
    char put(double,char) -> put
    char remove(double) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleCharMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    gnu.trove.iterator.TDoubleCharIterator iterator() -> iterator
    double getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    char putIfAbsent(double,char) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleCharProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,char) -> adjustValue
    char adjustOrPutValue(double,char,char) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedDoubleCollection -> gnu.trove.impl.sync.TSynchronizedDoubleCollection:
    long serialVersionUID -> serialVersionUID
    gnu.trove.TDoubleCollection c -> c
    java.lang.Object mutex -> mutex
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    double getNoEntryValue() -> getNoEntryValue
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    void clear() -> clear
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedDoubleDoubleMap -> gnu.trove.impl.sync.TSynchronizedDoubleDoubleMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleDoubleMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TDoubleSet keySet -> a
    gnu.trove.TDoubleCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(double) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(double) -> get
    double put(double,double) -> put
    double remove(double) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleDoubleMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    gnu.trove.iterator.TDoubleDoubleIterator iterator() -> iterator
    double getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    double putIfAbsent(double,double) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleDoubleProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,double) -> adjustValue
    double adjustOrPutValue(double,double,double) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedDoubleFloatMap -> gnu.trove.impl.sync.TSynchronizedDoubleFloatMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleFloatMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TDoubleSet keySet -> a
    gnu.trove.TFloatCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(double) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(double) -> get
    float put(double,float) -> put
    float remove(double) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleFloatMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    gnu.trove.iterator.TDoubleFloatIterator iterator() -> iterator
    double getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    float putIfAbsent(double,float) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleFloatProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,float) -> adjustValue
    float adjustOrPutValue(double,float,float) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedDoubleIntMap -> gnu.trove.impl.sync.TSynchronizedDoubleIntMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleIntMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TDoubleSet keySet -> a
    gnu.trove.TIntCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(double) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(double) -> get
    int put(double,int) -> put
    int remove(double) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleIntMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    gnu.trove.iterator.TDoubleIntIterator iterator() -> iterator
    double getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int putIfAbsent(double,int) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleIntProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,int) -> adjustValue
    int adjustOrPutValue(double,int,int) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedDoubleList -> gnu.trove.impl.sync.TSynchronizedDoubleList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TDoubleList list -> list
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    double get(int) -> get
    double set(int,double) -> set
    void set(int,double[]) -> set
    void set(int,double[],int,int) -> set
    double replace(int,double) -> replace
    void remove(int,int) -> remove
    double removeAt(int) -> removeAt
    void add(double[]) -> add
    void add(double[],int,int) -> add
    void insert(int,double) -> insert
    void insert(int,double[]) -> insert
    void insert(int,double[],int,int) -> insert
    int indexOf(double) -> indexOf
    int lastIndexOf(double) -> lastIndexOf
    gnu.trove.list.TDoubleList subList(int,int) -> subList
    double[] toArray(int,int) -> toArray
    double[] toArray(double[],int,int) -> toArray
    double[] toArray(double[],int,int,int) -> toArray
    int indexOf(int,double) -> indexOf
    int lastIndexOf(int,double) -> lastIndexOf
    void fill(double) -> fill
    void fill(int,int,double) -> fill
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void sort() -> sort
    void sort(int,int) -> sort
    int binarySearch(double) -> binarySearch
    int binarySearch(double,int,int) -> binarySearch
    gnu.trove.list.TDoubleList grep(gnu.trove.procedure.TDoubleProcedure) -> grep
    gnu.trove.list.TDoubleList inverseGrep(gnu.trove.procedure.TDoubleProcedure) -> inverseGrep
    double max() -> max
    double min() -> min
    double sum() -> sum
    boolean forEachDescending(gnu.trove.procedure.TDoubleProcedure) -> forEachDescending
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    java.lang.Object readResolve() -> readResolve
gnu.trove.impl.sync.TSynchronizedDoubleLongMap -> gnu.trove.impl.sync.TSynchronizedDoubleLongMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleLongMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TDoubleSet keySet -> a
    gnu.trove.TLongCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(double) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(double) -> get
    long put(double,long) -> put
    long remove(double) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleLongMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    gnu.trove.iterator.TDoubleLongIterator iterator() -> iterator
    double getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    long putIfAbsent(double,long) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleLongProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,long) -> adjustValue
    long adjustOrPutValue(double,long,long) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedDoubleObjectMap -> gnu.trove.impl.sync.TSynchronizedDoubleObjectMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleObjectMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TDoubleSet keySet -> a
    java.util.Collection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(double) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(double) -> get
    java.lang.Object put(double,java.lang.Object) -> put
    java.lang.Object remove(double) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TDoubleObjectIterator iterator() -> iterator
    double getNoEntryKey() -> getNoEntryKey
    java.lang.Object putIfAbsent(double,java.lang.Object) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleObjectProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleObjectProcedure) -> retainEntries
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedDoubleSet -> gnu.trove.impl.sync.TSynchronizedDoubleSet:
    long serialVersionUID -> serialVersionUID
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
gnu.trove.impl.sync.TSynchronizedDoubleShortMap -> gnu.trove.impl.sync.TSynchronizedDoubleShortMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleShortMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TDoubleSet keySet -> a
    gnu.trove.TShortCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(double) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(double) -> get
    short put(double,short) -> put
    short remove(double) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleShortMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    gnu.trove.iterator.TDoubleShortIterator iterator() -> iterator
    double getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    short putIfAbsent(double,short) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleShortProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,short) -> adjustValue
    short adjustOrPutValue(double,short,short) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedFloatByteMap -> gnu.trove.impl.sync.TSynchronizedFloatByteMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatByteMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TFloatSet keySet -> a
    gnu.trove.TByteCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(float) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(float) -> get
    byte put(float,byte) -> put
    byte remove(float) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatByteMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    gnu.trove.iterator.TFloatByteIterator iterator() -> iterator
    float getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    byte putIfAbsent(float,byte) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatByteProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,byte) -> adjustValue
    byte adjustOrPutValue(float,byte,byte) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedFloatCharMap -> gnu.trove.impl.sync.TSynchronizedFloatCharMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatCharMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TFloatSet keySet -> a
    gnu.trove.TCharCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(float) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(float) -> get
    char put(float,char) -> put
    char remove(float) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatCharMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    gnu.trove.iterator.TFloatCharIterator iterator() -> iterator
    float getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    char putIfAbsent(float,char) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatCharProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,char) -> adjustValue
    char adjustOrPutValue(float,char,char) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedFloatCollection -> gnu.trove.impl.sync.TSynchronizedFloatCollection:
    long serialVersionUID -> serialVersionUID
    gnu.trove.TFloatCollection c -> c
    java.lang.Object mutex -> mutex
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    float getNoEntryValue() -> getNoEntryValue
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    void clear() -> clear
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedFloatDoubleMap -> gnu.trove.impl.sync.TSynchronizedFloatDoubleMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatDoubleMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TFloatSet keySet -> a
    gnu.trove.TDoubleCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(float) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(float) -> get
    double put(float,double) -> put
    double remove(float) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatDoubleMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    gnu.trove.iterator.TFloatDoubleIterator iterator() -> iterator
    float getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    double putIfAbsent(float,double) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatDoubleProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,double) -> adjustValue
    double adjustOrPutValue(float,double,double) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedFloatFloatMap -> gnu.trove.impl.sync.TSynchronizedFloatFloatMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatFloatMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TFloatSet keySet -> a
    gnu.trove.TFloatCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(float) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(float) -> get
    float put(float,float) -> put
    float remove(float) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatFloatMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    gnu.trove.iterator.TFloatFloatIterator iterator() -> iterator
    float getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    float putIfAbsent(float,float) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatFloatProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,float) -> adjustValue
    float adjustOrPutValue(float,float,float) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedFloatIntMap -> gnu.trove.impl.sync.TSynchronizedFloatIntMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatIntMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TFloatSet keySet -> a
    gnu.trove.TIntCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(float) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(float) -> get
    int put(float,int) -> put
    int remove(float) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatIntMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    gnu.trove.iterator.TFloatIntIterator iterator() -> iterator
    float getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int putIfAbsent(float,int) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatIntProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,int) -> adjustValue
    int adjustOrPutValue(float,int,int) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedFloatList -> gnu.trove.impl.sync.TSynchronizedFloatList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TFloatList list -> list
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    float get(int) -> get
    float set(int,float) -> set
    void set(int,float[]) -> set
    void set(int,float[],int,int) -> set
    float replace(int,float) -> replace
    void remove(int,int) -> remove
    float removeAt(int) -> removeAt
    void add(float[]) -> add
    void add(float[],int,int) -> add
    void insert(int,float) -> insert
    void insert(int,float[]) -> insert
    void insert(int,float[],int,int) -> insert
    int indexOf(float) -> indexOf
    int lastIndexOf(float) -> lastIndexOf
    gnu.trove.list.TFloatList subList(int,int) -> subList
    float[] toArray(int,int) -> toArray
    float[] toArray(float[],int,int) -> toArray
    float[] toArray(float[],int,int,int) -> toArray
    int indexOf(int,float) -> indexOf
    int lastIndexOf(int,float) -> lastIndexOf
    void fill(float) -> fill
    void fill(int,int,float) -> fill
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void sort() -> sort
    void sort(int,int) -> sort
    int binarySearch(float) -> binarySearch
    int binarySearch(float,int,int) -> binarySearch
    gnu.trove.list.TFloatList grep(gnu.trove.procedure.TFloatProcedure) -> grep
    gnu.trove.list.TFloatList inverseGrep(gnu.trove.procedure.TFloatProcedure) -> inverseGrep
    float max() -> max
    float min() -> min
    float sum() -> sum
    boolean forEachDescending(gnu.trove.procedure.TFloatProcedure) -> forEachDescending
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    java.lang.Object readResolve() -> readResolve
gnu.trove.impl.sync.TSynchronizedFloatLongMap -> gnu.trove.impl.sync.TSynchronizedFloatLongMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatLongMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TFloatSet keySet -> a
    gnu.trove.TLongCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(float) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(float) -> get
    long put(float,long) -> put
    long remove(float) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatLongMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    gnu.trove.iterator.TFloatLongIterator iterator() -> iterator
    float getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    long putIfAbsent(float,long) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatLongProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,long) -> adjustValue
    long adjustOrPutValue(float,long,long) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedFloatObjectMap -> gnu.trove.impl.sync.TSynchronizedFloatObjectMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatObjectMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TFloatSet keySet -> a
    java.util.Collection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(float) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(float) -> get
    java.lang.Object put(float,java.lang.Object) -> put
    java.lang.Object remove(float) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TFloatObjectIterator iterator() -> iterator
    float getNoEntryKey() -> getNoEntryKey
    java.lang.Object putIfAbsent(float,java.lang.Object) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatObjectProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatObjectProcedure) -> retainEntries
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedFloatSet -> gnu.trove.impl.sync.TSynchronizedFloatSet:
    long serialVersionUID -> serialVersionUID
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
gnu.trove.impl.sync.TSynchronizedFloatShortMap -> gnu.trove.impl.sync.TSynchronizedFloatShortMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatShortMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TFloatSet keySet -> a
    gnu.trove.TShortCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(float) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(float) -> get
    short put(float,short) -> put
    short remove(float) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatShortMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    gnu.trove.iterator.TFloatShortIterator iterator() -> iterator
    float getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    short putIfAbsent(float,short) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatShortProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,short) -> adjustValue
    short adjustOrPutValue(float,short,short) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedIntByteMap -> gnu.trove.impl.sync.TSynchronizedIntByteMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntByteMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TIntSet keySet -> a
    gnu.trove.TByteCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(int) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(int) -> get
    byte put(int,byte) -> put
    byte remove(int) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntByteMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    gnu.trove.iterator.TIntByteIterator iterator() -> iterator
    int getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    byte putIfAbsent(int,byte) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntByteProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,byte) -> adjustValue
    byte adjustOrPutValue(int,byte,byte) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedIntCharMap -> gnu.trove.impl.sync.TSynchronizedIntCharMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntCharMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TIntSet keySet -> a
    gnu.trove.TCharCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(int) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(int) -> get
    char put(int,char) -> put
    char remove(int) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntCharMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    gnu.trove.iterator.TIntCharIterator iterator() -> iterator
    int getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    char putIfAbsent(int,char) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntCharProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,char) -> adjustValue
    char adjustOrPutValue(int,char,char) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedIntCollection -> gnu.trove.impl.sync.TSynchronizedIntCollection:
    long serialVersionUID -> serialVersionUID
    gnu.trove.TIntCollection c -> c
    java.lang.Object mutex -> mutex
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    int getNoEntryValue() -> getNoEntryValue
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    void clear() -> clear
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedIntDoubleMap -> gnu.trove.impl.sync.TSynchronizedIntDoubleMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntDoubleMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TIntSet keySet -> a
    gnu.trove.TDoubleCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(int) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(int) -> get
    double put(int,double) -> put
    double remove(int) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntDoubleMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    gnu.trove.iterator.TIntDoubleIterator iterator() -> iterator
    int getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    double putIfAbsent(int,double) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntDoubleProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,double) -> adjustValue
    double adjustOrPutValue(int,double,double) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedIntFloatMap -> gnu.trove.impl.sync.TSynchronizedIntFloatMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntFloatMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TIntSet keySet -> a
    gnu.trove.TFloatCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(int) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(int) -> get
    float put(int,float) -> put
    float remove(int) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntFloatMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    gnu.trove.iterator.TIntFloatIterator iterator() -> iterator
    int getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    float putIfAbsent(int,float) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntFloatProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,float) -> adjustValue
    float adjustOrPutValue(int,float,float) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedIntIntMap -> gnu.trove.impl.sync.TSynchronizedIntIntMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntIntMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TIntSet keySet -> a
    gnu.trove.TIntCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(int) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(int) -> get
    int put(int,int) -> put
    int remove(int) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntIntMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    gnu.trove.iterator.TIntIntIterator iterator() -> iterator
    int getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int putIfAbsent(int,int) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntIntProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,int) -> adjustValue
    int adjustOrPutValue(int,int,int) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedIntList -> gnu.trove.impl.sync.TSynchronizedIntList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TIntList list -> list
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int get(int) -> get
    int set(int,int) -> set
    void set(int,int[]) -> set
    void set(int,int[],int,int) -> set
    int replace(int,int) -> replace
    void remove(int,int) -> remove
    int removeAt(int) -> removeAt
    void add(int[]) -> add
    void add(int[],int,int) -> add
    void insert(int,int) -> insert
    void insert(int,int[]) -> insert
    void insert(int,int[],int,int) -> insert
    int indexOf(int) -> indexOf
    int lastIndexOf(int) -> lastIndexOf
    gnu.trove.list.TIntList subList(int,int) -> subList
    int[] toArray(int,int) -> toArray
    int[] toArray(int[],int,int) -> toArray
    int[] toArray(int[],int,int,int) -> toArray
    int indexOf(int,int) -> indexOf
    int lastIndexOf(int,int) -> lastIndexOf
    void fill(int) -> fill
    void fill(int,int,int) -> fill
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void sort() -> sort
    void sort(int,int) -> sort
    int binarySearch(int) -> binarySearch
    int binarySearch(int,int,int) -> binarySearch
    gnu.trove.list.TIntList grep(gnu.trove.procedure.TIntProcedure) -> grep
    gnu.trove.list.TIntList inverseGrep(gnu.trove.procedure.TIntProcedure) -> inverseGrep
    int max() -> max
    int min() -> min
    int sum() -> sum
    boolean forEachDescending(gnu.trove.procedure.TIntProcedure) -> forEachDescending
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    java.lang.Object readResolve() -> readResolve
gnu.trove.impl.sync.TSynchronizedIntLongMap -> gnu.trove.impl.sync.TSynchronizedIntLongMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntLongMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TIntSet keySet -> a
    gnu.trove.TLongCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(int) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(int) -> get
    long put(int,long) -> put
    long remove(int) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntLongMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    gnu.trove.iterator.TIntLongIterator iterator() -> iterator
    int getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    long putIfAbsent(int,long) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntLongProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,long) -> adjustValue
    long adjustOrPutValue(int,long,long) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedIntObjectMap -> gnu.trove.impl.sync.TSynchronizedIntObjectMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntObjectMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TIntSet keySet -> a
    java.util.Collection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(int) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(int) -> get
    java.lang.Object put(int,java.lang.Object) -> put
    java.lang.Object remove(int) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TIntObjectIterator iterator() -> iterator
    int getNoEntryKey() -> getNoEntryKey
    java.lang.Object putIfAbsent(int,java.lang.Object) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntObjectProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntObjectProcedure) -> retainEntries
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedIntSet -> gnu.trove.impl.sync.TSynchronizedIntSet:
    long serialVersionUID -> serialVersionUID
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
gnu.trove.impl.sync.TSynchronizedIntShortMap -> gnu.trove.impl.sync.TSynchronizedIntShortMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntShortMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TIntSet keySet -> a
    gnu.trove.TShortCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(int) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(int) -> get
    short put(int,short) -> put
    short remove(int) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntShortMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    gnu.trove.iterator.TIntShortIterator iterator() -> iterator
    int getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    short putIfAbsent(int,short) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntShortProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,short) -> adjustValue
    short adjustOrPutValue(int,short,short) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedLongByteMap -> gnu.trove.impl.sync.TSynchronizedLongByteMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongByteMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TLongSet keySet -> a
    gnu.trove.TByteCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(long) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(long) -> get
    byte put(long,byte) -> put
    byte remove(long) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongByteMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    gnu.trove.iterator.TLongByteIterator iterator() -> iterator
    long getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    byte putIfAbsent(long,byte) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongByteProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,byte) -> adjustValue
    byte adjustOrPutValue(long,byte,byte) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedLongCharMap -> gnu.trove.impl.sync.TSynchronizedLongCharMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongCharMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TLongSet keySet -> a
    gnu.trove.TCharCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(long) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(long) -> get
    char put(long,char) -> put
    char remove(long) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongCharMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    gnu.trove.iterator.TLongCharIterator iterator() -> iterator
    long getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    char putIfAbsent(long,char) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongCharProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,char) -> adjustValue
    char adjustOrPutValue(long,char,char) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedLongCollection -> gnu.trove.impl.sync.TSynchronizedLongCollection:
    long serialVersionUID -> serialVersionUID
    gnu.trove.TLongCollection c -> c
    java.lang.Object mutex -> mutex
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    long getNoEntryValue() -> getNoEntryValue
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    void clear() -> clear
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedLongDoubleMap -> gnu.trove.impl.sync.TSynchronizedLongDoubleMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongDoubleMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TLongSet keySet -> a
    gnu.trove.TDoubleCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(long) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(long) -> get
    double put(long,double) -> put
    double remove(long) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongDoubleMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    gnu.trove.iterator.TLongDoubleIterator iterator() -> iterator
    long getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    double putIfAbsent(long,double) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongDoubleProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,double) -> adjustValue
    double adjustOrPutValue(long,double,double) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedLongFloatMap -> gnu.trove.impl.sync.TSynchronizedLongFloatMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongFloatMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TLongSet keySet -> a
    gnu.trove.TFloatCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(long) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(long) -> get
    float put(long,float) -> put
    float remove(long) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongFloatMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    gnu.trove.iterator.TLongFloatIterator iterator() -> iterator
    long getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    float putIfAbsent(long,float) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongFloatProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,float) -> adjustValue
    float adjustOrPutValue(long,float,float) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedLongIntMap -> gnu.trove.impl.sync.TSynchronizedLongIntMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongIntMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TLongSet keySet -> a
    gnu.trove.TIntCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(long) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(long) -> get
    int put(long,int) -> put
    int remove(long) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongIntMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    gnu.trove.iterator.TLongIntIterator iterator() -> iterator
    long getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int putIfAbsent(long,int) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongIntProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,int) -> adjustValue
    int adjustOrPutValue(long,int,int) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedLongList -> gnu.trove.impl.sync.TSynchronizedLongList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TLongList list -> list
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    long get(int) -> get
    long set(int,long) -> set
    void set(int,long[]) -> set
    void set(int,long[],int,int) -> set
    long replace(int,long) -> replace
    void remove(int,int) -> remove
    long removeAt(int) -> removeAt
    void add(long[]) -> add
    void add(long[],int,int) -> add
    void insert(int,long) -> insert
    void insert(int,long[]) -> insert
    void insert(int,long[],int,int) -> insert
    int indexOf(long) -> indexOf
    int lastIndexOf(long) -> lastIndexOf
    gnu.trove.list.TLongList subList(int,int) -> subList
    long[] toArray(int,int) -> toArray
    long[] toArray(long[],int,int) -> toArray
    long[] toArray(long[],int,int,int) -> toArray
    int indexOf(int,long) -> indexOf
    int lastIndexOf(int,long) -> lastIndexOf
    void fill(long) -> fill
    void fill(int,int,long) -> fill
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void sort() -> sort
    void sort(int,int) -> sort
    int binarySearch(long) -> binarySearch
    int binarySearch(long,int,int) -> binarySearch
    gnu.trove.list.TLongList grep(gnu.trove.procedure.TLongProcedure) -> grep
    gnu.trove.list.TLongList inverseGrep(gnu.trove.procedure.TLongProcedure) -> inverseGrep
    long max() -> max
    long min() -> min
    long sum() -> sum
    boolean forEachDescending(gnu.trove.procedure.TLongProcedure) -> forEachDescending
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    java.lang.Object readResolve() -> readResolve
gnu.trove.impl.sync.TSynchronizedLongLongMap -> gnu.trove.impl.sync.TSynchronizedLongLongMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongLongMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TLongSet keySet -> a
    gnu.trove.TLongCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(long) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(long) -> get
    long put(long,long) -> put
    long remove(long) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongLongMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    gnu.trove.iterator.TLongLongIterator iterator() -> iterator
    long getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    long putIfAbsent(long,long) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongLongProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,long) -> adjustValue
    long adjustOrPutValue(long,long,long) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedLongObjectMap -> gnu.trove.impl.sync.TSynchronizedLongObjectMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongObjectMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TLongSet keySet -> a
    java.util.Collection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(long) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(long) -> get
    java.lang.Object put(long,java.lang.Object) -> put
    java.lang.Object remove(long) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TLongObjectIterator iterator() -> iterator
    long getNoEntryKey() -> getNoEntryKey
    java.lang.Object putIfAbsent(long,java.lang.Object) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongObjectProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongObjectProcedure) -> retainEntries
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedLongSet -> gnu.trove.impl.sync.TSynchronizedLongSet:
    long serialVersionUID -> serialVersionUID
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
gnu.trove.impl.sync.TSynchronizedLongShortMap -> gnu.trove.impl.sync.TSynchronizedLongShortMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongShortMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TLongSet keySet -> a
    gnu.trove.TShortCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(long) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(long) -> get
    short put(long,short) -> put
    short remove(long) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongShortMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    gnu.trove.iterator.TLongShortIterator iterator() -> iterator
    long getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    short putIfAbsent(long,short) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongShortProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,short) -> adjustValue
    short adjustOrPutValue(long,short,short) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedObjectByteMap -> gnu.trove.impl.sync.TSynchronizedObjectByteMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectByteMap m -> m
    java.lang.Object mutex -> mutex
    java.util.Set keySet -> a
    gnu.trove.TByteCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(java.lang.Object) -> get
    byte put(java.lang.Object,byte) -> put
    byte remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectByteMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    gnu.trove.iterator.TObjectByteIterator iterator() -> iterator
    byte getNoEntryValue() -> getNoEntryValue
    byte putIfAbsent(java.lang.Object,byte) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectByteProcedure) -> retainEntries
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,byte) -> adjustValue
    byte adjustOrPutValue(java.lang.Object,byte,byte) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedObjectCharMap -> gnu.trove.impl.sync.TSynchronizedObjectCharMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectCharMap m -> m
    java.lang.Object mutex -> mutex
    java.util.Set keySet -> a
    gnu.trove.TCharCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(java.lang.Object) -> get
    char put(java.lang.Object,char) -> put
    char remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectCharMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    gnu.trove.iterator.TObjectCharIterator iterator() -> iterator
    char getNoEntryValue() -> getNoEntryValue
    char putIfAbsent(java.lang.Object,char) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectCharProcedure) -> retainEntries
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,char) -> adjustValue
    char adjustOrPutValue(java.lang.Object,char,char) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedObjectDoubleMap -> gnu.trove.impl.sync.TSynchronizedObjectDoubleMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectDoubleMap m -> m
    java.lang.Object mutex -> mutex
    java.util.Set keySet -> a
    gnu.trove.TDoubleCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(java.lang.Object) -> get
    double put(java.lang.Object,double) -> put
    double remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectDoubleMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    gnu.trove.iterator.TObjectDoubleIterator iterator() -> iterator
    double getNoEntryValue() -> getNoEntryValue
    double putIfAbsent(java.lang.Object,double) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectDoubleProcedure) -> retainEntries
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,double) -> adjustValue
    double adjustOrPutValue(java.lang.Object,double,double) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedObjectFloatMap -> gnu.trove.impl.sync.TSynchronizedObjectFloatMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectFloatMap m -> m
    java.lang.Object mutex -> mutex
    java.util.Set keySet -> a
    gnu.trove.TFloatCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(java.lang.Object) -> get
    float put(java.lang.Object,float) -> put
    float remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectFloatMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    gnu.trove.iterator.TObjectFloatIterator iterator() -> iterator
    float getNoEntryValue() -> getNoEntryValue
    float putIfAbsent(java.lang.Object,float) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectFloatProcedure) -> retainEntries
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,float) -> adjustValue
    float adjustOrPutValue(java.lang.Object,float,float) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedObjectIntMap -> gnu.trove.impl.sync.TSynchronizedObjectIntMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectIntMap m -> m
    java.lang.Object mutex -> mutex
    java.util.Set keySet -> a
    gnu.trove.TIntCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(java.lang.Object) -> get
    int put(java.lang.Object,int) -> put
    int remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectIntMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    gnu.trove.iterator.TObjectIntIterator iterator() -> iterator
    int getNoEntryValue() -> getNoEntryValue
    int putIfAbsent(java.lang.Object,int) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectIntProcedure) -> retainEntries
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,int) -> adjustValue
    int adjustOrPutValue(java.lang.Object,int,int) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedObjectLongMap -> gnu.trove.impl.sync.TSynchronizedObjectLongMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectLongMap m -> m
    java.lang.Object mutex -> mutex
    java.util.Set keySet -> a
    gnu.trove.TLongCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(java.lang.Object) -> get
    long put(java.lang.Object,long) -> put
    long remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectLongMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    gnu.trove.iterator.TObjectLongIterator iterator() -> iterator
    long getNoEntryValue() -> getNoEntryValue
    long putIfAbsent(java.lang.Object,long) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectLongProcedure) -> retainEntries
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,long) -> adjustValue
    long adjustOrPutValue(java.lang.Object,long,long) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedObjectShortMap -> gnu.trove.impl.sync.TSynchronizedObjectShortMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectShortMap m -> m
    java.lang.Object mutex -> mutex
    java.util.Set keySet -> a
    gnu.trove.TShortCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(java.lang.Object) -> get
    short put(java.lang.Object,short) -> put
    short remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectShortMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    gnu.trove.iterator.TObjectShortIterator iterator() -> iterator
    short getNoEntryValue() -> getNoEntryValue
    short putIfAbsent(java.lang.Object,short) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectShortProcedure) -> retainEntries
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,short) -> adjustValue
    short adjustOrPutValue(java.lang.Object,short,short) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedRandomAccessByteList -> gnu.trove.impl.sync.TSynchronizedRandomAccessByteList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TByteList subList(int,int) -> subList
    java.lang.Object writeReplace() -> writeReplace
gnu.trove.impl.sync.TSynchronizedRandomAccessCharList -> gnu.trove.impl.sync.TSynchronizedRandomAccessCharList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TCharList subList(int,int) -> subList
    java.lang.Object writeReplace() -> writeReplace
gnu.trove.impl.sync.TSynchronizedRandomAccessDoubleList -> gnu.trove.impl.sync.TSynchronizedRandomAccessDoubleList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TDoubleList subList(int,int) -> subList
    java.lang.Object writeReplace() -> writeReplace
gnu.trove.impl.sync.TSynchronizedRandomAccessFloatList -> gnu.trove.impl.sync.TSynchronizedRandomAccessFloatList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TFloatList subList(int,int) -> subList
    java.lang.Object writeReplace() -> writeReplace
gnu.trove.impl.sync.TSynchronizedRandomAccessIntList -> gnu.trove.impl.sync.TSynchronizedRandomAccessIntList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TIntList subList(int,int) -> subList
    java.lang.Object writeReplace() -> writeReplace
gnu.trove.impl.sync.TSynchronizedRandomAccessLongList -> gnu.trove.impl.sync.TSynchronizedRandomAccessLongList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TLongList subList(int,int) -> subList
    java.lang.Object writeReplace() -> writeReplace
gnu.trove.impl.sync.TSynchronizedRandomAccessShortList -> gnu.trove.impl.sync.TSynchronizedRandomAccessShortList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TShortList subList(int,int) -> subList
    java.lang.Object writeReplace() -> writeReplace
gnu.trove.impl.sync.TSynchronizedShortByteMap -> gnu.trove.impl.sync.TSynchronizedShortByteMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortByteMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TShortSet keySet -> a
    gnu.trove.TByteCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(short) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(short) -> get
    byte put(short,byte) -> put
    byte remove(short) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortByteMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    gnu.trove.iterator.TShortByteIterator iterator() -> iterator
    short getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    byte putIfAbsent(short,byte) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortByteProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,byte) -> adjustValue
    byte adjustOrPutValue(short,byte,byte) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedShortCharMap -> gnu.trove.impl.sync.TSynchronizedShortCharMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortCharMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TShortSet keySet -> a
    gnu.trove.TCharCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(short) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(short) -> get
    char put(short,char) -> put
    char remove(short) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortCharMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    gnu.trove.iterator.TShortCharIterator iterator() -> iterator
    short getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    char putIfAbsent(short,char) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortCharProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,char) -> adjustValue
    char adjustOrPutValue(short,char,char) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedShortCollection -> gnu.trove.impl.sync.TSynchronizedShortCollection:
    long serialVersionUID -> serialVersionUID
    gnu.trove.TShortCollection c -> c
    java.lang.Object mutex -> mutex
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    short getNoEntryValue() -> getNoEntryValue
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    void clear() -> clear
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedShortDoubleMap -> gnu.trove.impl.sync.TSynchronizedShortDoubleMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortDoubleMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TShortSet keySet -> a
    gnu.trove.TDoubleCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(short) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(short) -> get
    double put(short,double) -> put
    double remove(short) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortDoubleMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    gnu.trove.iterator.TShortDoubleIterator iterator() -> iterator
    short getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    double putIfAbsent(short,double) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortDoubleProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,double) -> adjustValue
    double adjustOrPutValue(short,double,double) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedShortFloatMap -> gnu.trove.impl.sync.TSynchronizedShortFloatMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortFloatMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TShortSet keySet -> a
    gnu.trove.TFloatCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(short) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(short) -> get
    float put(short,float) -> put
    float remove(short) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortFloatMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    gnu.trove.iterator.TShortFloatIterator iterator() -> iterator
    short getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    float putIfAbsent(short,float) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortFloatProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,float) -> adjustValue
    float adjustOrPutValue(short,float,float) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedShortIntMap -> gnu.trove.impl.sync.TSynchronizedShortIntMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortIntMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TShortSet keySet -> a
    gnu.trove.TIntCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(short) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(short) -> get
    int put(short,int) -> put
    int remove(short) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortIntMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    gnu.trove.iterator.TShortIntIterator iterator() -> iterator
    short getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int putIfAbsent(short,int) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortIntProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,int) -> adjustValue
    int adjustOrPutValue(short,int,int) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedShortList -> gnu.trove.impl.sync.TSynchronizedShortList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TShortList list -> list
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    short get(int) -> get
    short set(int,short) -> set
    void set(int,short[]) -> set
    void set(int,short[],int,int) -> set
    short replace(int,short) -> replace
    void remove(int,int) -> remove
    short removeAt(int) -> removeAt
    void add(short[]) -> add
    void add(short[],int,int) -> add
    void insert(int,short) -> insert
    void insert(int,short[]) -> insert
    void insert(int,short[],int,int) -> insert
    int indexOf(short) -> indexOf
    int lastIndexOf(short) -> lastIndexOf
    gnu.trove.list.TShortList subList(int,int) -> subList
    short[] toArray(int,int) -> toArray
    short[] toArray(short[],int,int) -> toArray
    short[] toArray(short[],int,int,int) -> toArray
    int indexOf(int,short) -> indexOf
    int lastIndexOf(int,short) -> lastIndexOf
    void fill(short) -> fill
    void fill(int,int,short) -> fill
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void sort() -> sort
    void sort(int,int) -> sort
    int binarySearch(short) -> binarySearch
    int binarySearch(short,int,int) -> binarySearch
    gnu.trove.list.TShortList grep(gnu.trove.procedure.TShortProcedure) -> grep
    gnu.trove.list.TShortList inverseGrep(gnu.trove.procedure.TShortProcedure) -> inverseGrep
    short max() -> max
    short min() -> min
    short sum() -> sum
    boolean forEachDescending(gnu.trove.procedure.TShortProcedure) -> forEachDescending
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    java.lang.Object readResolve() -> readResolve
gnu.trove.impl.sync.TSynchronizedShortLongMap -> gnu.trove.impl.sync.TSynchronizedShortLongMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortLongMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TShortSet keySet -> a
    gnu.trove.TLongCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(short) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(short) -> get
    long put(short,long) -> put
    long remove(short) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortLongMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    gnu.trove.iterator.TShortLongIterator iterator() -> iterator
    short getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    long putIfAbsent(short,long) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortLongProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,long) -> adjustValue
    long adjustOrPutValue(short,long,long) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedShortObjectMap -> gnu.trove.impl.sync.TSynchronizedShortObjectMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortObjectMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TShortSet keySet -> a
    java.util.Collection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(short) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(short) -> get
    java.lang.Object put(short,java.lang.Object) -> put
    java.lang.Object remove(short) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TShortObjectIterator iterator() -> iterator
    short getNoEntryKey() -> getNoEntryKey
    java.lang.Object putIfAbsent(short,java.lang.Object) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortObjectProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortObjectProcedure) -> retainEntries
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.sync.TSynchronizedShortSet -> gnu.trove.impl.sync.TSynchronizedShortSet:
    long serialVersionUID -> serialVersionUID
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
gnu.trove.impl.sync.TSynchronizedShortShortMap -> gnu.trove.impl.sync.TSynchronizedShortShortMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortShortMap m -> m
    java.lang.Object mutex -> mutex
    gnu.trove.set.TShortSet keySet -> a
    gnu.trove.TShortCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(short) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(short) -> get
    short put(short,short) -> put
    short remove(short) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortShortMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    gnu.trove.iterator.TShortShortIterator iterator() -> iterator
    short getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    short putIfAbsent(short,short) -> putIfAbsent
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortShortProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,short) -> adjustValue
    short adjustOrPutValue(short,short,short) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeObject(java.io.ObjectOutputStream) -> writeObject
gnu.trove.impl.unmodifiable.TUnmodifiableByteByteMap -> gnu.trove.impl.unmodifiable.TUnmodifiableByteByteMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteByteMap m -> m
    gnu.trove.set.TByteSet keySet -> a
    gnu.trove.TByteCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(byte) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(byte) -> get
    byte put(byte,byte) -> put
    byte remove(byte) -> remove
    void putAll(gnu.trove.map.TByteByteMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    byte getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteByteProcedure) -> forEachEntry
    gnu.trove.iterator.TByteByteIterator iterator() -> iterator
    byte putIfAbsent(byte,byte) -> putIfAbsent
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteByteProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,byte) -> adjustValue
    byte adjustOrPutValue(byte,byte,byte) -> adjustOrPutValue
    gnu.trove.map.TByteByteMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableByteByteMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableByteByteMap$1 -> gnu.trove.impl.unmodifiable.a:
    gnu.trove.iterator.TByteByteIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableByteByteMap this$0 -> b
    byte key() -> a
    byte value() -> D_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableByteCharMap -> gnu.trove.impl.unmodifiable.TUnmodifiableByteCharMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteCharMap m -> m
    gnu.trove.set.TByteSet keySet -> a
    gnu.trove.TCharCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(byte) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(byte) -> get
    char put(byte,char) -> put
    char remove(byte) -> remove
    void putAll(gnu.trove.map.TByteCharMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    byte getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteCharProcedure) -> forEachEntry
    gnu.trove.iterator.TByteCharIterator iterator() -> iterator
    char putIfAbsent(byte,char) -> putIfAbsent
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteCharProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,char) -> adjustValue
    char adjustOrPutValue(byte,char,char) -> adjustOrPutValue
    gnu.trove.map.TByteCharMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableByteCharMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableByteCharMap$1 -> gnu.trove.impl.unmodifiable.b:
    gnu.trove.iterator.TByteCharIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableByteCharMap this$0 -> b
    byte key() -> a
    char value() -> F_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableByteCollection -> gnu.trove.impl.unmodifiable.TUnmodifiableByteCollection:
    long serialVersionUID -> serialVersionUID
    gnu.trove.TByteCollection c -> c
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    java.lang.String toString() -> toString
    byte getNoEntryValue() -> getNoEntryValue
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    void clear() -> clear
gnu.trove.impl.unmodifiable.TUnmodifiableByteCollection$1 -> gnu.trove.impl.unmodifiable.c:
    gnu.trove.iterator.TByteIterator i -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableByteCollection this$0 -> b
    boolean hasNext() -> hasNext
    byte next() -> a
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableByteDoubleMap -> gnu.trove.impl.unmodifiable.TUnmodifiableByteDoubleMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteDoubleMap m -> m
    gnu.trove.set.TByteSet keySet -> a
    gnu.trove.TDoubleCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(byte) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(byte) -> get
    double put(byte,double) -> put
    double remove(byte) -> remove
    void putAll(gnu.trove.map.TByteDoubleMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    byte getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteDoubleProcedure) -> forEachEntry
    gnu.trove.iterator.TByteDoubleIterator iterator() -> iterator
    double putIfAbsent(byte,double) -> putIfAbsent
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteDoubleProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,double) -> adjustValue
    double adjustOrPutValue(byte,double,double) -> adjustOrPutValue
    gnu.trove.map.TByteDoubleMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableByteDoubleMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableByteDoubleMap$1 -> gnu.trove.impl.unmodifiable.d:
    gnu.trove.iterator.TByteDoubleIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableByteDoubleMap this$0 -> b
    byte key() -> a
    double value() -> G_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableByteFloatMap -> gnu.trove.impl.unmodifiable.TUnmodifiableByteFloatMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteFloatMap m -> m
    gnu.trove.set.TByteSet keySet -> a
    gnu.trove.TFloatCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(byte) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(byte) -> get
    float put(byte,float) -> put
    float remove(byte) -> remove
    void putAll(gnu.trove.map.TByteFloatMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    byte getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteFloatProcedure) -> forEachEntry
    gnu.trove.iterator.TByteFloatIterator iterator() -> iterator
    float putIfAbsent(byte,float) -> putIfAbsent
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteFloatProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,float) -> adjustValue
    float adjustOrPutValue(byte,float,float) -> adjustOrPutValue
    gnu.trove.map.TByteFloatMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableByteFloatMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableByteFloatMap$1 -> gnu.trove.impl.unmodifiable.e:
    gnu.trove.iterator.TByteFloatIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableByteFloatMap this$0 -> b
    byte key() -> a
    float value() -> H_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableByteIntMap -> gnu.trove.impl.unmodifiable.TUnmodifiableByteIntMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteIntMap m -> m
    gnu.trove.set.TByteSet keySet -> a
    gnu.trove.TIntCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(byte) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(byte) -> get
    int put(byte,int) -> put
    int remove(byte) -> remove
    void putAll(gnu.trove.map.TByteIntMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    byte getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteIntProcedure) -> forEachEntry
    gnu.trove.iterator.TByteIntIterator iterator() -> iterator
    int putIfAbsent(byte,int) -> putIfAbsent
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteIntProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,int) -> adjustValue
    int adjustOrPutValue(byte,int,int) -> adjustOrPutValue
    gnu.trove.map.TByteIntMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableByteIntMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableByteIntMap$1 -> gnu.trove.impl.unmodifiable.f:
    gnu.trove.iterator.TByteIntIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableByteIntMap this$0 -> b
    byte key() -> a
    int value() -> I_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableByteList -> gnu.trove.impl.unmodifiable.TUnmodifiableByteList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TByteList list -> list
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    byte get(int) -> get
    int indexOf(byte) -> indexOf
    int lastIndexOf(byte) -> lastIndexOf
    byte[] toArray(int,int) -> toArray
    byte[] toArray(byte[],int,int) -> toArray
    byte[] toArray(byte[],int,int,int) -> toArray
    boolean forEachDescending(gnu.trove.procedure.TByteProcedure) -> forEachDescending
    int binarySearch(byte) -> binarySearch
    int binarySearch(byte,int,int) -> binarySearch
    int indexOf(int,byte) -> indexOf
    int lastIndexOf(int,byte) -> lastIndexOf
    gnu.trove.list.TByteList grep(gnu.trove.procedure.TByteProcedure) -> grep
    gnu.trove.list.TByteList inverseGrep(gnu.trove.procedure.TByteProcedure) -> inverseGrep
    byte max() -> max
    byte min() -> min
    byte sum() -> sum
    gnu.trove.list.TByteList subList(int,int) -> subList
    java.lang.Object readResolve() -> readResolve
    void add(byte[]) -> add
    void add(byte[],int,int) -> add
    byte removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void insert(int,byte) -> insert
    void insert(int,byte[]) -> insert
    void insert(int,byte[],int,int) -> insert
    byte set(int,byte) -> set
    void set(int,byte[]) -> set
    void set(int,byte[],int,int) -> set
    byte replace(int,byte) -> replace
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(byte) -> fill
    void fill(int,int,byte) -> fill
gnu.trove.impl.unmodifiable.TUnmodifiableByteLongMap -> gnu.trove.impl.unmodifiable.TUnmodifiableByteLongMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteLongMap m -> m
    gnu.trove.set.TByteSet keySet -> a
    gnu.trove.TLongCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(byte) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(byte) -> get
    long put(byte,long) -> put
    long remove(byte) -> remove
    void putAll(gnu.trove.map.TByteLongMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    byte getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteLongProcedure) -> forEachEntry
    gnu.trove.iterator.TByteLongIterator iterator() -> iterator
    long putIfAbsent(byte,long) -> putIfAbsent
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteLongProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,long) -> adjustValue
    long adjustOrPutValue(byte,long,long) -> adjustOrPutValue
    gnu.trove.map.TByteLongMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableByteLongMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableByteLongMap$1 -> gnu.trove.impl.unmodifiable.g:
    gnu.trove.iterator.TByteLongIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableByteLongMap this$0 -> b
    byte key() -> a
    long value() -> J_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap -> gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteObjectMap m -> m
    gnu.trove.set.TByteSet keySet -> a
    java.util.Collection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(byte) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(byte) -> get
    java.lang.Object put(byte,java.lang.Object) -> put
    java.lang.Object remove(byte) -> remove
    void putAll(gnu.trove.map.TByteObjectMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    byte getNoEntryKey() -> getNoEntryKey
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteObjectProcedure) -> forEachEntry
    gnu.trove.iterator.TByteObjectIterator iterator() -> iterator
    java.lang.Object putIfAbsent(byte,java.lang.Object) -> putIfAbsent
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteObjectProcedure) -> retainEntries
    gnu.trove.map.TByteObjectMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap$1 -> gnu.trove.impl.unmodifiable.h:
    gnu.trove.iterator.TByteObjectIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableByteObjectMap this$0 -> b
    byte key() -> a
    java.lang.Object value() -> K_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableByteSet -> gnu.trove.impl.unmodifiable.TUnmodifiableByteSet:
    long serialVersionUID -> serialVersionUID
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
gnu.trove.impl.unmodifiable.TUnmodifiableByteShortMap -> gnu.trove.impl.unmodifiable.TUnmodifiableByteShortMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TByteShortMap m -> m
    gnu.trove.set.TByteSet keySet -> a
    gnu.trove.TShortCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(byte) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(byte) -> get
    short put(byte,short) -> put
    short remove(byte) -> remove
    void putAll(gnu.trove.map.TByteShortMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    byte getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteShortProcedure) -> forEachEntry
    gnu.trove.iterator.TByteShortIterator iterator() -> iterator
    short putIfAbsent(byte,short) -> putIfAbsent
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteShortProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,short) -> adjustValue
    short adjustOrPutValue(byte,short,short) -> adjustOrPutValue
    gnu.trove.map.TByteShortMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableByteShortMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableByteShortMap$1 -> gnu.trove.impl.unmodifiable.i:
    gnu.trove.iterator.TByteShortIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableByteShortMap this$0 -> b
    byte key() -> a
    short value() -> L_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableCharByteMap -> gnu.trove.impl.unmodifiable.TUnmodifiableCharByteMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharByteMap m -> m
    gnu.trove.set.TCharSet keySet -> a
    gnu.trove.TByteCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(char) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(char) -> get
    byte put(char,byte) -> put
    byte remove(char) -> remove
    void putAll(gnu.trove.map.TCharByteMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    char getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharByteProcedure) -> forEachEntry
    gnu.trove.iterator.TCharByteIterator iterator() -> iterator
    byte putIfAbsent(char,byte) -> putIfAbsent
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharByteProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,byte) -> adjustValue
    byte adjustOrPutValue(char,byte,byte) -> adjustOrPutValue
    gnu.trove.map.TCharByteMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableCharByteMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableCharByteMap$1 -> gnu.trove.impl.unmodifiable.j:
    gnu.trove.iterator.TCharByteIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableCharByteMap this$0 -> b
    char key() -> a
    byte value() -> M_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableCharCharMap -> gnu.trove.impl.unmodifiable.TUnmodifiableCharCharMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharCharMap m -> m
    gnu.trove.set.TCharSet keySet -> a
    gnu.trove.TCharCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(char) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(char) -> get
    char put(char,char) -> put
    char remove(char) -> remove
    void putAll(gnu.trove.map.TCharCharMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    char getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharCharProcedure) -> forEachEntry
    gnu.trove.iterator.TCharCharIterator iterator() -> iterator
    char putIfAbsent(char,char) -> putIfAbsent
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharCharProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,char) -> adjustValue
    char adjustOrPutValue(char,char,char) -> adjustOrPutValue
    gnu.trove.map.TCharCharMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableCharCharMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableCharCharMap$1 -> gnu.trove.impl.unmodifiable.k:
    gnu.trove.iterator.TCharCharIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableCharCharMap this$0 -> b
    char key() -> a
    char value() -> N_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableCharCollection -> gnu.trove.impl.unmodifiable.TUnmodifiableCharCollection:
    long serialVersionUID -> serialVersionUID
    gnu.trove.TCharCollection c -> c
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    java.lang.String toString() -> toString
    char getNoEntryValue() -> getNoEntryValue
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    void clear() -> clear
gnu.trove.impl.unmodifiable.TUnmodifiableCharCollection$1 -> gnu.trove.impl.unmodifiable.l:
    gnu.trove.iterator.TCharIterator i -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableCharCollection this$0 -> b
    boolean hasNext() -> hasNext
    char next() -> a
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableCharDoubleMap -> gnu.trove.impl.unmodifiable.TUnmodifiableCharDoubleMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharDoubleMap m -> m
    gnu.trove.set.TCharSet keySet -> a
    gnu.trove.TDoubleCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(char) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(char) -> get
    double put(char,double) -> put
    double remove(char) -> remove
    void putAll(gnu.trove.map.TCharDoubleMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    char getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharDoubleProcedure) -> forEachEntry
    gnu.trove.iterator.TCharDoubleIterator iterator() -> iterator
    double putIfAbsent(char,double) -> putIfAbsent
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharDoubleProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,double) -> adjustValue
    double adjustOrPutValue(char,double,double) -> adjustOrPutValue
    gnu.trove.map.TCharDoubleMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableCharDoubleMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableCharDoubleMap$1 -> gnu.trove.impl.unmodifiable.m:
    gnu.trove.iterator.TCharDoubleIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableCharDoubleMap this$0 -> b
    char key() -> a
    double value() -> O_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableCharFloatMap -> gnu.trove.impl.unmodifiable.TUnmodifiableCharFloatMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharFloatMap m -> m
    gnu.trove.set.TCharSet keySet -> a
    gnu.trove.TFloatCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(char) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(char) -> get
    float put(char,float) -> put
    float remove(char) -> remove
    void putAll(gnu.trove.map.TCharFloatMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    char getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharFloatProcedure) -> forEachEntry
    gnu.trove.iterator.TCharFloatIterator iterator() -> iterator
    float putIfAbsent(char,float) -> putIfAbsent
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharFloatProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,float) -> adjustValue
    float adjustOrPutValue(char,float,float) -> adjustOrPutValue
    gnu.trove.map.TCharFloatMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableCharFloatMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableCharFloatMap$1 -> gnu.trove.impl.unmodifiable.n:
    gnu.trove.iterator.TCharFloatIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableCharFloatMap this$0 -> b
    char key() -> a
    float value() -> P_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableCharIntMap -> gnu.trove.impl.unmodifiable.TUnmodifiableCharIntMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharIntMap m -> m
    gnu.trove.set.TCharSet keySet -> a
    gnu.trove.TIntCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(char) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(char) -> get
    int put(char,int) -> put
    int remove(char) -> remove
    void putAll(gnu.trove.map.TCharIntMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    char getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharIntProcedure) -> forEachEntry
    gnu.trove.iterator.TCharIntIterator iterator() -> iterator
    int putIfAbsent(char,int) -> putIfAbsent
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharIntProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,int) -> adjustValue
    int adjustOrPutValue(char,int,int) -> adjustOrPutValue
    gnu.trove.map.TCharIntMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableCharIntMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableCharIntMap$1 -> gnu.trove.impl.unmodifiable.o:
    gnu.trove.iterator.TCharIntIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableCharIntMap this$0 -> b
    char key() -> a
    int value() -> Q_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableCharList -> gnu.trove.impl.unmodifiable.TUnmodifiableCharList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TCharList list -> list
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    char get(int) -> get
    int indexOf(char) -> indexOf
    int lastIndexOf(char) -> lastIndexOf
    char[] toArray(int,int) -> toArray
    char[] toArray(char[],int,int) -> toArray
    char[] toArray(char[],int,int,int) -> toArray
    boolean forEachDescending(gnu.trove.procedure.TCharProcedure) -> forEachDescending
    int binarySearch(char) -> binarySearch
    int binarySearch(char,int,int) -> binarySearch
    int indexOf(int,char) -> indexOf
    int lastIndexOf(int,char) -> lastIndexOf
    gnu.trove.list.TCharList grep(gnu.trove.procedure.TCharProcedure) -> grep
    gnu.trove.list.TCharList inverseGrep(gnu.trove.procedure.TCharProcedure) -> inverseGrep
    char max() -> max
    char min() -> min
    char sum() -> sum
    gnu.trove.list.TCharList subList(int,int) -> subList
    java.lang.Object readResolve() -> readResolve
    void add(char[]) -> add
    void add(char[],int,int) -> add
    char removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void insert(int,char) -> insert
    void insert(int,char[]) -> insert
    void insert(int,char[],int,int) -> insert
    char set(int,char) -> set
    void set(int,char[]) -> set
    void set(int,char[],int,int) -> set
    char replace(int,char) -> replace
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(char) -> fill
    void fill(int,int,char) -> fill
gnu.trove.impl.unmodifiable.TUnmodifiableCharLongMap -> gnu.trove.impl.unmodifiable.TUnmodifiableCharLongMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharLongMap m -> m
    gnu.trove.set.TCharSet keySet -> a
    gnu.trove.TLongCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(char) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(char) -> get
    long put(char,long) -> put
    long remove(char) -> remove
    void putAll(gnu.trove.map.TCharLongMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    char getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharLongProcedure) -> forEachEntry
    gnu.trove.iterator.TCharLongIterator iterator() -> iterator
    long putIfAbsent(char,long) -> putIfAbsent
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharLongProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,long) -> adjustValue
    long adjustOrPutValue(char,long,long) -> adjustOrPutValue
    gnu.trove.map.TCharLongMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableCharLongMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableCharLongMap$1 -> gnu.trove.impl.unmodifiable.p:
    gnu.trove.iterator.TCharLongIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableCharLongMap this$0 -> b
    char key() -> a
    long value() -> R_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableCharObjectMap -> gnu.trove.impl.unmodifiable.TUnmodifiableCharObjectMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharObjectMap m -> m
    gnu.trove.set.TCharSet keySet -> a
    java.util.Collection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(char) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(char) -> get
    java.lang.Object put(char,java.lang.Object) -> put
    java.lang.Object remove(char) -> remove
    void putAll(gnu.trove.map.TCharObjectMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    char getNoEntryKey() -> getNoEntryKey
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharObjectProcedure) -> forEachEntry
    gnu.trove.iterator.TCharObjectIterator iterator() -> iterator
    java.lang.Object putIfAbsent(char,java.lang.Object) -> putIfAbsent
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharObjectProcedure) -> retainEntries
    gnu.trove.map.TCharObjectMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableCharObjectMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableCharObjectMap$1 -> gnu.trove.impl.unmodifiable.q:
    gnu.trove.iterator.TCharObjectIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableCharObjectMap this$0 -> b
    char key() -> a
    java.lang.Object value() -> S_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableCharSet -> gnu.trove.impl.unmodifiable.TUnmodifiableCharSet:
    long serialVersionUID -> serialVersionUID
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
gnu.trove.impl.unmodifiable.TUnmodifiableCharShortMap -> gnu.trove.impl.unmodifiable.TUnmodifiableCharShortMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TCharShortMap m -> m
    gnu.trove.set.TCharSet keySet -> a
    gnu.trove.TShortCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(char) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(char) -> get
    short put(char,short) -> put
    short remove(char) -> remove
    void putAll(gnu.trove.map.TCharShortMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    char getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharShortProcedure) -> forEachEntry
    gnu.trove.iterator.TCharShortIterator iterator() -> iterator
    short putIfAbsent(char,short) -> putIfAbsent
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharShortProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,short) -> adjustValue
    short adjustOrPutValue(char,short,short) -> adjustOrPutValue
    gnu.trove.map.TCharShortMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableCharShortMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableCharShortMap$1 -> gnu.trove.impl.unmodifiable.r:
    gnu.trove.iterator.TCharShortIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableCharShortMap this$0 -> b
    char key() -> a
    short value() -> T_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap -> gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleByteMap m -> m
    gnu.trove.set.TDoubleSet keySet -> a
    gnu.trove.TByteCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(double) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(double) -> get
    byte put(double,byte) -> put
    byte remove(double) -> remove
    void putAll(gnu.trove.map.TDoubleByteMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    double getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleByteProcedure) -> forEachEntry
    gnu.trove.iterator.TDoubleByteIterator iterator() -> iterator
    byte putIfAbsent(double,byte) -> putIfAbsent
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleByteProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,byte) -> adjustValue
    byte adjustOrPutValue(double,byte,byte) -> adjustOrPutValue
    gnu.trove.map.TDoubleByteMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap$1 -> gnu.trove.impl.unmodifiable.s:
    gnu.trove.iterator.TDoubleByteIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableDoubleByteMap this$0 -> b
    double key() -> a
    byte value() -> U_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCharMap -> gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCharMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleCharMap m -> m
    gnu.trove.set.TDoubleSet keySet -> a
    gnu.trove.TCharCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(double) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(double) -> get
    char put(double,char) -> put
    char remove(double) -> remove
    void putAll(gnu.trove.map.TDoubleCharMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    double getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleCharProcedure) -> forEachEntry
    gnu.trove.iterator.TDoubleCharIterator iterator() -> iterator
    char putIfAbsent(double,char) -> putIfAbsent
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleCharProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,char) -> adjustValue
    char adjustOrPutValue(double,char,char) -> adjustOrPutValue
    gnu.trove.map.TDoubleCharMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCharMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCharMap$1 -> gnu.trove.impl.unmodifiable.t:
    gnu.trove.iterator.TDoubleCharIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCharMap this$0 -> b
    double key() -> a
    char value() -> V_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection -> gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection:
    long serialVersionUID -> serialVersionUID
    gnu.trove.TDoubleCollection c -> c
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    java.lang.String toString() -> toString
    double getNoEntryValue() -> getNoEntryValue
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    void clear() -> clear
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection$1 -> gnu.trove.impl.unmodifiable.u:
    gnu.trove.iterator.TDoubleIterator i -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableDoubleCollection this$0 -> b
    boolean hasNext() -> hasNext
    double next() -> a
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleDoubleMap -> gnu.trove.impl.unmodifiable.TUnmodifiableDoubleDoubleMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleDoubleMap m -> m
    gnu.trove.set.TDoubleSet keySet -> a
    gnu.trove.TDoubleCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(double) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(double) -> get
    double put(double,double) -> put
    double remove(double) -> remove
    void putAll(gnu.trove.map.TDoubleDoubleMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    double getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleDoubleProcedure) -> forEachEntry
    gnu.trove.iterator.TDoubleDoubleIterator iterator() -> iterator
    double putIfAbsent(double,double) -> putIfAbsent
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleDoubleProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,double) -> adjustValue
    double adjustOrPutValue(double,double,double) -> adjustOrPutValue
    gnu.trove.map.TDoubleDoubleMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableDoubleDoubleMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleDoubleMap$1 -> gnu.trove.impl.unmodifiable.v:
    gnu.trove.iterator.TDoubleDoubleIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableDoubleDoubleMap this$0 -> b
    double key() -> a
    double value() -> W_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleFloatMap -> gnu.trove.impl.unmodifiable.TUnmodifiableDoubleFloatMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleFloatMap m -> m
    gnu.trove.set.TDoubleSet keySet -> a
    gnu.trove.TFloatCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(double) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(double) -> get
    float put(double,float) -> put
    float remove(double) -> remove
    void putAll(gnu.trove.map.TDoubleFloatMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    double getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleFloatProcedure) -> forEachEntry
    gnu.trove.iterator.TDoubleFloatIterator iterator() -> iterator
    float putIfAbsent(double,float) -> putIfAbsent
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleFloatProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,float) -> adjustValue
    float adjustOrPutValue(double,float,float) -> adjustOrPutValue
    gnu.trove.map.TDoubleFloatMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableDoubleFloatMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleFloatMap$1 -> gnu.trove.impl.unmodifiable.w:
    gnu.trove.iterator.TDoubleFloatIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableDoubleFloatMap this$0 -> b
    double key() -> a
    float value() -> X_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleIntMap -> gnu.trove.impl.unmodifiable.TUnmodifiableDoubleIntMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleIntMap m -> m
    gnu.trove.set.TDoubleSet keySet -> a
    gnu.trove.TIntCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(double) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(double) -> get
    int put(double,int) -> put
    int remove(double) -> remove
    void putAll(gnu.trove.map.TDoubleIntMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    double getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleIntProcedure) -> forEachEntry
    gnu.trove.iterator.TDoubleIntIterator iterator() -> iterator
    int putIfAbsent(double,int) -> putIfAbsent
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleIntProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,int) -> adjustValue
    int adjustOrPutValue(double,int,int) -> adjustOrPutValue
    gnu.trove.map.TDoubleIntMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableDoubleIntMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleIntMap$1 -> gnu.trove.impl.unmodifiable.x:
    gnu.trove.iterator.TDoubleIntIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableDoubleIntMap this$0 -> b
    double key() -> a
    int value() -> Y_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList -> gnu.trove.impl.unmodifiable.TUnmodifiableDoubleList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TDoubleList list -> list
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    double get(int) -> get
    int indexOf(double) -> indexOf
    int lastIndexOf(double) -> lastIndexOf
    double[] toArray(int,int) -> toArray
    double[] toArray(double[],int,int) -> toArray
    double[] toArray(double[],int,int,int) -> toArray
    boolean forEachDescending(gnu.trove.procedure.TDoubleProcedure) -> forEachDescending
    int binarySearch(double) -> binarySearch
    int binarySearch(double,int,int) -> binarySearch
    int indexOf(int,double) -> indexOf
    int lastIndexOf(int,double) -> lastIndexOf
    gnu.trove.list.TDoubleList grep(gnu.trove.procedure.TDoubleProcedure) -> grep
    gnu.trove.list.TDoubleList inverseGrep(gnu.trove.procedure.TDoubleProcedure) -> inverseGrep
    double max() -> max
    double min() -> min
    double sum() -> sum
    gnu.trove.list.TDoubleList subList(int,int) -> subList
    java.lang.Object readResolve() -> readResolve
    void add(double[]) -> add
    void add(double[],int,int) -> add
    double removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void insert(int,double) -> insert
    void insert(int,double[]) -> insert
    void insert(int,double[],int,int) -> insert
    double set(int,double) -> set
    void set(int,double[]) -> set
    void set(int,double[],int,int) -> set
    double replace(int,double) -> replace
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(double) -> fill
    void fill(int,int,double) -> fill
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleLongMap -> gnu.trove.impl.unmodifiable.TUnmodifiableDoubleLongMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleLongMap m -> m
    gnu.trove.set.TDoubleSet keySet -> a
    gnu.trove.TLongCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(double) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(double) -> get
    long put(double,long) -> put
    long remove(double) -> remove
    void putAll(gnu.trove.map.TDoubleLongMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    double getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleLongProcedure) -> forEachEntry
    gnu.trove.iterator.TDoubleLongIterator iterator() -> iterator
    long putIfAbsent(double,long) -> putIfAbsent
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleLongProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,long) -> adjustValue
    long adjustOrPutValue(double,long,long) -> adjustOrPutValue
    gnu.trove.map.TDoubleLongMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableDoubleLongMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleLongMap$1 -> gnu.trove.impl.unmodifiable.y:
    gnu.trove.iterator.TDoubleLongIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableDoubleLongMap this$0 -> b
    double key() -> a
    long value() -> Z_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap -> gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleObjectMap m -> m
    gnu.trove.set.TDoubleSet keySet -> a
    java.util.Collection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(double) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(double) -> get
    java.lang.Object put(double,java.lang.Object) -> put
    java.lang.Object remove(double) -> remove
    void putAll(gnu.trove.map.TDoubleObjectMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    double getNoEntryKey() -> getNoEntryKey
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleObjectProcedure) -> forEachEntry
    gnu.trove.iterator.TDoubleObjectIterator iterator() -> iterator
    java.lang.Object putIfAbsent(double,java.lang.Object) -> putIfAbsent
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleObjectProcedure) -> retainEntries
    gnu.trove.map.TDoubleObjectMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap$1 -> gnu.trove.impl.unmodifiable.z:
    gnu.trove.iterator.TDoubleObjectIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableDoubleObjectMap this$0 -> b
    double key() -> a
    java.lang.Object value() -> aa_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleSet -> gnu.trove.impl.unmodifiable.TUnmodifiableDoubleSet:
    long serialVersionUID -> serialVersionUID
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleShortMap -> gnu.trove.impl.unmodifiable.TUnmodifiableDoubleShortMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TDoubleShortMap m -> m
    gnu.trove.set.TDoubleSet keySet -> a
    gnu.trove.TShortCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(double) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(double) -> get
    short put(double,short) -> put
    short remove(double) -> remove
    void putAll(gnu.trove.map.TDoubleShortMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    double getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleShortProcedure) -> forEachEntry
    gnu.trove.iterator.TDoubleShortIterator iterator() -> iterator
    short putIfAbsent(double,short) -> putIfAbsent
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleShortProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,short) -> adjustValue
    short adjustOrPutValue(double,short,short) -> adjustOrPutValue
    gnu.trove.map.TDoubleShortMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableDoubleShortMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableDoubleShortMap$1 -> gnu.trove.impl.unmodifiable.aa:
    gnu.trove.iterator.TDoubleShortIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableDoubleShortMap this$0 -> b
    double key() -> a
    short value() -> ab_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableFloatByteMap -> gnu.trove.impl.unmodifiable.TUnmodifiableFloatByteMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatByteMap m -> m
    gnu.trove.set.TFloatSet keySet -> a
    gnu.trove.TByteCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(float) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(float) -> get
    byte put(float,byte) -> put
    byte remove(float) -> remove
    void putAll(gnu.trove.map.TFloatByteMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    float getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatByteProcedure) -> forEachEntry
    gnu.trove.iterator.TFloatByteIterator iterator() -> iterator
    byte putIfAbsent(float,byte) -> putIfAbsent
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatByteProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,byte) -> adjustValue
    byte adjustOrPutValue(float,byte,byte) -> adjustOrPutValue
    gnu.trove.map.TFloatByteMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableFloatByteMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableFloatByteMap$1 -> gnu.trove.impl.unmodifiable.ab:
    gnu.trove.iterator.TFloatByteIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableFloatByteMap this$0 -> b
    float key() -> a
    byte value() -> ac_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableFloatCharMap -> gnu.trove.impl.unmodifiable.TUnmodifiableFloatCharMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatCharMap m -> m
    gnu.trove.set.TFloatSet keySet -> a
    gnu.trove.TCharCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(float) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(float) -> get
    char put(float,char) -> put
    char remove(float) -> remove
    void putAll(gnu.trove.map.TFloatCharMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    float getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatCharProcedure) -> forEachEntry
    gnu.trove.iterator.TFloatCharIterator iterator() -> iterator
    char putIfAbsent(float,char) -> putIfAbsent
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatCharProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,char) -> adjustValue
    char adjustOrPutValue(float,char,char) -> adjustOrPutValue
    gnu.trove.map.TFloatCharMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableFloatCharMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableFloatCharMap$1 -> gnu.trove.impl.unmodifiable.ac:
    gnu.trove.iterator.TFloatCharIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableFloatCharMap this$0 -> b
    float key() -> a
    char value() -> ad_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableFloatCollection -> gnu.trove.impl.unmodifiable.TUnmodifiableFloatCollection:
    long serialVersionUID -> serialVersionUID
    gnu.trove.TFloatCollection c -> c
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    java.lang.String toString() -> toString
    float getNoEntryValue() -> getNoEntryValue
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    void clear() -> clear
gnu.trove.impl.unmodifiable.TUnmodifiableFloatCollection$1 -> gnu.trove.impl.unmodifiable.ad:
    gnu.trove.iterator.TFloatIterator i -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableFloatCollection this$0 -> b
    boolean hasNext() -> hasNext
    float next() -> a
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap -> gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatDoubleMap m -> m
    gnu.trove.set.TFloatSet keySet -> a
    gnu.trove.TDoubleCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(float) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(float) -> get
    double put(float,double) -> put
    double remove(float) -> remove
    void putAll(gnu.trove.map.TFloatDoubleMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    float getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatDoubleProcedure) -> forEachEntry
    gnu.trove.iterator.TFloatDoubleIterator iterator() -> iterator
    double putIfAbsent(float,double) -> putIfAbsent
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatDoubleProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,double) -> adjustValue
    double adjustOrPutValue(float,double,double) -> adjustOrPutValue
    gnu.trove.map.TFloatDoubleMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap$1 -> gnu.trove.impl.unmodifiable.ae:
    gnu.trove.iterator.TFloatDoubleIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableFloatDoubleMap this$0 -> b
    float key() -> a
    double value() -> ae_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap -> gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatFloatMap m -> m
    gnu.trove.set.TFloatSet keySet -> a
    gnu.trove.TFloatCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(float) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(float) -> get
    float put(float,float) -> put
    float remove(float) -> remove
    void putAll(gnu.trove.map.TFloatFloatMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    float getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatFloatProcedure) -> forEachEntry
    gnu.trove.iterator.TFloatFloatIterator iterator() -> iterator
    float putIfAbsent(float,float) -> putIfAbsent
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatFloatProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,float) -> adjustValue
    float adjustOrPutValue(float,float,float) -> adjustOrPutValue
    gnu.trove.map.TFloatFloatMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap$1 -> gnu.trove.impl.unmodifiable.af:
    gnu.trove.iterator.TFloatFloatIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableFloatFloatMap this$0 -> b
    float key() -> a
    float value() -> af_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap -> gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatIntMap m -> m
    gnu.trove.set.TFloatSet keySet -> a
    gnu.trove.TIntCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(float) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(float) -> get
    int put(float,int) -> put
    int remove(float) -> remove
    void putAll(gnu.trove.map.TFloatIntMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    float getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatIntProcedure) -> forEachEntry
    gnu.trove.iterator.TFloatIntIterator iterator() -> iterator
    int putIfAbsent(float,int) -> putIfAbsent
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatIntProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,int) -> adjustValue
    int adjustOrPutValue(float,int,int) -> adjustOrPutValue
    gnu.trove.map.TFloatIntMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap$1 -> gnu.trove.impl.unmodifiable.ag:
    gnu.trove.iterator.TFloatIntIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableFloatIntMap this$0 -> b
    float key() -> a
    int value() -> ag_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableFloatList -> gnu.trove.impl.unmodifiable.TUnmodifiableFloatList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TFloatList list -> list
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    float get(int) -> get
    int indexOf(float) -> indexOf
    int lastIndexOf(float) -> lastIndexOf
    float[] toArray(int,int) -> toArray
    float[] toArray(float[],int,int) -> toArray
    float[] toArray(float[],int,int,int) -> toArray
    boolean forEachDescending(gnu.trove.procedure.TFloatProcedure) -> forEachDescending
    int binarySearch(float) -> binarySearch
    int binarySearch(float,int,int) -> binarySearch
    int indexOf(int,float) -> indexOf
    int lastIndexOf(int,float) -> lastIndexOf
    gnu.trove.list.TFloatList grep(gnu.trove.procedure.TFloatProcedure) -> grep
    gnu.trove.list.TFloatList inverseGrep(gnu.trove.procedure.TFloatProcedure) -> inverseGrep
    float max() -> max
    float min() -> min
    float sum() -> sum
    gnu.trove.list.TFloatList subList(int,int) -> subList
    java.lang.Object readResolve() -> readResolve
    void add(float[]) -> add
    void add(float[],int,int) -> add
    float removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void insert(int,float) -> insert
    void insert(int,float[]) -> insert
    void insert(int,float[],int,int) -> insert
    float set(int,float) -> set
    void set(int,float[]) -> set
    void set(int,float[],int,int) -> set
    float replace(int,float) -> replace
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(float) -> fill
    void fill(int,int,float) -> fill
gnu.trove.impl.unmodifiable.TUnmodifiableFloatLongMap -> gnu.trove.impl.unmodifiable.TUnmodifiableFloatLongMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatLongMap m -> m
    gnu.trove.set.TFloatSet keySet -> a
    gnu.trove.TLongCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(float) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(float) -> get
    long put(float,long) -> put
    long remove(float) -> remove
    void putAll(gnu.trove.map.TFloatLongMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    float getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatLongProcedure) -> forEachEntry
    gnu.trove.iterator.TFloatLongIterator iterator() -> iterator
    long putIfAbsent(float,long) -> putIfAbsent
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatLongProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,long) -> adjustValue
    long adjustOrPutValue(float,long,long) -> adjustOrPutValue
    gnu.trove.map.TFloatLongMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableFloatLongMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableFloatLongMap$1 -> gnu.trove.impl.unmodifiable.ah:
    gnu.trove.iterator.TFloatLongIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableFloatLongMap this$0 -> b
    float key() -> a
    long value() -> ah_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap -> gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatObjectMap m -> m
    gnu.trove.set.TFloatSet keySet -> a
    java.util.Collection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(float) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(float) -> get
    java.lang.Object put(float,java.lang.Object) -> put
    java.lang.Object remove(float) -> remove
    void putAll(gnu.trove.map.TFloatObjectMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    float getNoEntryKey() -> getNoEntryKey
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatObjectProcedure) -> forEachEntry
    gnu.trove.iterator.TFloatObjectIterator iterator() -> iterator
    java.lang.Object putIfAbsent(float,java.lang.Object) -> putIfAbsent
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatObjectProcedure) -> retainEntries
    gnu.trove.map.TFloatObjectMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap$1 -> gnu.trove.impl.unmodifiable.ai:
    gnu.trove.iterator.TFloatObjectIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableFloatObjectMap this$0 -> b
    float key() -> a
    java.lang.Object value() -> ai_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableFloatSet -> gnu.trove.impl.unmodifiable.TUnmodifiableFloatSet:
    long serialVersionUID -> serialVersionUID
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap -> gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TFloatShortMap m -> m
    gnu.trove.set.TFloatSet keySet -> a
    gnu.trove.TShortCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(float) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(float) -> get
    short put(float,short) -> put
    short remove(float) -> remove
    void putAll(gnu.trove.map.TFloatShortMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    float getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatShortProcedure) -> forEachEntry
    gnu.trove.iterator.TFloatShortIterator iterator() -> iterator
    short putIfAbsent(float,short) -> putIfAbsent
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatShortProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,short) -> adjustValue
    short adjustOrPutValue(float,short,short) -> adjustOrPutValue
    gnu.trove.map.TFloatShortMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap$1 -> gnu.trove.impl.unmodifiable.aj:
    gnu.trove.iterator.TFloatShortIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableFloatShortMap this$0 -> b
    float key() -> a
    short value() -> aj_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableIntByteMap -> gnu.trove.impl.unmodifiable.TUnmodifiableIntByteMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntByteMap m -> m
    gnu.trove.set.TIntSet keySet -> a
    gnu.trove.TByteCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(int) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(int) -> get
    byte put(int,byte) -> put
    byte remove(int) -> remove
    void putAll(gnu.trove.map.TIntByteMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntByteProcedure) -> forEachEntry
    gnu.trove.iterator.TIntByteIterator iterator() -> iterator
    byte putIfAbsent(int,byte) -> putIfAbsent
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntByteProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,byte) -> adjustValue
    byte adjustOrPutValue(int,byte,byte) -> adjustOrPutValue
    gnu.trove.map.TIntByteMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableIntByteMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableIntByteMap$1 -> gnu.trove.impl.unmodifiable.ak:
    gnu.trove.iterator.TIntByteIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableIntByteMap this$0 -> b
    int key() -> a
    byte value() -> ak_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableIntCharMap -> gnu.trove.impl.unmodifiable.TUnmodifiableIntCharMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntCharMap m -> m
    gnu.trove.set.TIntSet keySet -> a
    gnu.trove.TCharCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(int) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(int) -> get
    char put(int,char) -> put
    char remove(int) -> remove
    void putAll(gnu.trove.map.TIntCharMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntCharProcedure) -> forEachEntry
    gnu.trove.iterator.TIntCharIterator iterator() -> iterator
    char putIfAbsent(int,char) -> putIfAbsent
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntCharProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,char) -> adjustValue
    char adjustOrPutValue(int,char,char) -> adjustOrPutValue
    gnu.trove.map.TIntCharMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableIntCharMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableIntCharMap$1 -> gnu.trove.impl.unmodifiable.al:
    gnu.trove.iterator.TIntCharIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableIntCharMap this$0 -> b
    int key() -> a
    char value() -> al_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableIntCollection -> gnu.trove.impl.unmodifiable.TUnmodifiableIntCollection:
    long serialVersionUID -> serialVersionUID
    gnu.trove.TIntCollection c -> c
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    java.lang.String toString() -> toString
    int getNoEntryValue() -> getNoEntryValue
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    void clear() -> clear
gnu.trove.impl.unmodifiable.TUnmodifiableIntCollection$1 -> gnu.trove.impl.unmodifiable.am:
    gnu.trove.iterator.TIntIterator i -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableIntCollection this$0 -> b
    boolean hasNext() -> hasNext
    int next() -> a
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap -> gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntDoubleMap m -> m
    gnu.trove.set.TIntSet keySet -> a
    gnu.trove.TDoubleCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(int) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(int) -> get
    double put(int,double) -> put
    double remove(int) -> remove
    void putAll(gnu.trove.map.TIntDoubleMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntDoubleProcedure) -> forEachEntry
    gnu.trove.iterator.TIntDoubleIterator iterator() -> iterator
    double putIfAbsent(int,double) -> putIfAbsent
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntDoubleProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,double) -> adjustValue
    double adjustOrPutValue(int,double,double) -> adjustOrPutValue
    gnu.trove.map.TIntDoubleMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap$1 -> gnu.trove.impl.unmodifiable.an:
    gnu.trove.iterator.TIntDoubleIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableIntDoubleMap this$0 -> b
    int key() -> a
    double value() -> am_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableIntFloatMap -> gnu.trove.impl.unmodifiable.TUnmodifiableIntFloatMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntFloatMap m -> m
    gnu.trove.set.TIntSet keySet -> a
    gnu.trove.TFloatCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(int) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(int) -> get
    float put(int,float) -> put
    float remove(int) -> remove
    void putAll(gnu.trove.map.TIntFloatMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntFloatProcedure) -> forEachEntry
    gnu.trove.iterator.TIntFloatIterator iterator() -> iterator
    float putIfAbsent(int,float) -> putIfAbsent
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntFloatProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,float) -> adjustValue
    float adjustOrPutValue(int,float,float) -> adjustOrPutValue
    gnu.trove.map.TIntFloatMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableIntFloatMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableIntFloatMap$1 -> gnu.trove.impl.unmodifiable.ao:
    gnu.trove.iterator.TIntFloatIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableIntFloatMap this$0 -> b
    int key() -> a
    float value() -> an_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableIntIntMap -> gnu.trove.impl.unmodifiable.TUnmodifiableIntIntMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntIntMap m -> m
    gnu.trove.set.TIntSet keySet -> a
    gnu.trove.TIntCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(int) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(int) -> get
    int put(int,int) -> put
    int remove(int) -> remove
    void putAll(gnu.trove.map.TIntIntMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntIntProcedure) -> forEachEntry
    gnu.trove.iterator.TIntIntIterator iterator() -> iterator
    int putIfAbsent(int,int) -> putIfAbsent
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntIntProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,int) -> adjustValue
    int adjustOrPutValue(int,int,int) -> adjustOrPutValue
    gnu.trove.map.TIntIntMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableIntIntMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableIntIntMap$1 -> gnu.trove.impl.unmodifiable.ap:
    gnu.trove.iterator.TIntIntIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableIntIntMap this$0 -> b
    int key() -> a
    int value() -> ao_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableIntList -> gnu.trove.impl.unmodifiable.TUnmodifiableIntList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TIntList list -> list
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int get(int) -> get
    int indexOf(int) -> indexOf
    int lastIndexOf(int) -> lastIndexOf
    int[] toArray(int,int) -> toArray
    int[] toArray(int[],int,int) -> toArray
    int[] toArray(int[],int,int,int) -> toArray
    boolean forEachDescending(gnu.trove.procedure.TIntProcedure) -> forEachDescending
    int binarySearch(int) -> binarySearch
    int binarySearch(int,int,int) -> binarySearch
    int indexOf(int,int) -> indexOf
    int lastIndexOf(int,int) -> lastIndexOf
    gnu.trove.list.TIntList grep(gnu.trove.procedure.TIntProcedure) -> grep
    gnu.trove.list.TIntList inverseGrep(gnu.trove.procedure.TIntProcedure) -> inverseGrep
    int max() -> max
    int min() -> min
    int sum() -> sum
    gnu.trove.list.TIntList subList(int,int) -> subList
    java.lang.Object readResolve() -> readResolve
    void add(int[]) -> add
    void add(int[],int,int) -> add
    int removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void insert(int,int) -> insert
    void insert(int,int[]) -> insert
    void insert(int,int[],int,int) -> insert
    int set(int,int) -> set
    void set(int,int[]) -> set
    void set(int,int[],int,int) -> set
    int replace(int,int) -> replace
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(int) -> fill
    void fill(int,int,int) -> fill
gnu.trove.impl.unmodifiable.TUnmodifiableIntLongMap -> gnu.trove.impl.unmodifiable.TUnmodifiableIntLongMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntLongMap m -> m
    gnu.trove.set.TIntSet keySet -> a
    gnu.trove.TLongCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(int) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(int) -> get
    long put(int,long) -> put
    long remove(int) -> remove
    void putAll(gnu.trove.map.TIntLongMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntLongProcedure) -> forEachEntry
    gnu.trove.iterator.TIntLongIterator iterator() -> iterator
    long putIfAbsent(int,long) -> putIfAbsent
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntLongProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,long) -> adjustValue
    long adjustOrPutValue(int,long,long) -> adjustOrPutValue
    gnu.trove.map.TIntLongMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableIntLongMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableIntLongMap$1 -> gnu.trove.impl.unmodifiable.aq:
    gnu.trove.iterator.TIntLongIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableIntLongMap this$0 -> b
    int key() -> a
    long value() -> ap_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap -> gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntObjectMap m -> m
    gnu.trove.set.TIntSet keySet -> a
    java.util.Collection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(int) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(int) -> get
    java.lang.Object put(int,java.lang.Object) -> put
    java.lang.Object remove(int) -> remove
    void putAll(gnu.trove.map.TIntObjectMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int getNoEntryKey() -> getNoEntryKey
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntObjectProcedure) -> forEachEntry
    gnu.trove.iterator.TIntObjectIterator iterator() -> iterator
    java.lang.Object putIfAbsent(int,java.lang.Object) -> putIfAbsent
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntObjectProcedure) -> retainEntries
    gnu.trove.map.TIntObjectMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap$1 -> gnu.trove.impl.unmodifiable.ar:
    gnu.trove.iterator.TIntObjectIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableIntObjectMap this$0 -> b
    int key() -> a
    java.lang.Object value() -> aq_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableIntSet -> gnu.trove.impl.unmodifiable.TUnmodifiableIntSet:
    long serialVersionUID -> serialVersionUID
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
gnu.trove.impl.unmodifiable.TUnmodifiableIntShortMap -> gnu.trove.impl.unmodifiable.TUnmodifiableIntShortMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TIntShortMap m -> m
    gnu.trove.set.TIntSet keySet -> a
    gnu.trove.TShortCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(int) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(int) -> get
    short put(int,short) -> put
    short remove(int) -> remove
    void putAll(gnu.trove.map.TIntShortMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntShortProcedure) -> forEachEntry
    gnu.trove.iterator.TIntShortIterator iterator() -> iterator
    short putIfAbsent(int,short) -> putIfAbsent
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntShortProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,short) -> adjustValue
    short adjustOrPutValue(int,short,short) -> adjustOrPutValue
    gnu.trove.map.TIntShortMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableIntShortMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableIntShortMap$1 -> gnu.trove.impl.unmodifiable.as:
    gnu.trove.iterator.TIntShortIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableIntShortMap this$0 -> b
    int key() -> a
    short value() -> ar_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableLongByteMap -> gnu.trove.impl.unmodifiable.TUnmodifiableLongByteMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongByteMap m -> m
    gnu.trove.set.TLongSet keySet -> a
    gnu.trove.TByteCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(long) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(long) -> get
    byte put(long,byte) -> put
    byte remove(long) -> remove
    void putAll(gnu.trove.map.TLongByteMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    long getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongByteProcedure) -> forEachEntry
    gnu.trove.iterator.TLongByteIterator iterator() -> iterator
    byte putIfAbsent(long,byte) -> putIfAbsent
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongByteProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,byte) -> adjustValue
    byte adjustOrPutValue(long,byte,byte) -> adjustOrPutValue
    gnu.trove.map.TLongByteMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableLongByteMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableLongByteMap$1 -> gnu.trove.impl.unmodifiable.at:
    gnu.trove.iterator.TLongByteIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableLongByteMap this$0 -> b
    long key() -> a
    byte value() -> as_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableLongCharMap -> gnu.trove.impl.unmodifiable.TUnmodifiableLongCharMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongCharMap m -> m
    gnu.trove.set.TLongSet keySet -> a
    gnu.trove.TCharCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(long) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(long) -> get
    char put(long,char) -> put
    char remove(long) -> remove
    void putAll(gnu.trove.map.TLongCharMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    long getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongCharProcedure) -> forEachEntry
    gnu.trove.iterator.TLongCharIterator iterator() -> iterator
    char putIfAbsent(long,char) -> putIfAbsent
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongCharProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,char) -> adjustValue
    char adjustOrPutValue(long,char,char) -> adjustOrPutValue
    gnu.trove.map.TLongCharMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableLongCharMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableLongCharMap$1 -> gnu.trove.impl.unmodifiable.au:
    gnu.trove.iterator.TLongCharIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableLongCharMap this$0 -> b
    long key() -> a
    char value() -> at_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableLongCollection -> gnu.trove.impl.unmodifiable.TUnmodifiableLongCollection:
    long serialVersionUID -> serialVersionUID
    gnu.trove.TLongCollection c -> c
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    java.lang.String toString() -> toString
    long getNoEntryValue() -> getNoEntryValue
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    void clear() -> clear
gnu.trove.impl.unmodifiable.TUnmodifiableLongCollection$1 -> gnu.trove.impl.unmodifiable.av:
    gnu.trove.iterator.TLongIterator i -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableLongCollection this$0 -> b
    boolean hasNext() -> hasNext
    long next() -> a
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableLongDoubleMap -> gnu.trove.impl.unmodifiable.TUnmodifiableLongDoubleMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongDoubleMap m -> m
    gnu.trove.set.TLongSet keySet -> a
    gnu.trove.TDoubleCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(long) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(long) -> get
    double put(long,double) -> put
    double remove(long) -> remove
    void putAll(gnu.trove.map.TLongDoubleMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    long getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongDoubleProcedure) -> forEachEntry
    gnu.trove.iterator.TLongDoubleIterator iterator() -> iterator
    double putIfAbsent(long,double) -> putIfAbsent
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongDoubleProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,double) -> adjustValue
    double adjustOrPutValue(long,double,double) -> adjustOrPutValue
    gnu.trove.map.TLongDoubleMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableLongDoubleMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableLongDoubleMap$1 -> gnu.trove.impl.unmodifiable.aw:
    gnu.trove.iterator.TLongDoubleIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableLongDoubleMap this$0 -> b
    long key() -> a
    double value() -> au_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableLongFloatMap -> gnu.trove.impl.unmodifiable.TUnmodifiableLongFloatMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongFloatMap m -> m
    gnu.trove.set.TLongSet keySet -> a
    gnu.trove.TFloatCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(long) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(long) -> get
    float put(long,float) -> put
    float remove(long) -> remove
    void putAll(gnu.trove.map.TLongFloatMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    long getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongFloatProcedure) -> forEachEntry
    gnu.trove.iterator.TLongFloatIterator iterator() -> iterator
    float putIfAbsent(long,float) -> putIfAbsent
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongFloatProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,float) -> adjustValue
    float adjustOrPutValue(long,float,float) -> adjustOrPutValue
    gnu.trove.map.TLongFloatMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableLongFloatMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableLongFloatMap$1 -> gnu.trove.impl.unmodifiable.ax:
    gnu.trove.iterator.TLongFloatIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableLongFloatMap this$0 -> b
    long key() -> a
    float value() -> av_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableLongIntMap -> gnu.trove.impl.unmodifiable.TUnmodifiableLongIntMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongIntMap m -> m
    gnu.trove.set.TLongSet keySet -> a
    gnu.trove.TIntCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(long) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(long) -> get
    int put(long,int) -> put
    int remove(long) -> remove
    void putAll(gnu.trove.map.TLongIntMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    long getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongIntProcedure) -> forEachEntry
    gnu.trove.iterator.TLongIntIterator iterator() -> iterator
    int putIfAbsent(long,int) -> putIfAbsent
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongIntProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,int) -> adjustValue
    int adjustOrPutValue(long,int,int) -> adjustOrPutValue
    gnu.trove.map.TLongIntMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableLongIntMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableLongIntMap$1 -> gnu.trove.impl.unmodifiable.ay:
    gnu.trove.iterator.TLongIntIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableLongIntMap this$0 -> b
    long key() -> a
    int value() -> aw_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableLongList -> gnu.trove.impl.unmodifiable.TUnmodifiableLongList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TLongList list -> list
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    long get(int) -> get
    int indexOf(long) -> indexOf
    int lastIndexOf(long) -> lastIndexOf
    long[] toArray(int,int) -> toArray
    long[] toArray(long[],int,int) -> toArray
    long[] toArray(long[],int,int,int) -> toArray
    boolean forEachDescending(gnu.trove.procedure.TLongProcedure) -> forEachDescending
    int binarySearch(long) -> binarySearch
    int binarySearch(long,int,int) -> binarySearch
    int indexOf(int,long) -> indexOf
    int lastIndexOf(int,long) -> lastIndexOf
    gnu.trove.list.TLongList grep(gnu.trove.procedure.TLongProcedure) -> grep
    gnu.trove.list.TLongList inverseGrep(gnu.trove.procedure.TLongProcedure) -> inverseGrep
    long max() -> max
    long min() -> min
    long sum() -> sum
    gnu.trove.list.TLongList subList(int,int) -> subList
    java.lang.Object readResolve() -> readResolve
    void add(long[]) -> add
    void add(long[],int,int) -> add
    long removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void insert(int,long) -> insert
    void insert(int,long[]) -> insert
    void insert(int,long[],int,int) -> insert
    long set(int,long) -> set
    void set(int,long[]) -> set
    void set(int,long[],int,int) -> set
    long replace(int,long) -> replace
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(long) -> fill
    void fill(int,int,long) -> fill
gnu.trove.impl.unmodifiable.TUnmodifiableLongLongMap -> gnu.trove.impl.unmodifiable.TUnmodifiableLongLongMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongLongMap m -> m
    gnu.trove.set.TLongSet keySet -> a
    gnu.trove.TLongCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(long) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(long) -> get
    long put(long,long) -> put
    long remove(long) -> remove
    void putAll(gnu.trove.map.TLongLongMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    long getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongLongProcedure) -> forEachEntry
    gnu.trove.iterator.TLongLongIterator iterator() -> iterator
    long putIfAbsent(long,long) -> putIfAbsent
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongLongProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,long) -> adjustValue
    long adjustOrPutValue(long,long,long) -> adjustOrPutValue
    gnu.trove.map.TLongLongMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableLongLongMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableLongLongMap$1 -> gnu.trove.impl.unmodifiable.az:
    gnu.trove.iterator.TLongLongIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableLongLongMap this$0 -> b
    long key() -> a
    long value() -> ax_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableLongObjectMap -> gnu.trove.impl.unmodifiable.TUnmodifiableLongObjectMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongObjectMap m -> m
    gnu.trove.set.TLongSet keySet -> a
    java.util.Collection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(long) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(long) -> get
    java.lang.Object put(long,java.lang.Object) -> put
    java.lang.Object remove(long) -> remove
    void putAll(gnu.trove.map.TLongObjectMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    long getNoEntryKey() -> getNoEntryKey
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongObjectProcedure) -> forEachEntry
    gnu.trove.iterator.TLongObjectIterator iterator() -> iterator
    java.lang.Object putIfAbsent(long,java.lang.Object) -> putIfAbsent
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongObjectProcedure) -> retainEntries
    gnu.trove.map.TLongObjectMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableLongObjectMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableLongObjectMap$1 -> gnu.trove.impl.unmodifiable.ba:
    gnu.trove.iterator.TLongObjectIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableLongObjectMap this$0 -> b
    long key() -> a
    java.lang.Object value() -> ay_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableLongSet -> gnu.trove.impl.unmodifiable.TUnmodifiableLongSet:
    long serialVersionUID -> serialVersionUID
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap -> gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TLongShortMap m -> m
    gnu.trove.set.TLongSet keySet -> a
    gnu.trove.TShortCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(long) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(long) -> get
    short put(long,short) -> put
    short remove(long) -> remove
    void putAll(gnu.trove.map.TLongShortMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    long getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongShortProcedure) -> forEachEntry
    gnu.trove.iterator.TLongShortIterator iterator() -> iterator
    short putIfAbsent(long,short) -> putIfAbsent
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongShortProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,short) -> adjustValue
    short adjustOrPutValue(long,short,short) -> adjustOrPutValue
    gnu.trove.map.TLongShortMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap$1 -> gnu.trove.impl.unmodifiable.bb:
    gnu.trove.iterator.TLongShortIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableLongShortMap this$0 -> b
    long key() -> a
    short value() -> az_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableObjectByteMap -> gnu.trove.impl.unmodifiable.TUnmodifiableObjectByteMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectByteMap m -> m
    java.util.Set keySet -> a
    gnu.trove.TByteCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(java.lang.Object) -> get
    byte put(java.lang.Object,byte) -> put
    byte remove(java.lang.Object) -> remove
    void putAll(gnu.trove.map.TObjectByteMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    byte getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectByteProcedure) -> forEachEntry
    gnu.trove.iterator.TObjectByteIterator iterator() -> iterator
    byte putIfAbsent(java.lang.Object,byte) -> putIfAbsent
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectByteProcedure) -> retainEntries
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,byte) -> adjustValue
    byte adjustOrPutValue(java.lang.Object,byte,byte) -> adjustOrPutValue
    gnu.trove.map.TObjectByteMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableObjectByteMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableObjectByteMap$1 -> gnu.trove.impl.unmodifiable.bc:
    gnu.trove.iterator.TObjectByteIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableObjectByteMap this$0 -> b
    java.lang.Object key() -> a
    byte value() -> v_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableObjectCharMap -> gnu.trove.impl.unmodifiable.TUnmodifiableObjectCharMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectCharMap m -> m
    java.util.Set keySet -> a
    gnu.trove.TCharCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(java.lang.Object) -> get
    char put(java.lang.Object,char) -> put
    char remove(java.lang.Object) -> remove
    void putAll(gnu.trove.map.TObjectCharMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    char getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectCharProcedure) -> forEachEntry
    gnu.trove.iterator.TObjectCharIterator iterator() -> iterator
    char putIfAbsent(java.lang.Object,char) -> putIfAbsent
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectCharProcedure) -> retainEntries
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,char) -> adjustValue
    char adjustOrPutValue(java.lang.Object,char,char) -> adjustOrPutValue
    gnu.trove.map.TObjectCharMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableObjectCharMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableObjectCharMap$1 -> gnu.trove.impl.unmodifiable.bd:
    gnu.trove.iterator.TObjectCharIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableObjectCharMap this$0 -> b
    java.lang.Object key() -> a
    char value() -> x_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap -> gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectDoubleMap m -> m
    java.util.Set keySet -> a
    gnu.trove.TDoubleCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(java.lang.Object) -> get
    double put(java.lang.Object,double) -> put
    double remove(java.lang.Object) -> remove
    void putAll(gnu.trove.map.TObjectDoubleMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    double getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectDoubleProcedure) -> forEachEntry
    gnu.trove.iterator.TObjectDoubleIterator iterator() -> iterator
    double putIfAbsent(java.lang.Object,double) -> putIfAbsent
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectDoubleProcedure) -> retainEntries
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,double) -> adjustValue
    double adjustOrPutValue(java.lang.Object,double,double) -> adjustOrPutValue
    gnu.trove.map.TObjectDoubleMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap$1 -> gnu.trove.impl.unmodifiable.be:
    gnu.trove.iterator.TObjectDoubleIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableObjectDoubleMap this$0 -> b
    java.lang.Object key() -> a
    double value() -> y_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap -> gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectFloatMap m -> m
    java.util.Set keySet -> a
    gnu.trove.TFloatCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(java.lang.Object) -> get
    float put(java.lang.Object,float) -> put
    float remove(java.lang.Object) -> remove
    void putAll(gnu.trove.map.TObjectFloatMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    float getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectFloatProcedure) -> forEachEntry
    gnu.trove.iterator.TObjectFloatIterator iterator() -> iterator
    float putIfAbsent(java.lang.Object,float) -> putIfAbsent
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectFloatProcedure) -> retainEntries
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,float) -> adjustValue
    float adjustOrPutValue(java.lang.Object,float,float) -> adjustOrPutValue
    gnu.trove.map.TObjectFloatMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap$1 -> gnu.trove.impl.unmodifiable.bf:
    gnu.trove.iterator.TObjectFloatIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableObjectFloatMap this$0 -> b
    java.lang.Object key() -> a
    float value() -> z_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableObjectIntMap -> gnu.trove.impl.unmodifiable.TUnmodifiableObjectIntMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectIntMap m -> m
    java.util.Set keySet -> a
    gnu.trove.TIntCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(java.lang.Object) -> get
    int put(java.lang.Object,int) -> put
    int remove(java.lang.Object) -> remove
    void putAll(gnu.trove.map.TObjectIntMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectIntProcedure) -> forEachEntry
    gnu.trove.iterator.TObjectIntIterator iterator() -> iterator
    int putIfAbsent(java.lang.Object,int) -> putIfAbsent
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectIntProcedure) -> retainEntries
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,int) -> adjustValue
    int adjustOrPutValue(java.lang.Object,int,int) -> adjustOrPutValue
    gnu.trove.map.TObjectIntMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableObjectIntMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableObjectIntMap$1 -> gnu.trove.impl.unmodifiable.bg:
    gnu.trove.iterator.TObjectIntIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableObjectIntMap this$0 -> b
    java.lang.Object key() -> a
    int value() -> A_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableObjectLongMap -> gnu.trove.impl.unmodifiable.TUnmodifiableObjectLongMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectLongMap m -> m
    java.util.Set keySet -> a
    gnu.trove.TLongCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(java.lang.Object) -> get
    long put(java.lang.Object,long) -> put
    long remove(java.lang.Object) -> remove
    void putAll(gnu.trove.map.TObjectLongMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    long getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectLongProcedure) -> forEachEntry
    gnu.trove.iterator.TObjectLongIterator iterator() -> iterator
    long putIfAbsent(java.lang.Object,long) -> putIfAbsent
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectLongProcedure) -> retainEntries
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,long) -> adjustValue
    long adjustOrPutValue(java.lang.Object,long,long) -> adjustOrPutValue
    gnu.trove.map.TObjectLongMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableObjectLongMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableObjectLongMap$1 -> gnu.trove.impl.unmodifiable.bh:
    gnu.trove.iterator.TObjectLongIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableObjectLongMap this$0 -> b
    java.lang.Object key() -> a
    long value() -> B_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableObjectShortMap -> gnu.trove.impl.unmodifiable.TUnmodifiableObjectShortMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TObjectShortMap m -> m
    java.util.Set keySet -> a
    gnu.trove.TShortCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(java.lang.Object) -> get
    short put(java.lang.Object,short) -> put
    short remove(java.lang.Object) -> remove
    void putAll(gnu.trove.map.TObjectShortMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    short getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectShortProcedure) -> forEachEntry
    gnu.trove.iterator.TObjectShortIterator iterator() -> iterator
    short putIfAbsent(java.lang.Object,short) -> putIfAbsent
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectShortProcedure) -> retainEntries
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,short) -> adjustValue
    short adjustOrPutValue(java.lang.Object,short,short) -> adjustOrPutValue
    gnu.trove.map.TObjectShortMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableObjectShortMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableObjectShortMap$1 -> gnu.trove.impl.unmodifiable.bi:
    gnu.trove.iterator.TObjectShortIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableObjectShortMap this$0 -> b
    java.lang.Object key() -> a
    short value() -> C_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessByteList -> gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessByteList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TByteList subList(int,int) -> subList
    java.lang.Object writeReplace() -> writeReplace
gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessCharList -> gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessCharList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TCharList subList(int,int) -> subList
    java.lang.Object writeReplace() -> writeReplace
gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessDoubleList -> gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessDoubleList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TDoubleList subList(int,int) -> subList
    java.lang.Object writeReplace() -> writeReplace
gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessFloatList -> gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessFloatList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TFloatList subList(int,int) -> subList
    java.lang.Object writeReplace() -> writeReplace
gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessIntList -> gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessIntList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TIntList subList(int,int) -> subList
    java.lang.Object writeReplace() -> writeReplace
gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessLongList -> gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessLongList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TLongList subList(int,int) -> subList
    java.lang.Object writeReplace() -> writeReplace
gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessShortList -> gnu.trove.impl.unmodifiable.TUnmodifiableRandomAccessShortList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TShortList subList(int,int) -> subList
    java.lang.Object writeReplace() -> writeReplace
gnu.trove.impl.unmodifiable.TUnmodifiableShortByteMap -> gnu.trove.impl.unmodifiable.TUnmodifiableShortByteMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortByteMap m -> m
    gnu.trove.set.TShortSet keySet -> a
    gnu.trove.TByteCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(short) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(short) -> get
    byte put(short,byte) -> put
    byte remove(short) -> remove
    void putAll(gnu.trove.map.TShortByteMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    short getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortByteProcedure) -> forEachEntry
    gnu.trove.iterator.TShortByteIterator iterator() -> iterator
    byte putIfAbsent(short,byte) -> putIfAbsent
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortByteProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,byte) -> adjustValue
    byte adjustOrPutValue(short,byte,byte) -> adjustOrPutValue
    gnu.trove.map.TShortByteMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableShortByteMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableShortByteMap$1 -> gnu.trove.impl.unmodifiable.bj:
    gnu.trove.iterator.TShortByteIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableShortByteMap this$0 -> b
    short key() -> a
    byte value() -> aA_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableShortCharMap -> gnu.trove.impl.unmodifiable.TUnmodifiableShortCharMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortCharMap m -> m
    gnu.trove.set.TShortSet keySet -> a
    gnu.trove.TCharCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(short) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(short) -> get
    char put(short,char) -> put
    char remove(short) -> remove
    void putAll(gnu.trove.map.TShortCharMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    short getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortCharProcedure) -> forEachEntry
    gnu.trove.iterator.TShortCharIterator iterator() -> iterator
    char putIfAbsent(short,char) -> putIfAbsent
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortCharProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,char) -> adjustValue
    char adjustOrPutValue(short,char,char) -> adjustOrPutValue
    gnu.trove.map.TShortCharMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableShortCharMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableShortCharMap$1 -> gnu.trove.impl.unmodifiable.bk:
    gnu.trove.iterator.TShortCharIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableShortCharMap this$0 -> b
    short key() -> a
    char value() -> aB_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection -> gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection:
    long serialVersionUID -> serialVersionUID
    gnu.trove.TShortCollection c -> c
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    java.lang.String toString() -> toString
    short getNoEntryValue() -> getNoEntryValue
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    void clear() -> clear
gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection$1 -> gnu.trove.impl.unmodifiable.bl:
    gnu.trove.iterator.TShortIterator i -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableShortCollection this$0 -> b
    boolean hasNext() -> hasNext
    short next() -> a
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap -> gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortDoubleMap m -> m
    gnu.trove.set.TShortSet keySet -> a
    gnu.trove.TDoubleCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(short) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(short) -> get
    double put(short,double) -> put
    double remove(short) -> remove
    void putAll(gnu.trove.map.TShortDoubleMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    short getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortDoubleProcedure) -> forEachEntry
    gnu.trove.iterator.TShortDoubleIterator iterator() -> iterator
    double putIfAbsent(short,double) -> putIfAbsent
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortDoubleProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,double) -> adjustValue
    double adjustOrPutValue(short,double,double) -> adjustOrPutValue
    gnu.trove.map.TShortDoubleMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap$1 -> gnu.trove.impl.unmodifiable.bm:
    gnu.trove.iterator.TShortDoubleIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableShortDoubleMap this$0 -> b
    short key() -> a
    double value() -> aC_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap -> gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortFloatMap m -> m
    gnu.trove.set.TShortSet keySet -> a
    gnu.trove.TFloatCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(short) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(short) -> get
    float put(short,float) -> put
    float remove(short) -> remove
    void putAll(gnu.trove.map.TShortFloatMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    short getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortFloatProcedure) -> forEachEntry
    gnu.trove.iterator.TShortFloatIterator iterator() -> iterator
    float putIfAbsent(short,float) -> putIfAbsent
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortFloatProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,float) -> adjustValue
    float adjustOrPutValue(short,float,float) -> adjustOrPutValue
    gnu.trove.map.TShortFloatMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap$1 -> gnu.trove.impl.unmodifiable.bn:
    gnu.trove.iterator.TShortFloatIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableShortFloatMap this$0 -> b
    short key() -> a
    float value() -> aD_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableShortIntMap -> gnu.trove.impl.unmodifiable.TUnmodifiableShortIntMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortIntMap m -> m
    gnu.trove.set.TShortSet keySet -> a
    gnu.trove.TIntCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(short) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(short) -> get
    int put(short,int) -> put
    int remove(short) -> remove
    void putAll(gnu.trove.map.TShortIntMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    short getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortIntProcedure) -> forEachEntry
    gnu.trove.iterator.TShortIntIterator iterator() -> iterator
    int putIfAbsent(short,int) -> putIfAbsent
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortIntProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,int) -> adjustValue
    int adjustOrPutValue(short,int,int) -> adjustOrPutValue
    gnu.trove.map.TShortIntMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableShortIntMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableShortIntMap$1 -> gnu.trove.impl.unmodifiable.bo:
    gnu.trove.iterator.TShortIntIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableShortIntMap this$0 -> b
    short key() -> a
    int value() -> aE_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableShortList -> gnu.trove.impl.unmodifiable.TUnmodifiableShortList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TShortList list -> list
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    short get(int) -> get
    int indexOf(short) -> indexOf
    int lastIndexOf(short) -> lastIndexOf
    short[] toArray(int,int) -> toArray
    short[] toArray(short[],int,int) -> toArray
    short[] toArray(short[],int,int,int) -> toArray
    boolean forEachDescending(gnu.trove.procedure.TShortProcedure) -> forEachDescending
    int binarySearch(short) -> binarySearch
    int binarySearch(short,int,int) -> binarySearch
    int indexOf(int,short) -> indexOf
    int lastIndexOf(int,short) -> lastIndexOf
    gnu.trove.list.TShortList grep(gnu.trove.procedure.TShortProcedure) -> grep
    gnu.trove.list.TShortList inverseGrep(gnu.trove.procedure.TShortProcedure) -> inverseGrep
    short max() -> max
    short min() -> min
    short sum() -> sum
    gnu.trove.list.TShortList subList(int,int) -> subList
    java.lang.Object readResolve() -> readResolve
    void add(short[]) -> add
    void add(short[],int,int) -> add
    short removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void insert(int,short) -> insert
    void insert(int,short[]) -> insert
    void insert(int,short[],int,int) -> insert
    short set(int,short) -> set
    void set(int,short[]) -> set
    void set(int,short[],int,int) -> set
    short replace(int,short) -> replace
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(short) -> fill
    void fill(int,int,short) -> fill
gnu.trove.impl.unmodifiable.TUnmodifiableShortLongMap -> gnu.trove.impl.unmodifiable.TUnmodifiableShortLongMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortLongMap m -> m
    gnu.trove.set.TShortSet keySet -> a
    gnu.trove.TLongCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(short) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(short) -> get
    long put(short,long) -> put
    long remove(short) -> remove
    void putAll(gnu.trove.map.TShortLongMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    short getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortLongProcedure) -> forEachEntry
    gnu.trove.iterator.TShortLongIterator iterator() -> iterator
    long putIfAbsent(short,long) -> putIfAbsent
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortLongProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,long) -> adjustValue
    long adjustOrPutValue(short,long,long) -> adjustOrPutValue
    gnu.trove.map.TShortLongMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableShortLongMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableShortLongMap$1 -> gnu.trove.impl.unmodifiable.bp:
    gnu.trove.iterator.TShortLongIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableShortLongMap this$0 -> b
    short key() -> a
    long value() -> aF_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap -> gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortObjectMap m -> m
    gnu.trove.set.TShortSet keySet -> a
    java.util.Collection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(short) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(short) -> get
    java.lang.Object put(short,java.lang.Object) -> put
    java.lang.Object remove(short) -> remove
    void putAll(gnu.trove.map.TShortObjectMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    short getNoEntryKey() -> getNoEntryKey
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortObjectProcedure) -> forEachEntry
    gnu.trove.iterator.TShortObjectIterator iterator() -> iterator
    java.lang.Object putIfAbsent(short,java.lang.Object) -> putIfAbsent
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortObjectProcedure) -> retainEntries
    gnu.trove.map.TShortObjectMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap$1 -> gnu.trove.impl.unmodifiable.bq:
    gnu.trove.iterator.TShortObjectIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableShortObjectMap this$0 -> b
    short key() -> a
    java.lang.Object value() -> aG_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.impl.unmodifiable.TUnmodifiableShortSet -> gnu.trove.impl.unmodifiable.TUnmodifiableShortSet:
    long serialVersionUID -> serialVersionUID
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap -> gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.map.TShortShortMap m -> m
    gnu.trove.set.TShortSet keySet -> a
    gnu.trove.TShortCollection values -> b
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(short) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(short) -> get
    short put(short,short) -> put
    short remove(short) -> remove
    void putAll(gnu.trove.map.TShortShortMap) -> putAll
    void putAll(java.util.Map) -> putAll
    void clear() -> clear
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    short getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortShortProcedure) -> forEachEntry
    gnu.trove.iterator.TShortShortIterator iterator() -> iterator
    short putIfAbsent(short,short) -> putIfAbsent
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortShortProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,short) -> adjustValue
    short adjustOrPutValue(short,short,short) -> adjustOrPutValue
    gnu.trove.map.TShortShortMap access$000(gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap) -> access$000
gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap$1 -> gnu.trove.impl.unmodifiable.br:
    gnu.trove.iterator.TShortShortIterator iter -> a
    gnu.trove.impl.unmodifiable.TUnmodifiableShortShortMap this$0 -> b
    short key() -> a
    short value() -> aH_
    void advance() -> c
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.iterator.TAdvancingIterator -> gnu.trove.b.a:
    void advance() -> c
gnu.trove.iterator.TByteByteIterator -> gnu.trove.b.b:
    byte key() -> a
    byte value() -> D_
gnu.trove.iterator.TByteCharIterator -> gnu.trove.b.c:
    byte key() -> a
    char value() -> F_
gnu.trove.iterator.TByteDoubleIterator -> gnu.trove.b.d:
    byte key() -> a
    double value() -> G_
gnu.trove.iterator.TByteFloatIterator -> gnu.trove.b.e:
    byte key() -> a
    float value() -> H_
gnu.trove.iterator.TByteIntIterator -> gnu.trove.b.f:
    byte key() -> a
    int value() -> I_
gnu.trove.iterator.TByteIterator -> gnu.trove.b.g:
    byte next() -> a
gnu.trove.iterator.TByteLongIterator -> gnu.trove.b.h:
    byte key() -> a
    long value() -> J_
gnu.trove.iterator.TByteObjectIterator -> gnu.trove.b.i:
    byte key() -> a
    java.lang.Object value() -> K_
gnu.trove.iterator.TByteShortIterator -> gnu.trove.b.j:
    byte key() -> a
    short value() -> L_
gnu.trove.iterator.TCharByteIterator -> gnu.trove.b.k:
    char key() -> a
    byte value() -> M_
gnu.trove.iterator.TCharCharIterator -> gnu.trove.b.l:
    char key() -> a
    char value() -> N_
gnu.trove.iterator.TCharDoubleIterator -> gnu.trove.b.m:
    char key() -> a
    double value() -> O_
gnu.trove.iterator.TCharFloatIterator -> gnu.trove.b.n:
    char key() -> a
    float value() -> P_
gnu.trove.iterator.TCharIntIterator -> gnu.trove.b.o:
    char key() -> a
    int value() -> Q_
gnu.trove.iterator.TCharIterator -> gnu.trove.b.p:
    char next() -> a
gnu.trove.iterator.TCharLongIterator -> gnu.trove.b.q:
    char key() -> a
    long value() -> R_
gnu.trove.iterator.TCharObjectIterator -> gnu.trove.b.r:
    char key() -> a
    java.lang.Object value() -> S_
gnu.trove.iterator.TCharShortIterator -> gnu.trove.b.s:
    char key() -> a
    short value() -> T_
gnu.trove.iterator.TDoubleByteIterator -> gnu.trove.b.t:
    double key() -> a
    byte value() -> U_
gnu.trove.iterator.TDoubleCharIterator -> gnu.trove.b.u:
    double key() -> a
    char value() -> V_
gnu.trove.iterator.TDoubleDoubleIterator -> gnu.trove.b.v:
    double key() -> a
    double value() -> W_
gnu.trove.iterator.TDoubleFloatIterator -> gnu.trove.b.w:
    double key() -> a
    float value() -> X_
gnu.trove.iterator.TDoubleIntIterator -> gnu.trove.b.x:
    double key() -> a
    int value() -> Y_
gnu.trove.iterator.TDoubleIterator -> gnu.trove.b.y:
    double next() -> a
gnu.trove.iterator.TDoubleLongIterator -> gnu.trove.b.z:
    double key() -> a
    long value() -> Z_
gnu.trove.iterator.TDoubleObjectIterator -> gnu.trove.b.aa:
    double key() -> a
    java.lang.Object value() -> aa_
gnu.trove.iterator.TDoubleShortIterator -> gnu.trove.b.ab:
    double key() -> a
    short value() -> ab_
gnu.trove.iterator.TFloatByteIterator -> gnu.trove.b.ac:
    float key() -> a
    byte value() -> ac_
gnu.trove.iterator.TFloatCharIterator -> gnu.trove.b.ad:
    float key() -> a
    char value() -> ad_
gnu.trove.iterator.TFloatDoubleIterator -> gnu.trove.b.ae:
    float key() -> a
    double value() -> ae_
gnu.trove.iterator.TFloatFloatIterator -> gnu.trove.b.af:
    float key() -> a
    float value() -> af_
gnu.trove.iterator.TFloatIntIterator -> gnu.trove.b.ag:
    float key() -> a
    int value() -> ag_
gnu.trove.iterator.TFloatIterator -> gnu.trove.b.ah:
    float next() -> a
gnu.trove.iterator.TFloatLongIterator -> gnu.trove.b.ai:
    float key() -> a
    long value() -> ah_
gnu.trove.iterator.TFloatObjectIterator -> gnu.trove.b.aj:
    float key() -> a
    java.lang.Object value() -> ai_
gnu.trove.iterator.TFloatShortIterator -> gnu.trove.b.ak:
    float key() -> a
    short value() -> aj_
gnu.trove.iterator.TIntByteIterator -> gnu.trove.b.al:
    int key() -> a
    byte value() -> ak_
gnu.trove.iterator.TIntCharIterator -> gnu.trove.b.am:
    int key() -> a
    char value() -> al_
gnu.trove.iterator.TIntDoubleIterator -> gnu.trove.b.an:
    int key() -> a
    double value() -> am_
gnu.trove.iterator.TIntFloatIterator -> gnu.trove.b.ao:
    int key() -> a
    float value() -> an_
gnu.trove.iterator.TIntIntIterator -> gnu.trove.b.ap:
    int key() -> a
    int value() -> ao_
gnu.trove.iterator.TIntIterator -> gnu.trove.b.aq:
    int next() -> a
gnu.trove.iterator.TIntLongIterator -> gnu.trove.b.ar:
    int key() -> a
    long value() -> ap_
gnu.trove.iterator.TIntObjectIterator -> gnu.trove.b.as:
    int key() -> a
    java.lang.Object value() -> aq_
gnu.trove.iterator.TIntShortIterator -> gnu.trove.b.at:
    int key() -> a
    short value() -> ar_
gnu.trove.iterator.TIterator -> gnu.trove.b.au:
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.iterator.TLongByteIterator -> gnu.trove.b.av:
    long key() -> a
    byte value() -> as_
gnu.trove.iterator.TLongCharIterator -> gnu.trove.b.aw:
    long key() -> a
    char value() -> at_
gnu.trove.iterator.TLongDoubleIterator -> gnu.trove.b.ax:
    long key() -> a
    double value() -> au_
gnu.trove.iterator.TLongFloatIterator -> gnu.trove.b.ay:
    long key() -> a
    float value() -> av_
gnu.trove.iterator.TLongIntIterator -> gnu.trove.b.az:
    long key() -> a
    int value() -> aw_
gnu.trove.iterator.TLongIterator -> gnu.trove.b.ba:
    long next() -> a
gnu.trove.iterator.TLongLongIterator -> gnu.trove.b.bb:
    long key() -> a
    long value() -> ax_
gnu.trove.iterator.TLongObjectIterator -> gnu.trove.b.bc:
    long key() -> a
    java.lang.Object value() -> ay_
gnu.trove.iterator.TLongShortIterator -> gnu.trove.b.bd:
    long key() -> a
    short value() -> az_
gnu.trove.iterator.TObjectByteIterator -> gnu.trove.b.be:
    java.lang.Object key() -> a
    byte value() -> v_
gnu.trove.iterator.TObjectCharIterator -> gnu.trove.b.bf:
    java.lang.Object key() -> a
    char value() -> x_
gnu.trove.iterator.TObjectDoubleIterator -> gnu.trove.b.bg:
    java.lang.Object key() -> a
    double value() -> y_
gnu.trove.iterator.TObjectFloatIterator -> gnu.trove.b.bh:
    java.lang.Object key() -> a
    float value() -> z_
gnu.trove.iterator.TObjectIntIterator -> gnu.trove.b.bi:
    java.lang.Object key() -> a
    int value() -> A_
gnu.trove.iterator.TObjectLongIterator -> gnu.trove.b.bj:
    java.lang.Object key() -> a
    long value() -> B_
gnu.trove.iterator.TObjectShortIterator -> gnu.trove.b.bk:
    java.lang.Object key() -> a
    short value() -> C_
gnu.trove.iterator.TPrimitiveIterator -> gnu.trove.b.bl:
gnu.trove.iterator.TShortByteIterator -> gnu.trove.b.bm:
    short key() -> a
    byte value() -> aA_
gnu.trove.iterator.TShortCharIterator -> gnu.trove.b.bn:
    short key() -> a
    char value() -> aB_
gnu.trove.iterator.TShortDoubleIterator -> gnu.trove.b.bo:
    short key() -> a
    double value() -> aC_
gnu.trove.iterator.TShortFloatIterator -> gnu.trove.b.bp:
    short key() -> a
    float value() -> aD_
gnu.trove.iterator.TShortIntIterator -> gnu.trove.b.bq:
    short key() -> a
    int value() -> aE_
gnu.trove.iterator.TShortIterator -> gnu.trove.b.br:
    short next() -> a
gnu.trove.iterator.TShortLongIterator -> gnu.trove.b.bs:
    short key() -> a
    long value() -> aF_
gnu.trove.iterator.TShortObjectIterator -> gnu.trove.b.bt:
    short key() -> a
    java.lang.Object value() -> aG_
gnu.trove.iterator.TShortShortIterator -> gnu.trove.b.bu:
    short key() -> a
    short value() -> aH_
gnu.trove.iterator.hash.TObjectHashIterator -> gnu.trove.b.a.a:
    gnu.trove.impl.hash.TObjectHash _objectHash -> d
    java.lang.Object objectAtIndex(int) -> a
gnu.trove.list.TByteList -> gnu.trove.list.a:
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean add(byte) -> add
    void add(byte[]) -> add
    void add(byte[],int,int) -> add
    void insert(int,byte) -> insert
    void insert(int,byte[]) -> insert
    void insert(int,byte[],int,int) -> insert
    byte get(int) -> get
    byte set(int,byte) -> set
    void set(int,byte[]) -> set
    void set(int,byte[],int,int) -> set
    byte replace(int,byte) -> replace
    byte removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    gnu.trove.list.TByteList subList(int,int) -> subList
    byte[] toArray() -> toArray
    byte[] toArray(int,int) -> toArray
    byte[] toArray(byte[],int,int) -> toArray
    byte[] toArray(byte[],int,int,int) -> toArray
    boolean forEachDescending(gnu.trove.procedure.TByteProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(byte) -> fill
    void fill(int,int,byte) -> fill
    int binarySearch(byte) -> binarySearch
    int binarySearch(byte,int,int) -> binarySearch
    int indexOf(byte) -> indexOf
    int indexOf(int,byte) -> indexOf
    int lastIndexOf(byte) -> lastIndexOf
    int lastIndexOf(int,byte) -> lastIndexOf
    gnu.trove.list.TByteList grep(gnu.trove.procedure.TByteProcedure) -> grep
    gnu.trove.list.TByteList inverseGrep(gnu.trove.procedure.TByteProcedure) -> inverseGrep
    byte max() -> max
    byte min() -> min
    byte sum() -> sum
gnu.trove.list.TCharList -> gnu.trove.list.b:
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean add(char) -> add
    void add(char[]) -> add
    void add(char[],int,int) -> add
    void insert(int,char) -> insert
    void insert(int,char[]) -> insert
    void insert(int,char[],int,int) -> insert
    char get(int) -> get
    char set(int,char) -> set
    void set(int,char[]) -> set
    void set(int,char[],int,int) -> set
    char replace(int,char) -> replace
    char removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    gnu.trove.list.TCharList subList(int,int) -> subList
    char[] toArray() -> toArray
    char[] toArray(int,int) -> toArray
    char[] toArray(char[],int,int) -> toArray
    char[] toArray(char[],int,int,int) -> toArray
    boolean forEachDescending(gnu.trove.procedure.TCharProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(char) -> fill
    void fill(int,int,char) -> fill
    int binarySearch(char) -> binarySearch
    int binarySearch(char,int,int) -> binarySearch
    int indexOf(char) -> indexOf
    int indexOf(int,char) -> indexOf
    int lastIndexOf(char) -> lastIndexOf
    int lastIndexOf(int,char) -> lastIndexOf
    gnu.trove.list.TCharList grep(gnu.trove.procedure.TCharProcedure) -> grep
    gnu.trove.list.TCharList inverseGrep(gnu.trove.procedure.TCharProcedure) -> inverseGrep
    char max() -> max
    char min() -> min
    char sum() -> sum
gnu.trove.list.TDoubleList -> gnu.trove.list.c:
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean add(double) -> add
    void add(double[]) -> add
    void add(double[],int,int) -> add
    void insert(int,double) -> insert
    void insert(int,double[]) -> insert
    void insert(int,double[],int,int) -> insert
    double get(int) -> get
    double set(int,double) -> set
    void set(int,double[]) -> set
    void set(int,double[],int,int) -> set
    double replace(int,double) -> replace
    double removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    gnu.trove.list.TDoubleList subList(int,int) -> subList
    double[] toArray() -> toArray
    double[] toArray(int,int) -> toArray
    double[] toArray(double[],int,int) -> toArray
    double[] toArray(double[],int,int,int) -> toArray
    boolean forEachDescending(gnu.trove.procedure.TDoubleProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(double) -> fill
    void fill(int,int,double) -> fill
    int binarySearch(double) -> binarySearch
    int binarySearch(double,int,int) -> binarySearch
    int indexOf(double) -> indexOf
    int indexOf(int,double) -> indexOf
    int lastIndexOf(double) -> lastIndexOf
    int lastIndexOf(int,double) -> lastIndexOf
    gnu.trove.list.TDoubleList grep(gnu.trove.procedure.TDoubleProcedure) -> grep
    gnu.trove.list.TDoubleList inverseGrep(gnu.trove.procedure.TDoubleProcedure) -> inverseGrep
    double max() -> max
    double min() -> min
    double sum() -> sum
gnu.trove.list.TFloatList -> gnu.trove.list.d:
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean add(float) -> add
    void add(float[]) -> add
    void add(float[],int,int) -> add
    void insert(int,float) -> insert
    void insert(int,float[]) -> insert
    void insert(int,float[],int,int) -> insert
    float get(int) -> get
    float set(int,float) -> set
    void set(int,float[]) -> set
    void set(int,float[],int,int) -> set
    float replace(int,float) -> replace
    float removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    gnu.trove.list.TFloatList subList(int,int) -> subList
    float[] toArray() -> toArray
    float[] toArray(int,int) -> toArray
    float[] toArray(float[],int,int) -> toArray
    float[] toArray(float[],int,int,int) -> toArray
    boolean forEachDescending(gnu.trove.procedure.TFloatProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(float) -> fill
    void fill(int,int,float) -> fill
    int binarySearch(float) -> binarySearch
    int binarySearch(float,int,int) -> binarySearch
    int indexOf(float) -> indexOf
    int indexOf(int,float) -> indexOf
    int lastIndexOf(float) -> lastIndexOf
    int lastIndexOf(int,float) -> lastIndexOf
    gnu.trove.list.TFloatList grep(gnu.trove.procedure.TFloatProcedure) -> grep
    gnu.trove.list.TFloatList inverseGrep(gnu.trove.procedure.TFloatProcedure) -> inverseGrep
    float max() -> max
    float min() -> min
    float sum() -> sum
gnu.trove.list.TIntList -> gnu.trove.list.e:
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean add(int) -> add
    void add(int[]) -> add
    void add(int[],int,int) -> add
    void insert(int,int) -> insert
    void insert(int,int[]) -> insert
    void insert(int,int[],int,int) -> insert
    int get(int) -> get
    int set(int,int) -> set
    void set(int,int[]) -> set
    void set(int,int[],int,int) -> set
    int replace(int,int) -> replace
    void clear() -> clear
    boolean remove(int) -> remove
    int removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    gnu.trove.list.TIntList subList(int,int) -> subList
    int[] toArray() -> toArray
    int[] toArray(int,int) -> toArray
    int[] toArray(int[],int,int) -> toArray
    int[] toArray(int[],int,int,int) -> toArray
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    boolean forEachDescending(gnu.trove.procedure.TIntProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(int) -> fill
    void fill(int,int,int) -> fill
    int binarySearch(int) -> binarySearch
    int binarySearch(int,int,int) -> binarySearch
    int indexOf(int) -> indexOf
    int indexOf(int,int) -> indexOf
    int lastIndexOf(int) -> lastIndexOf
    int lastIndexOf(int,int) -> lastIndexOf
    gnu.trove.list.TIntList grep(gnu.trove.procedure.TIntProcedure) -> grep
    gnu.trove.list.TIntList inverseGrep(gnu.trove.procedure.TIntProcedure) -> inverseGrep
    int max() -> max
    int min() -> min
    int sum() -> sum
gnu.trove.list.TLinkable -> gnu.trove.list.TLinkable:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TLinkable getNext() -> getNext
    gnu.trove.list.TLinkable getPrevious() -> getPrevious
    void setNext(gnu.trove.list.TLinkable) -> setNext
    void setPrevious(gnu.trove.list.TLinkable) -> setPrevious
gnu.trove.list.TLinkableAdapter -> gnu.trove.list.TLinkableAdapter:
    gnu.trove.list.TLinkable next -> next
    gnu.trove.list.TLinkable prev -> prev
    gnu.trove.list.TLinkable getNext() -> getNext
    void setNext(gnu.trove.list.TLinkable) -> setNext
    gnu.trove.list.TLinkable getPrevious() -> getPrevious
    void setPrevious(gnu.trove.list.TLinkable) -> setPrevious
gnu.trove.list.TLongList -> gnu.trove.list.f:
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean add(long) -> add
    void add(long[]) -> add
    void add(long[],int,int) -> add
    void insert(int,long) -> insert
    void insert(int,long[]) -> insert
    void insert(int,long[],int,int) -> insert
    long get(int) -> get
    long set(int,long) -> set
    void set(int,long[]) -> set
    void set(int,long[],int,int) -> set
    long replace(int,long) -> replace
    long removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    gnu.trove.list.TLongList subList(int,int) -> subList
    long[] toArray() -> toArray
    long[] toArray(int,int) -> toArray
    long[] toArray(long[],int,int) -> toArray
    long[] toArray(long[],int,int,int) -> toArray
    boolean forEachDescending(gnu.trove.procedure.TLongProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(long) -> fill
    void fill(int,int,long) -> fill
    int binarySearch(long) -> binarySearch
    int binarySearch(long,int,int) -> binarySearch
    int indexOf(long) -> indexOf
    int indexOf(int,long) -> indexOf
    int lastIndexOf(long) -> lastIndexOf
    int lastIndexOf(int,long) -> lastIndexOf
    gnu.trove.list.TLongList grep(gnu.trove.procedure.TLongProcedure) -> grep
    gnu.trove.list.TLongList inverseGrep(gnu.trove.procedure.TLongProcedure) -> inverseGrep
    long max() -> max
    long min() -> min
    long sum() -> sum
gnu.trove.list.TShortList -> gnu.trove.list.g:
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean add(short) -> add
    void add(short[]) -> add
    void add(short[],int,int) -> add
    void insert(int,short) -> insert
    void insert(int,short[]) -> insert
    void insert(int,short[],int,int) -> insert
    short get(int) -> get
    short set(int,short) -> set
    void set(int,short[]) -> set
    void set(int,short[],int,int) -> set
    short replace(int,short) -> replace
    short removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    gnu.trove.list.TShortList subList(int,int) -> subList
    short[] toArray() -> toArray
    short[] toArray(int,int) -> toArray
    short[] toArray(short[],int,int) -> toArray
    short[] toArray(short[],int,int,int) -> toArray
    boolean forEachDescending(gnu.trove.procedure.TShortProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(short) -> fill
    void fill(int,int,short) -> fill
    int binarySearch(short) -> binarySearch
    int binarySearch(short,int,int) -> binarySearch
    int indexOf(short) -> indexOf
    int indexOf(int,short) -> indexOf
    int lastIndexOf(short) -> lastIndexOf
    int lastIndexOf(int,short) -> lastIndexOf
    gnu.trove.list.TShortList grep(gnu.trove.procedure.TShortProcedure) -> grep
    gnu.trove.list.TShortList inverseGrep(gnu.trove.procedure.TShortProcedure) -> inverseGrep
    short max() -> max
    short min() -> min
    short sum() -> sum
gnu.trove.list.array.TByteArrayList -> gnu.trove.list.array.TByteArrayList:
    long serialVersionUID -> serialVersionUID
    byte[] _data -> _data
    int _pos -> _pos
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    byte no_entry_value -> no_entry_value
    gnu.trove.list.array.TByteArrayList wrap(byte[]) -> wrap
    gnu.trove.list.array.TByteArrayList wrap(byte[],byte) -> wrap
    byte getNoEntryValue() -> getNoEntryValue
    void ensureCapacity(int) -> ensureCapacity
    int size() -> size
    boolean isEmpty() -> isEmpty
    void trimToSize() -> trimToSize
    boolean add(byte) -> add
    void add(byte[]) -> add
    void add(byte[],int,int) -> add
    void insert(int,byte) -> insert
    void insert(int,byte[]) -> insert
    void insert(int,byte[],int,int) -> insert
    byte get(int) -> get
    byte getQuick(int) -> getQuick
    byte set(int,byte) -> set
    byte replace(int,byte) -> replace
    void set(int,byte[]) -> set
    void set(int,byte[],int,int) -> set
    void setQuick(int,byte) -> setQuick
    void clear() -> clear
    void clear(int) -> clear
    void reset() -> reset
    void resetQuick() -> resetQuick
    boolean remove(byte) -> remove
    byte removeAt(int) -> removeAt
    void remove(int,int) -> remove
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void swap(int,int) -> a
    gnu.trove.list.TByteList subList(int,int) -> subList
    byte[] toArray() -> toArray
    byte[] toArray(int,int) -> toArray
    byte[] toArray(byte[]) -> toArray
    byte[] toArray(byte[],int,int) -> toArray
    byte[] toArray(byte[],int,int,int) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    boolean forEachDescending(gnu.trove.procedure.TByteProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(byte) -> fill
    void fill(int,int,byte) -> fill
    int binarySearch(byte) -> binarySearch
    int binarySearch(byte,int,int) -> binarySearch
    int indexOf(byte) -> indexOf
    int indexOf(int,byte) -> indexOf
    int lastIndexOf(byte) -> lastIndexOf
    int lastIndexOf(int,byte) -> lastIndexOf
    boolean contains(byte) -> contains
    gnu.trove.list.TByteList grep(gnu.trove.procedure.TByteProcedure) -> grep
    gnu.trove.list.TByteList inverseGrep(gnu.trove.procedure.TByteProcedure) -> inverseGrep
    byte max() -> max
    byte min() -> min
    byte sum() -> sum
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.list.array.TByteArrayList$1 -> gnu.trove.list.array.TByteArrayList$1:
    void ensureCapacity(int) -> ensureCapacity
gnu.trove.list.array.TByteArrayList$TByteArrayIterator -> gnu.trove.list.array.a:
    int cursor -> c
    int lastRet -> a
    gnu.trove.list.array.TByteArrayList this$0 -> b
    boolean hasNext() -> hasNext
    byte next() -> a
    void remove() -> remove
gnu.trove.list.array.TCharArrayList -> gnu.trove.list.array.TCharArrayList:
    long serialVersionUID -> serialVersionUID
    char[] _data -> _data
    int _pos -> _pos
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    char no_entry_value -> no_entry_value
    gnu.trove.list.array.TCharArrayList wrap(char[]) -> wrap
    gnu.trove.list.array.TCharArrayList wrap(char[],char) -> wrap
    char getNoEntryValue() -> getNoEntryValue
    void ensureCapacity(int) -> ensureCapacity
    int size() -> size
    boolean isEmpty() -> isEmpty
    void trimToSize() -> trimToSize
    boolean add(char) -> add
    void add(char[]) -> add
    void add(char[],int,int) -> add
    void insert(int,char) -> insert
    void insert(int,char[]) -> insert
    void insert(int,char[],int,int) -> insert
    char get(int) -> get
    char getQuick(int) -> getQuick
    char set(int,char) -> set
    char replace(int,char) -> replace
    void set(int,char[]) -> set
    void set(int,char[],int,int) -> set
    void setQuick(int,char) -> setQuick
    void clear() -> clear
    void clear(int) -> clear
    void reset() -> reset
    void resetQuick() -> resetQuick
    boolean remove(char) -> remove
    char removeAt(int) -> removeAt
    void remove(int,int) -> remove
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void swap(int,int) -> a
    gnu.trove.list.TCharList subList(int,int) -> subList
    char[] toArray() -> toArray
    char[] toArray(int,int) -> toArray
    char[] toArray(char[]) -> toArray
    char[] toArray(char[],int,int) -> toArray
    char[] toArray(char[],int,int,int) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    boolean forEachDescending(gnu.trove.procedure.TCharProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(char) -> fill
    void fill(int,int,char) -> fill
    int binarySearch(char) -> binarySearch
    int binarySearch(char,int,int) -> binarySearch
    int indexOf(char) -> indexOf
    int indexOf(int,char) -> indexOf
    int lastIndexOf(char) -> lastIndexOf
    int lastIndexOf(int,char) -> lastIndexOf
    boolean contains(char) -> contains
    gnu.trove.list.TCharList grep(gnu.trove.procedure.TCharProcedure) -> grep
    gnu.trove.list.TCharList inverseGrep(gnu.trove.procedure.TCharProcedure) -> inverseGrep
    char max() -> max
    char min() -> min
    char sum() -> sum
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.list.array.TCharArrayList$1 -> gnu.trove.list.array.TCharArrayList$1:
    void ensureCapacity(int) -> ensureCapacity
gnu.trove.list.array.TCharArrayList$TCharArrayIterator -> gnu.trove.list.array.b:
    int cursor -> c
    int lastRet -> a
    gnu.trove.list.array.TCharArrayList this$0 -> b
    boolean hasNext() -> hasNext
    char next() -> a
    void remove() -> remove
gnu.trove.list.array.TDoubleArrayList -> gnu.trove.list.array.TDoubleArrayList:
    long serialVersionUID -> serialVersionUID
    double[] _data -> _data
    int _pos -> _pos
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    double no_entry_value -> no_entry_value
    gnu.trove.list.array.TDoubleArrayList wrap(double[]) -> wrap
    gnu.trove.list.array.TDoubleArrayList wrap(double[],double) -> wrap
    double getNoEntryValue() -> getNoEntryValue
    void ensureCapacity(int) -> ensureCapacity
    int size() -> size
    boolean isEmpty() -> isEmpty
    void trimToSize() -> trimToSize
    boolean add(double) -> add
    void add(double[]) -> add
    void add(double[],int,int) -> add
    void insert(int,double) -> insert
    void insert(int,double[]) -> insert
    void insert(int,double[],int,int) -> insert
    double get(int) -> get
    double getQuick(int) -> getQuick
    double set(int,double) -> set
    double replace(int,double) -> replace
    void set(int,double[]) -> set
    void set(int,double[],int,int) -> set
    void setQuick(int,double) -> setQuick
    void clear() -> clear
    void clear(int) -> clear
    void reset() -> reset
    void resetQuick() -> resetQuick
    boolean remove(double) -> remove
    double removeAt(int) -> removeAt
    void remove(int,int) -> remove
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void swap(int,int) -> a
    gnu.trove.list.TDoubleList subList(int,int) -> subList
    double[] toArray() -> toArray
    double[] toArray(int,int) -> toArray
    double[] toArray(double[]) -> toArray
    double[] toArray(double[],int,int) -> toArray
    double[] toArray(double[],int,int,int) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    boolean forEachDescending(gnu.trove.procedure.TDoubleProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(double) -> fill
    void fill(int,int,double) -> fill
    int binarySearch(double) -> binarySearch
    int binarySearch(double,int,int) -> binarySearch
    int indexOf(double) -> indexOf
    int indexOf(int,double) -> indexOf
    int lastIndexOf(double) -> lastIndexOf
    int lastIndexOf(int,double) -> lastIndexOf
    boolean contains(double) -> contains
    gnu.trove.list.TDoubleList grep(gnu.trove.procedure.TDoubleProcedure) -> grep
    gnu.trove.list.TDoubleList inverseGrep(gnu.trove.procedure.TDoubleProcedure) -> inverseGrep
    double max() -> max
    double min() -> min
    double sum() -> sum
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.list.array.TDoubleArrayList$1 -> gnu.trove.list.array.TDoubleArrayList$1:
    void ensureCapacity(int) -> ensureCapacity
gnu.trove.list.array.TDoubleArrayList$TDoubleArrayIterator -> gnu.trove.list.array.c:
    int cursor -> c
    int lastRet -> a
    gnu.trove.list.array.TDoubleArrayList this$0 -> b
    boolean hasNext() -> hasNext
    double next() -> a
    void remove() -> remove
gnu.trove.list.array.TFloatArrayList -> gnu.trove.list.array.TFloatArrayList:
    long serialVersionUID -> serialVersionUID
    float[] _data -> _data
    int _pos -> _pos
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    float no_entry_value -> no_entry_value
    gnu.trove.list.array.TFloatArrayList wrap(float[]) -> wrap
    gnu.trove.list.array.TFloatArrayList wrap(float[],float) -> wrap
    float getNoEntryValue() -> getNoEntryValue
    void ensureCapacity(int) -> ensureCapacity
    int size() -> size
    boolean isEmpty() -> isEmpty
    void trimToSize() -> trimToSize
    boolean add(float) -> add
    void add(float[]) -> add
    void add(float[],int,int) -> add
    void insert(int,float) -> insert
    void insert(int,float[]) -> insert
    void insert(int,float[],int,int) -> insert
    float get(int) -> get
    float getQuick(int) -> getQuick
    float set(int,float) -> set
    float replace(int,float) -> replace
    void set(int,float[]) -> set
    void set(int,float[],int,int) -> set
    void setQuick(int,float) -> setQuick
    void clear() -> clear
    void clear(int) -> clear
    void reset() -> reset
    void resetQuick() -> resetQuick
    boolean remove(float) -> remove
    float removeAt(int) -> removeAt
    void remove(int,int) -> remove
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void swap(int,int) -> a
    gnu.trove.list.TFloatList subList(int,int) -> subList
    float[] toArray() -> toArray
    float[] toArray(int,int) -> toArray
    float[] toArray(float[]) -> toArray
    float[] toArray(float[],int,int) -> toArray
    float[] toArray(float[],int,int,int) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    boolean forEachDescending(gnu.trove.procedure.TFloatProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(float) -> fill
    void fill(int,int,float) -> fill
    int binarySearch(float) -> binarySearch
    int binarySearch(float,int,int) -> binarySearch
    int indexOf(float) -> indexOf
    int indexOf(int,float) -> indexOf
    int lastIndexOf(float) -> lastIndexOf
    int lastIndexOf(int,float) -> lastIndexOf
    boolean contains(float) -> contains
    gnu.trove.list.TFloatList grep(gnu.trove.procedure.TFloatProcedure) -> grep
    gnu.trove.list.TFloatList inverseGrep(gnu.trove.procedure.TFloatProcedure) -> inverseGrep
    float max() -> max
    float min() -> min
    float sum() -> sum
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.list.array.TFloatArrayList$1 -> gnu.trove.list.array.TFloatArrayList$1:
    void ensureCapacity(int) -> ensureCapacity
gnu.trove.list.array.TFloatArrayList$TFloatArrayIterator -> gnu.trove.list.array.d:
    int cursor -> c
    int lastRet -> a
    gnu.trove.list.array.TFloatArrayList this$0 -> b
    boolean hasNext() -> hasNext
    float next() -> a
    void remove() -> remove
gnu.trove.list.array.TIntArrayList -> gnu.trove.list.array.TIntArrayList:
    long serialVersionUID -> serialVersionUID
    int[] _data -> _data
    int _pos -> _pos
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    int no_entry_value -> no_entry_value
    gnu.trove.list.array.TIntArrayList wrap(int[]) -> wrap
    gnu.trove.list.array.TIntArrayList wrap(int[],int) -> wrap
    int getNoEntryValue() -> getNoEntryValue
    void ensureCapacity(int) -> ensureCapacity
    int size() -> size
    boolean isEmpty() -> isEmpty
    void trimToSize() -> trimToSize
    boolean add(int) -> add
    void add(int[]) -> add
    void add(int[],int,int) -> add
    void insert(int,int) -> insert
    void insert(int,int[]) -> insert
    void insert(int,int[],int,int) -> insert
    int get(int) -> get
    int getQuick(int) -> getQuick
    int set(int,int) -> set
    int replace(int,int) -> replace
    void set(int,int[]) -> set
    void set(int,int[],int,int) -> set
    void setQuick(int,int) -> setQuick
    void clear() -> clear
    void clear(int) -> clear
    void reset() -> reset
    void resetQuick() -> resetQuick
    boolean remove(int) -> remove
    int removeAt(int) -> removeAt
    void remove(int,int) -> remove
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void swap(int,int) -> a
    gnu.trove.list.TIntList subList(int,int) -> subList
    int[] toArray() -> toArray
    int[] toArray(int,int) -> toArray
    int[] toArray(int[]) -> toArray
    int[] toArray(int[],int,int) -> toArray
    int[] toArray(int[],int,int,int) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    boolean forEachDescending(gnu.trove.procedure.TIntProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(int) -> fill
    void fill(int,int,int) -> fill
    int binarySearch(int) -> binarySearch
    int binarySearch(int,int,int) -> binarySearch
    int indexOf(int) -> indexOf
    int indexOf(int,int) -> indexOf
    int lastIndexOf(int) -> lastIndexOf
    int lastIndexOf(int,int) -> lastIndexOf
    boolean contains(int) -> contains
    gnu.trove.list.TIntList grep(gnu.trove.procedure.TIntProcedure) -> grep
    gnu.trove.list.TIntList inverseGrep(gnu.trove.procedure.TIntProcedure) -> inverseGrep
    int max() -> max
    int min() -> min
    int sum() -> sum
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.list.array.TIntArrayList$1 -> gnu.trove.list.array.TIntArrayList$1:
    void ensureCapacity(int) -> ensureCapacity
gnu.trove.list.array.TIntArrayList$TIntArrayIterator -> gnu.trove.list.array.e:
    int cursor -> c
    int lastRet -> a
    gnu.trove.list.array.TIntArrayList this$0 -> b
    boolean hasNext() -> hasNext
    int next() -> a
    void remove() -> remove
gnu.trove.list.array.TLongArrayList -> gnu.trove.list.array.TLongArrayList:
    long serialVersionUID -> serialVersionUID
    long[] _data -> _data
    int _pos -> _pos
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    long no_entry_value -> no_entry_value
    gnu.trove.list.array.TLongArrayList wrap(long[]) -> wrap
    gnu.trove.list.array.TLongArrayList wrap(long[],long) -> wrap
    long getNoEntryValue() -> getNoEntryValue
    void ensureCapacity(int) -> ensureCapacity
    int size() -> size
    boolean isEmpty() -> isEmpty
    void trimToSize() -> trimToSize
    boolean add(long) -> add
    void add(long[]) -> add
    void add(long[],int,int) -> add
    void insert(int,long) -> insert
    void insert(int,long[]) -> insert
    void insert(int,long[],int,int) -> insert
    long get(int) -> get
    long getQuick(int) -> getQuick
    long set(int,long) -> set
    long replace(int,long) -> replace
    void set(int,long[]) -> set
    void set(int,long[],int,int) -> set
    void setQuick(int,long) -> setQuick
    void clear() -> clear
    void clear(int) -> clear
    void reset() -> reset
    void resetQuick() -> resetQuick
    boolean remove(long) -> remove
    long removeAt(int) -> removeAt
    void remove(int,int) -> remove
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void swap(int,int) -> a
    gnu.trove.list.TLongList subList(int,int) -> subList
    long[] toArray() -> toArray
    long[] toArray(int,int) -> toArray
    long[] toArray(long[]) -> toArray
    long[] toArray(long[],int,int) -> toArray
    long[] toArray(long[],int,int,int) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    boolean forEachDescending(gnu.trove.procedure.TLongProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(long) -> fill
    void fill(int,int,long) -> fill
    int binarySearch(long) -> binarySearch
    int binarySearch(long,int,int) -> binarySearch
    int indexOf(long) -> indexOf
    int indexOf(int,long) -> indexOf
    int lastIndexOf(long) -> lastIndexOf
    int lastIndexOf(int,long) -> lastIndexOf
    boolean contains(long) -> contains
    gnu.trove.list.TLongList grep(gnu.trove.procedure.TLongProcedure) -> grep
    gnu.trove.list.TLongList inverseGrep(gnu.trove.procedure.TLongProcedure) -> inverseGrep
    long max() -> max
    long min() -> min
    long sum() -> sum
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.list.array.TLongArrayList$1 -> gnu.trove.list.array.TLongArrayList$1:
    void ensureCapacity(int) -> ensureCapacity
gnu.trove.list.array.TLongArrayList$TLongArrayIterator -> gnu.trove.list.array.f:
    int cursor -> c
    int lastRet -> a
    gnu.trove.list.array.TLongArrayList this$0 -> b
    boolean hasNext() -> hasNext
    long next() -> a
    void remove() -> remove
gnu.trove.list.array.TShortArrayList -> gnu.trove.list.array.TShortArrayList:
    long serialVersionUID -> serialVersionUID
    short[] _data -> _data
    int _pos -> _pos
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    short no_entry_value -> no_entry_value
    gnu.trove.list.array.TShortArrayList wrap(short[]) -> wrap
    gnu.trove.list.array.TShortArrayList wrap(short[],short) -> wrap
    short getNoEntryValue() -> getNoEntryValue
    void ensureCapacity(int) -> ensureCapacity
    int size() -> size
    boolean isEmpty() -> isEmpty
    void trimToSize() -> trimToSize
    boolean add(short) -> add
    void add(short[]) -> add
    void add(short[],int,int) -> add
    void insert(int,short) -> insert
    void insert(int,short[]) -> insert
    void insert(int,short[],int,int) -> insert
    short get(int) -> get
    short getQuick(int) -> getQuick
    short set(int,short) -> set
    short replace(int,short) -> replace
    void set(int,short[]) -> set
    void set(int,short[],int,int) -> set
    void setQuick(int,short) -> setQuick
    void clear() -> clear
    void clear(int) -> clear
    void reset() -> reset
    void resetQuick() -> resetQuick
    boolean remove(short) -> remove
    short removeAt(int) -> removeAt
    void remove(int,int) -> remove
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    void swap(int,int) -> a
    gnu.trove.list.TShortList subList(int,int) -> subList
    short[] toArray() -> toArray
    short[] toArray(int,int) -> toArray
    short[] toArray(short[]) -> toArray
    short[] toArray(short[],int,int) -> toArray
    short[] toArray(short[],int,int,int) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    boolean forEachDescending(gnu.trove.procedure.TShortProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(short) -> fill
    void fill(int,int,short) -> fill
    int binarySearch(short) -> binarySearch
    int binarySearch(short,int,int) -> binarySearch
    int indexOf(short) -> indexOf
    int indexOf(int,short) -> indexOf
    int lastIndexOf(short) -> lastIndexOf
    int lastIndexOf(int,short) -> lastIndexOf
    boolean contains(short) -> contains
    gnu.trove.list.TShortList grep(gnu.trove.procedure.TShortProcedure) -> grep
    gnu.trove.list.TShortList inverseGrep(gnu.trove.procedure.TShortProcedure) -> inverseGrep
    short max() -> max
    short min() -> min
    short sum() -> sum
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.list.array.TShortArrayList$1 -> gnu.trove.list.array.TShortArrayList$1:
    void ensureCapacity(int) -> ensureCapacity
gnu.trove.list.array.TShortArrayList$TShortArrayIterator -> gnu.trove.list.array.g:
    int cursor -> c
    int lastRet -> a
    gnu.trove.list.array.TShortArrayList this$0 -> b
    boolean hasNext() -> hasNext
    short next() -> a
    void remove() -> remove
gnu.trove.list.linked.TByteLinkedList -> gnu.trove.list.linked.TByteLinkedList:
    byte no_entry_value -> no_entry_value
    int size -> size
    gnu.trove.list.linked.TByteLinkedList$TByteLink head -> head
    gnu.trove.list.linked.TByteLinkedList$TByteLink tail -> tail
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean add(byte) -> add
    void add(byte[]) -> add
    void add(byte[],int,int) -> add
    void insert(int,byte) -> insert
    void insert(int,byte[]) -> insert
    void insert(int,byte[],int,int) -> insert
    void insert(int,gnu.trove.list.linked.TByteLinkedList) -> insert
    gnu.trove.list.linked.TByteLinkedList link(byte[],int,int) -> link
    byte get(int) -> get
    gnu.trove.list.linked.TByteLinkedList$TByteLink getLinkAt(int) -> getLinkAt
    gnu.trove.list.linked.TByteLinkedList$TByteLink getLink(gnu.trove.list.linked.TByteLinkedList$TByteLink,int,int) -> a
    gnu.trove.list.linked.TByteLinkedList$TByteLink getLink(gnu.trove.list.linked.TByteLinkedList$TByteLink,int,int,boolean) -> a
    byte set(int,byte) -> set
    void set(int,byte[]) -> set
    void set(int,byte[],int,int) -> set
    byte replace(int,byte) -> replace
    void clear() -> clear
    boolean remove(byte) -> remove
    void removeLink(gnu.trove.list.linked.TByteLinkedList$TByteLink) -> a
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    byte removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    gnu.trove.list.TByteList subList(int,int) -> subList
    byte[] toArray() -> toArray
    byte[] toArray(int,int) -> toArray
    byte[] toArray(byte[]) -> toArray
    byte[] toArray(byte[],int,int) -> toArray
    byte[] toArray(byte[],int,int,int) -> toArray
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    boolean forEachDescending(gnu.trove.procedure.TByteProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(byte) -> fill
    void fill(int,int,byte) -> fill
    int binarySearch(byte) -> binarySearch
    int binarySearch(byte,int,int) -> binarySearch
    int indexOf(byte) -> indexOf
    int indexOf(int,byte) -> indexOf
    int lastIndexOf(byte) -> lastIndexOf
    int lastIndexOf(int,byte) -> lastIndexOf
    boolean contains(byte) -> contains
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    gnu.trove.list.TByteList grep(gnu.trove.procedure.TByteProcedure) -> grep
    gnu.trove.list.TByteList inverseGrep(gnu.trove.procedure.TByteProcedure) -> inverseGrep
    byte max() -> max
    byte min() -> min
    byte sum() -> sum
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    boolean got(java.lang.Object) -> got
    boolean no(java.lang.Object) -> no
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void access$000(gnu.trove.list.linked.TByteLinkedList,gnu.trove.list.linked.TByteLinkedList$TByteLink) -> access$000
gnu.trove.list.linked.TByteLinkedList$1 -> gnu.trove.list.linked.a:
    gnu.trove.list.linked.TByteLinkedList$TByteLink l -> a
    gnu.trove.list.linked.TByteLinkedList$TByteLink current -> b
    gnu.trove.list.linked.TByteLinkedList this$0 -> c
    byte next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.list.linked.TByteLinkedList$TByteLink -> gnu.trove.list.linked.b:
    byte value -> a
    gnu.trove.list.linked.TByteLinkedList$TByteLink previous -> b
    gnu.trove.list.linked.TByteLinkedList$TByteLink next -> c
    byte getValue() -> a
    void setValue(byte) -> a
    gnu.trove.list.linked.TByteLinkedList$TByteLink getPrevious() -> b
    void setPrevious(gnu.trove.list.linked.TByteLinkedList$TByteLink) -> a
    gnu.trove.list.linked.TByteLinkedList$TByteLink getNext() -> c
    void setNext(gnu.trove.list.linked.TByteLinkedList$TByteLink) -> b
gnu.trove.list.linked.TCharLinkedList -> gnu.trove.list.linked.TCharLinkedList:
    char no_entry_value -> no_entry_value
    int size -> size
    gnu.trove.list.linked.TCharLinkedList$TCharLink head -> head
    gnu.trove.list.linked.TCharLinkedList$TCharLink tail -> tail
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean add(char) -> add
    void add(char[]) -> add
    void add(char[],int,int) -> add
    void insert(int,char) -> insert
    void insert(int,char[]) -> insert
    void insert(int,char[],int,int) -> insert
    void insert(int,gnu.trove.list.linked.TCharLinkedList) -> insert
    gnu.trove.list.linked.TCharLinkedList link(char[],int,int) -> link
    char get(int) -> get
    gnu.trove.list.linked.TCharLinkedList$TCharLink getLinkAt(int) -> getLinkAt
    gnu.trove.list.linked.TCharLinkedList$TCharLink getLink(gnu.trove.list.linked.TCharLinkedList$TCharLink,int,int) -> a
    gnu.trove.list.linked.TCharLinkedList$TCharLink getLink(gnu.trove.list.linked.TCharLinkedList$TCharLink,int,int,boolean) -> a
    char set(int,char) -> set
    void set(int,char[]) -> set
    void set(int,char[],int,int) -> set
    char replace(int,char) -> replace
    void clear() -> clear
    boolean remove(char) -> remove
    void removeLink(gnu.trove.list.linked.TCharLinkedList$TCharLink) -> a
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    char removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    gnu.trove.list.TCharList subList(int,int) -> subList
    char[] toArray() -> toArray
    char[] toArray(int,int) -> toArray
    char[] toArray(char[]) -> toArray
    char[] toArray(char[],int,int) -> toArray
    char[] toArray(char[],int,int,int) -> toArray
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    boolean forEachDescending(gnu.trove.procedure.TCharProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(char) -> fill
    void fill(int,int,char) -> fill
    int binarySearch(char) -> binarySearch
    int binarySearch(char,int,int) -> binarySearch
    int indexOf(char) -> indexOf
    int indexOf(int,char) -> indexOf
    int lastIndexOf(char) -> lastIndexOf
    int lastIndexOf(int,char) -> lastIndexOf
    boolean contains(char) -> contains
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    gnu.trove.list.TCharList grep(gnu.trove.procedure.TCharProcedure) -> grep
    gnu.trove.list.TCharList inverseGrep(gnu.trove.procedure.TCharProcedure) -> inverseGrep
    char max() -> max
    char min() -> min
    char sum() -> sum
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    boolean got(java.lang.Object) -> got
    boolean no(java.lang.Object) -> no
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void access$000(gnu.trove.list.linked.TCharLinkedList,gnu.trove.list.linked.TCharLinkedList$TCharLink) -> access$000
gnu.trove.list.linked.TCharLinkedList$1 -> gnu.trove.list.linked.c:
    gnu.trove.list.linked.TCharLinkedList$TCharLink l -> a
    gnu.trove.list.linked.TCharLinkedList$TCharLink current -> b
    gnu.trove.list.linked.TCharLinkedList this$0 -> c
    char next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.list.linked.TCharLinkedList$TCharLink -> gnu.trove.list.linked.d:
    char value -> a
    gnu.trove.list.linked.TCharLinkedList$TCharLink previous -> b
    gnu.trove.list.linked.TCharLinkedList$TCharLink next -> c
    char getValue() -> a
    void setValue(char) -> a
    gnu.trove.list.linked.TCharLinkedList$TCharLink getPrevious() -> b
    void setPrevious(gnu.trove.list.linked.TCharLinkedList$TCharLink) -> a
    gnu.trove.list.linked.TCharLinkedList$TCharLink getNext() -> c
    void setNext(gnu.trove.list.linked.TCharLinkedList$TCharLink) -> b
gnu.trove.list.linked.TDoubleLinkedList -> gnu.trove.list.linked.TDoubleLinkedList:
    double no_entry_value -> no_entry_value
    int size -> size
    gnu.trove.list.linked.TDoubleLinkedList$TDoubleLink head -> head
    gnu.trove.list.linked.TDoubleLinkedList$TDoubleLink tail -> tail
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean add(double) -> add
    void add(double[]) -> add
    void add(double[],int,int) -> add
    void insert(int,double) -> insert
    void insert(int,double[]) -> insert
    void insert(int,double[],int,int) -> insert
    void insert(int,gnu.trove.list.linked.TDoubleLinkedList) -> insert
    gnu.trove.list.linked.TDoubleLinkedList link(double[],int,int) -> link
    double get(int) -> get
    gnu.trove.list.linked.TDoubleLinkedList$TDoubleLink getLinkAt(int) -> getLinkAt
    gnu.trove.list.linked.TDoubleLinkedList$TDoubleLink getLink(gnu.trove.list.linked.TDoubleLinkedList$TDoubleLink,int,int) -> a
    gnu.trove.list.linked.TDoubleLinkedList$TDoubleLink getLink(gnu.trove.list.linked.TDoubleLinkedList$TDoubleLink,int,int,boolean) -> a
    double set(int,double) -> set
    void set(int,double[]) -> set
    void set(int,double[],int,int) -> set
    double replace(int,double) -> replace
    void clear() -> clear
    boolean remove(double) -> remove
    void removeLink(gnu.trove.list.linked.TDoubleLinkedList$TDoubleLink) -> a
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    double removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    gnu.trove.list.TDoubleList subList(int,int) -> subList
    double[] toArray() -> toArray
    double[] toArray(int,int) -> toArray
    double[] toArray(double[]) -> toArray
    double[] toArray(double[],int,int) -> toArray
    double[] toArray(double[],int,int,int) -> toArray
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    boolean forEachDescending(gnu.trove.procedure.TDoubleProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(double) -> fill
    void fill(int,int,double) -> fill
    int binarySearch(double) -> binarySearch
    int binarySearch(double,int,int) -> binarySearch
    int indexOf(double) -> indexOf
    int indexOf(int,double) -> indexOf
    int lastIndexOf(double) -> lastIndexOf
    int lastIndexOf(int,double) -> lastIndexOf
    boolean contains(double) -> contains
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    gnu.trove.list.TDoubleList grep(gnu.trove.procedure.TDoubleProcedure) -> grep
    gnu.trove.list.TDoubleList inverseGrep(gnu.trove.procedure.TDoubleProcedure) -> inverseGrep
    double max() -> max
    double min() -> min
    double sum() -> sum
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    boolean got(java.lang.Object) -> got
    boolean no(java.lang.Object) -> no
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void access$000(gnu.trove.list.linked.TDoubleLinkedList,gnu.trove.list.linked.TDoubleLinkedList$TDoubleLink) -> access$000
gnu.trove.list.linked.TDoubleLinkedList$1 -> gnu.trove.list.linked.e:
    gnu.trove.list.linked.TDoubleLinkedList$TDoubleLink l -> a
    gnu.trove.list.linked.TDoubleLinkedList$TDoubleLink current -> b
    gnu.trove.list.linked.TDoubleLinkedList this$0 -> c
    double next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.list.linked.TDoubleLinkedList$TDoubleLink -> gnu.trove.list.linked.f:
    double value -> a
    gnu.trove.list.linked.TDoubleLinkedList$TDoubleLink previous -> b
    gnu.trove.list.linked.TDoubleLinkedList$TDoubleLink next -> c
    double getValue() -> a
    void setValue(double) -> a
    gnu.trove.list.linked.TDoubleLinkedList$TDoubleLink getPrevious() -> b
    void setPrevious(gnu.trove.list.linked.TDoubleLinkedList$TDoubleLink) -> a
    gnu.trove.list.linked.TDoubleLinkedList$TDoubleLink getNext() -> c
    void setNext(gnu.trove.list.linked.TDoubleLinkedList$TDoubleLink) -> b
gnu.trove.list.linked.TFloatLinkedList -> gnu.trove.list.linked.TFloatLinkedList:
    float no_entry_value -> no_entry_value
    int size -> size
    gnu.trove.list.linked.TFloatLinkedList$TFloatLink head -> head
    gnu.trove.list.linked.TFloatLinkedList$TFloatLink tail -> tail
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean add(float) -> add
    void add(float[]) -> add
    void add(float[],int,int) -> add
    void insert(int,float) -> insert
    void insert(int,float[]) -> insert
    void insert(int,float[],int,int) -> insert
    void insert(int,gnu.trove.list.linked.TFloatLinkedList) -> insert
    gnu.trove.list.linked.TFloatLinkedList link(float[],int,int) -> link
    float get(int) -> get
    gnu.trove.list.linked.TFloatLinkedList$TFloatLink getLinkAt(int) -> getLinkAt
    gnu.trove.list.linked.TFloatLinkedList$TFloatLink getLink(gnu.trove.list.linked.TFloatLinkedList$TFloatLink,int,int) -> a
    gnu.trove.list.linked.TFloatLinkedList$TFloatLink getLink(gnu.trove.list.linked.TFloatLinkedList$TFloatLink,int,int,boolean) -> a
    float set(int,float) -> set
    void set(int,float[]) -> set
    void set(int,float[],int,int) -> set
    float replace(int,float) -> replace
    void clear() -> clear
    boolean remove(float) -> remove
    void removeLink(gnu.trove.list.linked.TFloatLinkedList$TFloatLink) -> a
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    float removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    gnu.trove.list.TFloatList subList(int,int) -> subList
    float[] toArray() -> toArray
    float[] toArray(int,int) -> toArray
    float[] toArray(float[]) -> toArray
    float[] toArray(float[],int,int) -> toArray
    float[] toArray(float[],int,int,int) -> toArray
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    boolean forEachDescending(gnu.trove.procedure.TFloatProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(float) -> fill
    void fill(int,int,float) -> fill
    int binarySearch(float) -> binarySearch
    int binarySearch(float,int,int) -> binarySearch
    int indexOf(float) -> indexOf
    int indexOf(int,float) -> indexOf
    int lastIndexOf(float) -> lastIndexOf
    int lastIndexOf(int,float) -> lastIndexOf
    boolean contains(float) -> contains
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    gnu.trove.list.TFloatList grep(gnu.trove.procedure.TFloatProcedure) -> grep
    gnu.trove.list.TFloatList inverseGrep(gnu.trove.procedure.TFloatProcedure) -> inverseGrep
    float max() -> max
    float min() -> min
    float sum() -> sum
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    boolean got(java.lang.Object) -> got
    boolean no(java.lang.Object) -> no
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void access$000(gnu.trove.list.linked.TFloatLinkedList,gnu.trove.list.linked.TFloatLinkedList$TFloatLink) -> access$000
gnu.trove.list.linked.TFloatLinkedList$1 -> gnu.trove.list.linked.g:
    gnu.trove.list.linked.TFloatLinkedList$TFloatLink l -> a
    gnu.trove.list.linked.TFloatLinkedList$TFloatLink current -> b
    gnu.trove.list.linked.TFloatLinkedList this$0 -> c
    float next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.list.linked.TFloatLinkedList$TFloatLink -> gnu.trove.list.linked.h:
    float value -> a
    gnu.trove.list.linked.TFloatLinkedList$TFloatLink previous -> b
    gnu.trove.list.linked.TFloatLinkedList$TFloatLink next -> c
    float getValue() -> a
    void setValue(float) -> a
    gnu.trove.list.linked.TFloatLinkedList$TFloatLink getPrevious() -> b
    void setPrevious(gnu.trove.list.linked.TFloatLinkedList$TFloatLink) -> a
    gnu.trove.list.linked.TFloatLinkedList$TFloatLink getNext() -> c
    void setNext(gnu.trove.list.linked.TFloatLinkedList$TFloatLink) -> b
gnu.trove.list.linked.TIntLinkedList -> gnu.trove.list.linked.TIntLinkedList:
    int no_entry_value -> no_entry_value
    int size -> size
    gnu.trove.list.linked.TIntLinkedList$TIntLink head -> head
    gnu.trove.list.linked.TIntLinkedList$TIntLink tail -> tail
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean add(int) -> add
    void add(int[]) -> add
    void add(int[],int,int) -> add
    void insert(int,int) -> insert
    void insert(int,int[]) -> insert
    void insert(int,int[],int,int) -> insert
    void insert(int,gnu.trove.list.linked.TIntLinkedList) -> insert
    gnu.trove.list.linked.TIntLinkedList link(int[],int,int) -> link
    int get(int) -> get
    gnu.trove.list.linked.TIntLinkedList$TIntLink getLinkAt(int) -> getLinkAt
    gnu.trove.list.linked.TIntLinkedList$TIntLink getLink(gnu.trove.list.linked.TIntLinkedList$TIntLink,int,int) -> a
    gnu.trove.list.linked.TIntLinkedList$TIntLink getLink(gnu.trove.list.linked.TIntLinkedList$TIntLink,int,int,boolean) -> a
    int set(int,int) -> set
    void set(int,int[]) -> set
    void set(int,int[],int,int) -> set
    int replace(int,int) -> replace
    void clear() -> clear
    boolean remove(int) -> remove
    void removeLink(gnu.trove.list.linked.TIntLinkedList$TIntLink) -> a
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    int removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    gnu.trove.list.TIntList subList(int,int) -> subList
    int[] toArray() -> toArray
    int[] toArray(int,int) -> toArray
    int[] toArray(int[]) -> toArray
    int[] toArray(int[],int,int) -> toArray
    int[] toArray(int[],int,int,int) -> toArray
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    boolean forEachDescending(gnu.trove.procedure.TIntProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(int) -> fill
    void fill(int,int,int) -> fill
    int binarySearch(int) -> binarySearch
    int binarySearch(int,int,int) -> binarySearch
    int indexOf(int) -> indexOf
    int indexOf(int,int) -> indexOf
    int lastIndexOf(int) -> lastIndexOf
    int lastIndexOf(int,int) -> lastIndexOf
    boolean contains(int) -> contains
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    gnu.trove.list.TIntList grep(gnu.trove.procedure.TIntProcedure) -> grep
    gnu.trove.list.TIntList inverseGrep(gnu.trove.procedure.TIntProcedure) -> inverseGrep
    int max() -> max
    int min() -> min
    int sum() -> sum
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    boolean got(java.lang.Object) -> got
    boolean no(java.lang.Object) -> no
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void access$000(gnu.trove.list.linked.TIntLinkedList,gnu.trove.list.linked.TIntLinkedList$TIntLink) -> access$000
gnu.trove.list.linked.TIntLinkedList$1 -> gnu.trove.list.linked.i:
    gnu.trove.list.linked.TIntLinkedList$TIntLink l -> a
    gnu.trove.list.linked.TIntLinkedList$TIntLink current -> b
    gnu.trove.list.linked.TIntLinkedList this$0 -> c
    int next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.list.linked.TIntLinkedList$TIntLink -> gnu.trove.list.linked.j:
    int value -> a
    gnu.trove.list.linked.TIntLinkedList$TIntLink previous -> b
    gnu.trove.list.linked.TIntLinkedList$TIntLink next -> c
    int getValue() -> a
    void setValue(int) -> a
    gnu.trove.list.linked.TIntLinkedList$TIntLink getPrevious() -> b
    void setPrevious(gnu.trove.list.linked.TIntLinkedList$TIntLink) -> a
    gnu.trove.list.linked.TIntLinkedList$TIntLink getNext() -> c
    void setNext(gnu.trove.list.linked.TIntLinkedList$TIntLink) -> b
gnu.trove.list.linked.TLinkedList -> gnu.trove.list.linked.TLinkedList:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.TLinkable _head -> _head
    gnu.trove.list.TLinkable _tail -> _tail
    int _size -> _size
    java.util.ListIterator listIterator(int) -> listIterator
    int size() -> size
    void add(int,gnu.trove.list.TLinkable) -> add
    boolean add(gnu.trove.list.TLinkable) -> add
    void addFirst(gnu.trove.list.TLinkable) -> addFirst
    void addLast(gnu.trove.list.TLinkable) -> addLast
    void clear() -> clear
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toUnlinkedArray() -> toUnlinkedArray
    gnu.trove.list.TLinkable[] toUnlinkedArray(gnu.trove.list.TLinkable[]) -> toUnlinkedArray
    boolean contains(java.lang.Object) -> contains
    gnu.trove.list.TLinkable get(int) -> get
    gnu.trove.list.TLinkable getFirst() -> getFirst
    gnu.trove.list.TLinkable getLast() -> getLast
    gnu.trove.list.TLinkable getNext(gnu.trove.list.TLinkable) -> getNext
    gnu.trove.list.TLinkable getPrevious(gnu.trove.list.TLinkable) -> getPrevious
    gnu.trove.list.TLinkable removeFirst() -> removeFirst
    gnu.trove.list.TLinkable removeLast() -> removeLast
    void insert(int,gnu.trove.list.TLinkable) -> insert
    boolean remove(java.lang.Object) -> remove
    void addBefore(gnu.trove.list.TLinkable,gnu.trove.list.TLinkable) -> addBefore
    void addAfter(gnu.trove.list.TLinkable,gnu.trove.list.TLinkable) -> addAfter
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    void add(int,java.lang.Object) -> add
    java.lang.Object get(int) -> get
    boolean add(java.lang.Object) -> add
gnu.trove.list.linked.TLinkedList$IteratorImpl -> gnu.trove.list.linked.k:
    int _nextIndex -> b
    gnu.trove.list.TLinkable _next -> c
    gnu.trove.list.TLinkable _lastReturned -> d
    gnu.trove.list.linked.TLinkedList this$0 -> a
    void add(gnu.trove.list.TLinkable) -> a
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    gnu.trove.list.TLinkable next() -> a
    int nextIndex() -> nextIndex
    gnu.trove.list.TLinkable previous() -> b
    int previousIndex() -> previousIndex
    void remove() -> remove
    void set(gnu.trove.list.TLinkable) -> b
    void swap(gnu.trove.list.TLinkable,gnu.trove.list.TLinkable) -> a
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
    java.lang.Object previous() -> previous
    java.lang.Object next() -> next
gnu.trove.list.linked.TLongLinkedList -> gnu.trove.list.linked.TLongLinkedList:
    long no_entry_value -> no_entry_value
    int size -> size
    gnu.trove.list.linked.TLongLinkedList$TLongLink head -> head
    gnu.trove.list.linked.TLongLinkedList$TLongLink tail -> tail
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean add(long) -> add
    void add(long[]) -> add
    void add(long[],int,int) -> add
    void insert(int,long) -> insert
    void insert(int,long[]) -> insert
    void insert(int,long[],int,int) -> insert
    void insert(int,gnu.trove.list.linked.TLongLinkedList) -> insert
    gnu.trove.list.linked.TLongLinkedList link(long[],int,int) -> link
    long get(int) -> get
    gnu.trove.list.linked.TLongLinkedList$TLongLink getLinkAt(int) -> getLinkAt
    gnu.trove.list.linked.TLongLinkedList$TLongLink getLink(gnu.trove.list.linked.TLongLinkedList$TLongLink,int,int) -> a
    gnu.trove.list.linked.TLongLinkedList$TLongLink getLink(gnu.trove.list.linked.TLongLinkedList$TLongLink,int,int,boolean) -> a
    long set(int,long) -> set
    void set(int,long[]) -> set
    void set(int,long[],int,int) -> set
    long replace(int,long) -> replace
    void clear() -> clear
    boolean remove(long) -> remove
    void removeLink(gnu.trove.list.linked.TLongLinkedList$TLongLink) -> a
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    long removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    gnu.trove.list.TLongList subList(int,int) -> subList
    long[] toArray() -> toArray
    long[] toArray(int,int) -> toArray
    long[] toArray(long[]) -> toArray
    long[] toArray(long[],int,int) -> toArray
    long[] toArray(long[],int,int,int) -> toArray
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    boolean forEachDescending(gnu.trove.procedure.TLongProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(long) -> fill
    void fill(int,int,long) -> fill
    int binarySearch(long) -> binarySearch
    int binarySearch(long,int,int) -> binarySearch
    int indexOf(long) -> indexOf
    int indexOf(int,long) -> indexOf
    int lastIndexOf(long) -> lastIndexOf
    int lastIndexOf(int,long) -> lastIndexOf
    boolean contains(long) -> contains
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    gnu.trove.list.TLongList grep(gnu.trove.procedure.TLongProcedure) -> grep
    gnu.trove.list.TLongList inverseGrep(gnu.trove.procedure.TLongProcedure) -> inverseGrep
    long max() -> max
    long min() -> min
    long sum() -> sum
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    boolean got(java.lang.Object) -> got
    boolean no(java.lang.Object) -> no
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void access$000(gnu.trove.list.linked.TLongLinkedList,gnu.trove.list.linked.TLongLinkedList$TLongLink) -> access$000
gnu.trove.list.linked.TLongLinkedList$1 -> gnu.trove.list.linked.l:
    gnu.trove.list.linked.TLongLinkedList$TLongLink l -> a
    gnu.trove.list.linked.TLongLinkedList$TLongLink current -> b
    gnu.trove.list.linked.TLongLinkedList this$0 -> c
    long next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.list.linked.TLongLinkedList$TLongLink -> gnu.trove.list.linked.m:
    long value -> a
    gnu.trove.list.linked.TLongLinkedList$TLongLink previous -> b
    gnu.trove.list.linked.TLongLinkedList$TLongLink next -> c
    long getValue() -> a
    void setValue(long) -> a
    gnu.trove.list.linked.TLongLinkedList$TLongLink getPrevious() -> b
    void setPrevious(gnu.trove.list.linked.TLongLinkedList$TLongLink) -> a
    gnu.trove.list.linked.TLongLinkedList$TLongLink getNext() -> c
    void setNext(gnu.trove.list.linked.TLongLinkedList$TLongLink) -> b
gnu.trove.list.linked.TShortLinkedList -> gnu.trove.list.linked.TShortLinkedList:
    short no_entry_value -> no_entry_value
    int size -> size
    gnu.trove.list.linked.TShortLinkedList$TShortLink head -> head
    gnu.trove.list.linked.TShortLinkedList$TShortLink tail -> tail
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean add(short) -> add
    void add(short[]) -> add
    void add(short[],int,int) -> add
    void insert(int,short) -> insert
    void insert(int,short[]) -> insert
    void insert(int,short[],int,int) -> insert
    void insert(int,gnu.trove.list.linked.TShortLinkedList) -> insert
    gnu.trove.list.linked.TShortLinkedList link(short[],int,int) -> link
    short get(int) -> get
    gnu.trove.list.linked.TShortLinkedList$TShortLink getLinkAt(int) -> getLinkAt
    gnu.trove.list.linked.TShortLinkedList$TShortLink getLink(gnu.trove.list.linked.TShortLinkedList$TShortLink,int,int) -> a
    gnu.trove.list.linked.TShortLinkedList$TShortLink getLink(gnu.trove.list.linked.TShortLinkedList$TShortLink,int,int,boolean) -> a
    short set(int,short) -> set
    void set(int,short[]) -> set
    void set(int,short[],int,int) -> set
    short replace(int,short) -> replace
    void clear() -> clear
    boolean remove(short) -> remove
    void removeLink(gnu.trove.list.linked.TShortLinkedList$TShortLink) -> a
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    short removeAt(int) -> removeAt
    void remove(int,int) -> remove
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    void reverse() -> reverse
    void reverse(int,int) -> reverse
    void shuffle(java.util.Random) -> shuffle
    gnu.trove.list.TShortList subList(int,int) -> subList
    short[] toArray() -> toArray
    short[] toArray(int,int) -> toArray
    short[] toArray(short[]) -> toArray
    short[] toArray(short[],int,int) -> toArray
    short[] toArray(short[],int,int,int) -> toArray
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    boolean forEachDescending(gnu.trove.procedure.TShortProcedure) -> forEachDescending
    void sort() -> sort
    void sort(int,int) -> sort
    void fill(short) -> fill
    void fill(int,int,short) -> fill
    int binarySearch(short) -> binarySearch
    int binarySearch(short,int,int) -> binarySearch
    int indexOf(short) -> indexOf
    int indexOf(int,short) -> indexOf
    int lastIndexOf(short) -> lastIndexOf
    int lastIndexOf(int,short) -> lastIndexOf
    boolean contains(short) -> contains
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    gnu.trove.list.TShortList grep(gnu.trove.procedure.TShortProcedure) -> grep
    gnu.trove.list.TShortList inverseGrep(gnu.trove.procedure.TShortProcedure) -> inverseGrep
    short max() -> max
    short min() -> min
    short sum() -> sum
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    boolean got(java.lang.Object) -> got
    boolean no(java.lang.Object) -> no
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void access$000(gnu.trove.list.linked.TShortLinkedList,gnu.trove.list.linked.TShortLinkedList$TShortLink) -> access$000
gnu.trove.list.linked.TShortLinkedList$1 -> gnu.trove.list.linked.n:
    gnu.trove.list.linked.TShortLinkedList$TShortLink l -> a
    gnu.trove.list.linked.TShortLinkedList$TShortLink current -> b
    gnu.trove.list.linked.TShortLinkedList this$0 -> c
    short next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.list.linked.TShortLinkedList$TShortLink -> gnu.trove.list.linked.o:
    short value -> a
    gnu.trove.list.linked.TShortLinkedList$TShortLink previous -> b
    gnu.trove.list.linked.TShortLinkedList$TShortLink next -> c
    short getValue() -> a
    void setValue(short) -> a
    gnu.trove.list.linked.TShortLinkedList$TShortLink getPrevious() -> b
    void setPrevious(gnu.trove.list.linked.TShortLinkedList$TShortLink) -> a
    gnu.trove.list.linked.TShortLinkedList$TShortLink getNext() -> c
    void setNext(gnu.trove.list.linked.TShortLinkedList$TShortLink) -> b
gnu.trove.map.TByteByteMap -> gnu.trove.map.a:
    byte getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    byte put(byte,byte) -> put
    byte putIfAbsent(byte,byte) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteByteMap) -> putAll
    byte get(byte) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    byte remove(byte) -> remove
    int size() -> size
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean containsValue(byte) -> containsValue
    boolean containsKey(byte) -> containsKey
    gnu.trove.iterator.TByteByteIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteByteProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,byte) -> adjustValue
    byte adjustOrPutValue(byte,byte,byte) -> adjustOrPutValue
gnu.trove.map.TByteCharMap -> gnu.trove.map.b:
    byte getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    char put(byte,char) -> put
    char putIfAbsent(byte,char) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteCharMap) -> putAll
    char get(byte) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    char remove(byte) -> remove
    int size() -> size
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean containsValue(char) -> containsValue
    boolean containsKey(byte) -> containsKey
    gnu.trove.iterator.TByteCharIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteCharProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,char) -> adjustValue
    char adjustOrPutValue(byte,char,char) -> adjustOrPutValue
gnu.trove.map.TByteDoubleMap -> gnu.trove.map.c:
    byte getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    double put(byte,double) -> put
    double putIfAbsent(byte,double) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteDoubleMap) -> putAll
    double get(byte) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    double remove(byte) -> remove
    int size() -> size
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean containsValue(double) -> containsValue
    boolean containsKey(byte) -> containsKey
    gnu.trove.iterator.TByteDoubleIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteDoubleProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,double) -> adjustValue
    double adjustOrPutValue(byte,double,double) -> adjustOrPutValue
gnu.trove.map.TByteFloatMap -> gnu.trove.map.d:
    byte getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    float put(byte,float) -> put
    float putIfAbsent(byte,float) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteFloatMap) -> putAll
    float get(byte) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    float remove(byte) -> remove
    int size() -> size
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean containsValue(float) -> containsValue
    boolean containsKey(byte) -> containsKey
    gnu.trove.iterator.TByteFloatIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteFloatProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,float) -> adjustValue
    float adjustOrPutValue(byte,float,float) -> adjustOrPutValue
gnu.trove.map.TByteIntMap -> gnu.trove.map.e:
    byte getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int put(byte,int) -> put
    int putIfAbsent(byte,int) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteIntMap) -> putAll
    int get(byte) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    int remove(byte) -> remove
    int size() -> size
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean containsValue(int) -> containsValue
    boolean containsKey(byte) -> containsKey
    gnu.trove.iterator.TByteIntIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteIntProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,int) -> adjustValue
    int adjustOrPutValue(byte,int,int) -> adjustOrPutValue
gnu.trove.map.TByteLongMap -> gnu.trove.map.f:
    byte getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    long put(byte,long) -> put
    long putIfAbsent(byte,long) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteLongMap) -> putAll
    long get(byte) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    long remove(byte) -> remove
    int size() -> size
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean containsValue(long) -> containsValue
    boolean containsKey(byte) -> containsKey
    gnu.trove.iterator.TByteLongIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteLongProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,long) -> adjustValue
    long adjustOrPutValue(byte,long,long) -> adjustOrPutValue
gnu.trove.map.TByteObjectMap -> gnu.trove.map.g:
    byte getNoEntryKey() -> getNoEntryKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(byte) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(byte) -> get
    java.lang.Object put(byte,java.lang.Object) -> put
    java.lang.Object putIfAbsent(byte,java.lang.Object) -> putIfAbsent
    java.lang.Object remove(byte) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TByteObjectIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteObjectProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteObjectProcedure) -> retainEntries
gnu.trove.map.TByteShortMap -> gnu.trove.map.h:
    byte getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    short put(byte,short) -> put
    short putIfAbsent(byte,short) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteShortMap) -> putAll
    short get(byte) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    short remove(byte) -> remove
    int size() -> size
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean containsValue(short) -> containsValue
    boolean containsKey(byte) -> containsKey
    gnu.trove.iterator.TByteShortIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteShortProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,short) -> adjustValue
    short adjustOrPutValue(byte,short,short) -> adjustOrPutValue
gnu.trove.map.TCharByteMap -> gnu.trove.map.i:
    char getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    byte put(char,byte) -> put
    byte putIfAbsent(char,byte) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharByteMap) -> putAll
    byte get(char) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    byte remove(char) -> remove
    int size() -> size
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean containsValue(byte) -> containsValue
    boolean containsKey(char) -> containsKey
    gnu.trove.iterator.TCharByteIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharByteProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,byte) -> adjustValue
    byte adjustOrPutValue(char,byte,byte) -> adjustOrPutValue
gnu.trove.map.TCharCharMap -> gnu.trove.map.j:
    char getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    char put(char,char) -> put
    char putIfAbsent(char,char) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharCharMap) -> putAll
    char get(char) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    char remove(char) -> remove
    int size() -> size
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean containsValue(char) -> containsValue
    boolean containsKey(char) -> containsKey
    gnu.trove.iterator.TCharCharIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharCharProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,char) -> adjustValue
    char adjustOrPutValue(char,char,char) -> adjustOrPutValue
gnu.trove.map.TCharDoubleMap -> gnu.trove.map.k:
    char getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    double put(char,double) -> put
    double putIfAbsent(char,double) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharDoubleMap) -> putAll
    double get(char) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    double remove(char) -> remove
    int size() -> size
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean containsValue(double) -> containsValue
    boolean containsKey(char) -> containsKey
    gnu.trove.iterator.TCharDoubleIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharDoubleProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,double) -> adjustValue
    double adjustOrPutValue(char,double,double) -> adjustOrPutValue
gnu.trove.map.TCharFloatMap -> gnu.trove.map.l:
    char getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    float put(char,float) -> put
    float putIfAbsent(char,float) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharFloatMap) -> putAll
    float get(char) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    float remove(char) -> remove
    int size() -> size
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean containsValue(float) -> containsValue
    boolean containsKey(char) -> containsKey
    gnu.trove.iterator.TCharFloatIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharFloatProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,float) -> adjustValue
    float adjustOrPutValue(char,float,float) -> adjustOrPutValue
gnu.trove.map.TCharIntMap -> gnu.trove.map.m:
    char getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int put(char,int) -> put
    int putIfAbsent(char,int) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharIntMap) -> putAll
    int get(char) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    int remove(char) -> remove
    int size() -> size
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean containsValue(int) -> containsValue
    boolean containsKey(char) -> containsKey
    gnu.trove.iterator.TCharIntIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharIntProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,int) -> adjustValue
    int adjustOrPutValue(char,int,int) -> adjustOrPutValue
gnu.trove.map.TCharLongMap -> gnu.trove.map.n:
    char getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    long put(char,long) -> put
    long putIfAbsent(char,long) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharLongMap) -> putAll
    long get(char) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    long remove(char) -> remove
    int size() -> size
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean containsValue(long) -> containsValue
    boolean containsKey(char) -> containsKey
    gnu.trove.iterator.TCharLongIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharLongProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,long) -> adjustValue
    long adjustOrPutValue(char,long,long) -> adjustOrPutValue
gnu.trove.map.TCharObjectMap -> gnu.trove.map.o:
    char getNoEntryKey() -> getNoEntryKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(char) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(char) -> get
    java.lang.Object put(char,java.lang.Object) -> put
    java.lang.Object putIfAbsent(char,java.lang.Object) -> putIfAbsent
    java.lang.Object remove(char) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TCharObjectIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharObjectProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharObjectProcedure) -> retainEntries
gnu.trove.map.TCharShortMap -> gnu.trove.map.p:
    char getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    short put(char,short) -> put
    short putIfAbsent(char,short) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharShortMap) -> putAll
    short get(char) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    short remove(char) -> remove
    int size() -> size
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean containsValue(short) -> containsValue
    boolean containsKey(char) -> containsKey
    gnu.trove.iterator.TCharShortIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharShortProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,short) -> adjustValue
    short adjustOrPutValue(char,short,short) -> adjustOrPutValue
gnu.trove.map.TDoubleByteMap -> gnu.trove.map.q:
    double getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    byte put(double,byte) -> put
    byte putIfAbsent(double,byte) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleByteMap) -> putAll
    byte get(double) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    byte remove(double) -> remove
    int size() -> size
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean containsValue(byte) -> containsValue
    boolean containsKey(double) -> containsKey
    gnu.trove.iterator.TDoubleByteIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleByteProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,byte) -> adjustValue
    byte adjustOrPutValue(double,byte,byte) -> adjustOrPutValue
gnu.trove.map.TDoubleCharMap -> gnu.trove.map.r:
    double getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    char put(double,char) -> put
    char putIfAbsent(double,char) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleCharMap) -> putAll
    char get(double) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    char remove(double) -> remove
    int size() -> size
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean containsValue(char) -> containsValue
    boolean containsKey(double) -> containsKey
    gnu.trove.iterator.TDoubleCharIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleCharProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,char) -> adjustValue
    char adjustOrPutValue(double,char,char) -> adjustOrPutValue
gnu.trove.map.TDoubleDoubleMap -> gnu.trove.map.s:
    double getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    double put(double,double) -> put
    double putIfAbsent(double,double) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleDoubleMap) -> putAll
    double get(double) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    double remove(double) -> remove
    int size() -> size
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean containsValue(double) -> containsValue
    boolean containsKey(double) -> containsKey
    gnu.trove.iterator.TDoubleDoubleIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleDoubleProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,double) -> adjustValue
    double adjustOrPutValue(double,double,double) -> adjustOrPutValue
gnu.trove.map.TDoubleFloatMap -> gnu.trove.map.t:
    double getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    float put(double,float) -> put
    float putIfAbsent(double,float) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleFloatMap) -> putAll
    float get(double) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    float remove(double) -> remove
    int size() -> size
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean containsValue(float) -> containsValue
    boolean containsKey(double) -> containsKey
    gnu.trove.iterator.TDoubleFloatIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleFloatProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,float) -> adjustValue
    float adjustOrPutValue(double,float,float) -> adjustOrPutValue
gnu.trove.map.TDoubleIntMap -> gnu.trove.map.u:
    double getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int put(double,int) -> put
    int putIfAbsent(double,int) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleIntMap) -> putAll
    int get(double) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    int remove(double) -> remove
    int size() -> size
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean containsValue(int) -> containsValue
    boolean containsKey(double) -> containsKey
    gnu.trove.iterator.TDoubleIntIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleIntProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,int) -> adjustValue
    int adjustOrPutValue(double,int,int) -> adjustOrPutValue
gnu.trove.map.TDoubleLongMap -> gnu.trove.map.v:
    double getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    long put(double,long) -> put
    long putIfAbsent(double,long) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleLongMap) -> putAll
    long get(double) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    long remove(double) -> remove
    int size() -> size
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean containsValue(long) -> containsValue
    boolean containsKey(double) -> containsKey
    gnu.trove.iterator.TDoubleLongIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleLongProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,long) -> adjustValue
    long adjustOrPutValue(double,long,long) -> adjustOrPutValue
gnu.trove.map.TDoubleObjectMap -> gnu.trove.map.w:
    double getNoEntryKey() -> getNoEntryKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(double) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(double) -> get
    java.lang.Object put(double,java.lang.Object) -> put
    java.lang.Object putIfAbsent(double,java.lang.Object) -> putIfAbsent
    java.lang.Object remove(double) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TDoubleObjectIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleObjectProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleObjectProcedure) -> retainEntries
gnu.trove.map.TDoubleShortMap -> gnu.trove.map.x:
    double getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    short put(double,short) -> put
    short putIfAbsent(double,short) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleShortMap) -> putAll
    short get(double) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    short remove(double) -> remove
    int size() -> size
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean containsValue(short) -> containsValue
    boolean containsKey(double) -> containsKey
    gnu.trove.iterator.TDoubleShortIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleShortProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,short) -> adjustValue
    short adjustOrPutValue(double,short,short) -> adjustOrPutValue
gnu.trove.map.TFloatByteMap -> gnu.trove.map.y:
    float getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    byte put(float,byte) -> put
    byte putIfAbsent(float,byte) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatByteMap) -> putAll
    byte get(float) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    byte remove(float) -> remove
    int size() -> size
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean containsValue(byte) -> containsValue
    boolean containsKey(float) -> containsKey
    gnu.trove.iterator.TFloatByteIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatByteProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,byte) -> adjustValue
    byte adjustOrPutValue(float,byte,byte) -> adjustOrPutValue
gnu.trove.map.TFloatCharMap -> gnu.trove.map.z:
    float getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    char put(float,char) -> put
    char putIfAbsent(float,char) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatCharMap) -> putAll
    char get(float) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    char remove(float) -> remove
    int size() -> size
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean containsValue(char) -> containsValue
    boolean containsKey(float) -> containsKey
    gnu.trove.iterator.TFloatCharIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatCharProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,char) -> adjustValue
    char adjustOrPutValue(float,char,char) -> adjustOrPutValue
gnu.trove.map.TFloatDoubleMap -> gnu.trove.map.aa:
    float getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    double put(float,double) -> put
    double putIfAbsent(float,double) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatDoubleMap) -> putAll
    double get(float) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    double remove(float) -> remove
    int size() -> size
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean containsValue(double) -> containsValue
    boolean containsKey(float) -> containsKey
    gnu.trove.iterator.TFloatDoubleIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatDoubleProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,double) -> adjustValue
    double adjustOrPutValue(float,double,double) -> adjustOrPutValue
gnu.trove.map.TFloatFloatMap -> gnu.trove.map.ab:
    float getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    float put(float,float) -> put
    float putIfAbsent(float,float) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatFloatMap) -> putAll
    float get(float) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    float remove(float) -> remove
    int size() -> size
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean containsValue(float) -> containsValue
    boolean containsKey(float) -> containsKey
    gnu.trove.iterator.TFloatFloatIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatFloatProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,float) -> adjustValue
    float adjustOrPutValue(float,float,float) -> adjustOrPutValue
gnu.trove.map.TFloatIntMap -> gnu.trove.map.ac:
    float getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int put(float,int) -> put
    int putIfAbsent(float,int) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatIntMap) -> putAll
    int get(float) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    int remove(float) -> remove
    int size() -> size
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean containsValue(int) -> containsValue
    boolean containsKey(float) -> containsKey
    gnu.trove.iterator.TFloatIntIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatIntProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,int) -> adjustValue
    int adjustOrPutValue(float,int,int) -> adjustOrPutValue
gnu.trove.map.TFloatLongMap -> gnu.trove.map.ad:
    float getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    long put(float,long) -> put
    long putIfAbsent(float,long) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatLongMap) -> putAll
    long get(float) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    long remove(float) -> remove
    int size() -> size
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean containsValue(long) -> containsValue
    boolean containsKey(float) -> containsKey
    gnu.trove.iterator.TFloatLongIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatLongProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,long) -> adjustValue
    long adjustOrPutValue(float,long,long) -> adjustOrPutValue
gnu.trove.map.TFloatObjectMap -> gnu.trove.map.ae:
    float getNoEntryKey() -> getNoEntryKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(float) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(float) -> get
    java.lang.Object put(float,java.lang.Object) -> put
    java.lang.Object putIfAbsent(float,java.lang.Object) -> putIfAbsent
    java.lang.Object remove(float) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TFloatObjectIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatObjectProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatObjectProcedure) -> retainEntries
gnu.trove.map.TFloatShortMap -> gnu.trove.map.af:
    float getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    short put(float,short) -> put
    short putIfAbsent(float,short) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatShortMap) -> putAll
    short get(float) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    short remove(float) -> remove
    int size() -> size
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean containsValue(short) -> containsValue
    boolean containsKey(float) -> containsKey
    gnu.trove.iterator.TFloatShortIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatShortProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,short) -> adjustValue
    short adjustOrPutValue(float,short,short) -> adjustOrPutValue
gnu.trove.map.TIntByteMap -> gnu.trove.map.ag:
    int getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    byte put(int,byte) -> put
    byte putIfAbsent(int,byte) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntByteMap) -> putAll
    byte get(int) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    byte remove(int) -> remove
    int size() -> size
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean containsValue(byte) -> containsValue
    boolean containsKey(int) -> containsKey
    gnu.trove.iterator.TIntByteIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntByteProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,byte) -> adjustValue
    byte adjustOrPutValue(int,byte,byte) -> adjustOrPutValue
gnu.trove.map.TIntCharMap -> gnu.trove.map.ah:
    int getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    char put(int,char) -> put
    char putIfAbsent(int,char) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntCharMap) -> putAll
    char get(int) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    char remove(int) -> remove
    int size() -> size
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean containsValue(char) -> containsValue
    boolean containsKey(int) -> containsKey
    gnu.trove.iterator.TIntCharIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntCharProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,char) -> adjustValue
    char adjustOrPutValue(int,char,char) -> adjustOrPutValue
gnu.trove.map.TIntDoubleMap -> gnu.trove.map.ai:
    int getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    double put(int,double) -> put
    double putIfAbsent(int,double) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntDoubleMap) -> putAll
    double get(int) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    double remove(int) -> remove
    int size() -> size
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean containsValue(double) -> containsValue
    boolean containsKey(int) -> containsKey
    gnu.trove.iterator.TIntDoubleIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntDoubleProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,double) -> adjustValue
    double adjustOrPutValue(int,double,double) -> adjustOrPutValue
gnu.trove.map.TIntFloatMap -> gnu.trove.map.aj:
    int getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    float put(int,float) -> put
    float putIfAbsent(int,float) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntFloatMap) -> putAll
    float get(int) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    float remove(int) -> remove
    int size() -> size
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean containsValue(float) -> containsValue
    boolean containsKey(int) -> containsKey
    gnu.trove.iterator.TIntFloatIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntFloatProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,float) -> adjustValue
    float adjustOrPutValue(int,float,float) -> adjustOrPutValue
gnu.trove.map.TIntIntMap -> gnu.trove.map.ak:
    int getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int put(int,int) -> put
    int putIfAbsent(int,int) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntIntMap) -> putAll
    int get(int) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    int remove(int) -> remove
    int size() -> size
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean containsValue(int) -> containsValue
    boolean containsKey(int) -> containsKey
    gnu.trove.iterator.TIntIntIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntIntProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,int) -> adjustValue
    int adjustOrPutValue(int,int,int) -> adjustOrPutValue
gnu.trove.map.TIntLongMap -> gnu.trove.map.al:
    int getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    long put(int,long) -> put
    long putIfAbsent(int,long) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntLongMap) -> putAll
    long get(int) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    long remove(int) -> remove
    int size() -> size
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean containsValue(long) -> containsValue
    boolean containsKey(int) -> containsKey
    gnu.trove.iterator.TIntLongIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntLongProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,long) -> adjustValue
    long adjustOrPutValue(int,long,long) -> adjustOrPutValue
gnu.trove.map.TIntObjectMap -> gnu.trove.map.am:
    int getNoEntryKey() -> getNoEntryKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(int) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(int) -> get
    java.lang.Object put(int,java.lang.Object) -> put
    java.lang.Object putIfAbsent(int,java.lang.Object) -> putIfAbsent
    java.lang.Object remove(int) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TIntObjectIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntObjectProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntObjectProcedure) -> retainEntries
gnu.trove.map.TIntShortMap -> gnu.trove.map.an:
    int getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    short put(int,short) -> put
    short putIfAbsent(int,short) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntShortMap) -> putAll
    short get(int) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    short remove(int) -> remove
    int size() -> size
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean containsValue(short) -> containsValue
    boolean containsKey(int) -> containsKey
    gnu.trove.iterator.TIntShortIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntShortProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,short) -> adjustValue
    short adjustOrPutValue(int,short,short) -> adjustOrPutValue
gnu.trove.map.TLongByteMap -> gnu.trove.map.ao:
    long getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    byte put(long,byte) -> put
    byte putIfAbsent(long,byte) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongByteMap) -> putAll
    byte get(long) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    byte remove(long) -> remove
    int size() -> size
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean containsValue(byte) -> containsValue
    boolean containsKey(long) -> containsKey
    gnu.trove.iterator.TLongByteIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongByteProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,byte) -> adjustValue
    byte adjustOrPutValue(long,byte,byte) -> adjustOrPutValue
gnu.trove.map.TLongCharMap -> gnu.trove.map.ap:
    long getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    char put(long,char) -> put
    char putIfAbsent(long,char) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongCharMap) -> putAll
    char get(long) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    char remove(long) -> remove
    int size() -> size
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean containsValue(char) -> containsValue
    boolean containsKey(long) -> containsKey
    gnu.trove.iterator.TLongCharIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongCharProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,char) -> adjustValue
    char adjustOrPutValue(long,char,char) -> adjustOrPutValue
gnu.trove.map.TLongDoubleMap -> gnu.trove.map.aq:
    long getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    double put(long,double) -> put
    double putIfAbsent(long,double) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongDoubleMap) -> putAll
    double get(long) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    double remove(long) -> remove
    int size() -> size
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean containsValue(double) -> containsValue
    boolean containsKey(long) -> containsKey
    gnu.trove.iterator.TLongDoubleIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongDoubleProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,double) -> adjustValue
    double adjustOrPutValue(long,double,double) -> adjustOrPutValue
gnu.trove.map.TLongFloatMap -> gnu.trove.map.ar:
    long getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    float put(long,float) -> put
    float putIfAbsent(long,float) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongFloatMap) -> putAll
    float get(long) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    float remove(long) -> remove
    int size() -> size
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean containsValue(float) -> containsValue
    boolean containsKey(long) -> containsKey
    gnu.trove.iterator.TLongFloatIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongFloatProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,float) -> adjustValue
    float adjustOrPutValue(long,float,float) -> adjustOrPutValue
gnu.trove.map.TLongIntMap -> gnu.trove.map.as:
    long getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int put(long,int) -> put
    int putIfAbsent(long,int) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongIntMap) -> putAll
    int get(long) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    int remove(long) -> remove
    int size() -> size
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean containsValue(int) -> containsValue
    boolean containsKey(long) -> containsKey
    gnu.trove.iterator.TLongIntIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongIntProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,int) -> adjustValue
    int adjustOrPutValue(long,int,int) -> adjustOrPutValue
gnu.trove.map.TLongLongMap -> gnu.trove.map.at:
    long getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    long put(long,long) -> put
    long putIfAbsent(long,long) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongLongMap) -> putAll
    long get(long) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    long remove(long) -> remove
    int size() -> size
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean containsValue(long) -> containsValue
    boolean containsKey(long) -> containsKey
    gnu.trove.iterator.TLongLongIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongLongProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,long) -> adjustValue
    long adjustOrPutValue(long,long,long) -> adjustOrPutValue
gnu.trove.map.TLongObjectMap -> gnu.trove.map.au:
    long getNoEntryKey() -> getNoEntryKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(long) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(long) -> get
    java.lang.Object put(long,java.lang.Object) -> put
    java.lang.Object putIfAbsent(long,java.lang.Object) -> putIfAbsent
    java.lang.Object remove(long) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TLongObjectIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongObjectProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongObjectProcedure) -> retainEntries
gnu.trove.map.TLongShortMap -> gnu.trove.map.av:
    long getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    short put(long,short) -> put
    short putIfAbsent(long,short) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongShortMap) -> putAll
    short get(long) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    short remove(long) -> remove
    int size() -> size
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean containsValue(short) -> containsValue
    boolean containsKey(long) -> containsKey
    gnu.trove.iterator.TLongShortIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongShortProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,short) -> adjustValue
    short adjustOrPutValue(long,short,short) -> adjustOrPutValue
gnu.trove.map.TMap -> gnu.trove.map.aw:
gnu.trove.map.TObjectByteMap -> gnu.trove.map.ax:
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(java.lang.Object) -> get
    byte put(java.lang.Object,byte) -> put
    byte putIfAbsent(java.lang.Object,byte) -> putIfAbsent
    byte remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectByteMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    gnu.trove.iterator.TObjectByteIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,byte) -> adjustValue
    byte adjustOrPutValue(java.lang.Object,byte,byte) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectByteProcedure) -> retainEntries
gnu.trove.map.TObjectCharMap -> gnu.trove.map.ay:
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(java.lang.Object) -> get
    char put(java.lang.Object,char) -> put
    char putIfAbsent(java.lang.Object,char) -> putIfAbsent
    char remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectCharMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    gnu.trove.iterator.TObjectCharIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,char) -> adjustValue
    char adjustOrPutValue(java.lang.Object,char,char) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectCharProcedure) -> retainEntries
gnu.trove.map.TObjectDoubleMap -> gnu.trove.map.az:
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(java.lang.Object) -> get
    double put(java.lang.Object,double) -> put
    double putIfAbsent(java.lang.Object,double) -> putIfAbsent
    double remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectDoubleMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    gnu.trove.iterator.TObjectDoubleIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,double) -> adjustValue
    double adjustOrPutValue(java.lang.Object,double,double) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectDoubleProcedure) -> retainEntries
gnu.trove.map.TObjectFloatMap -> gnu.trove.map.ba:
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(java.lang.Object) -> get
    float put(java.lang.Object,float) -> put
    float putIfAbsent(java.lang.Object,float) -> putIfAbsent
    float remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectFloatMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    gnu.trove.iterator.TObjectFloatIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,float) -> adjustValue
    float adjustOrPutValue(java.lang.Object,float,float) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectFloatProcedure) -> retainEntries
gnu.trove.map.TObjectIntMap -> gnu.trove.map.bb:
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(java.lang.Object) -> get
    int put(java.lang.Object,int) -> put
    int putIfAbsent(java.lang.Object,int) -> putIfAbsent
    int remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectIntMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    gnu.trove.iterator.TObjectIntIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,int) -> adjustValue
    int adjustOrPutValue(java.lang.Object,int,int) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectIntProcedure) -> retainEntries
gnu.trove.map.TObjectLongMap -> gnu.trove.map.bc:
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(java.lang.Object) -> get
    long put(java.lang.Object,long) -> put
    long putIfAbsent(java.lang.Object,long) -> putIfAbsent
    long remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectLongMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    gnu.trove.iterator.TObjectLongIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,long) -> adjustValue
    long adjustOrPutValue(java.lang.Object,long,long) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectLongProcedure) -> retainEntries
gnu.trove.map.TObjectShortMap -> gnu.trove.map.bd:
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(java.lang.Object) -> get
    short put(java.lang.Object,short) -> put
    short putIfAbsent(java.lang.Object,short) -> putIfAbsent
    short remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectShortMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    gnu.trove.iterator.TObjectShortIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,short) -> adjustValue
    short adjustOrPutValue(java.lang.Object,short,short) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TObjectShortProcedure) -> retainEntries
gnu.trove.map.TShortByteMap -> gnu.trove.map.be:
    short getNoEntryKey() -> getNoEntryKey
    byte getNoEntryValue() -> getNoEntryValue
    byte put(short,byte) -> put
    byte putIfAbsent(short,byte) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortByteMap) -> putAll
    byte get(short) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    byte remove(short) -> remove
    int size() -> size
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean containsValue(byte) -> containsValue
    boolean containsKey(short) -> containsKey
    gnu.trove.iterator.TShortByteIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortByteProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,byte) -> adjustValue
    byte adjustOrPutValue(short,byte,byte) -> adjustOrPutValue
gnu.trove.map.TShortCharMap -> gnu.trove.map.bf:
    short getNoEntryKey() -> getNoEntryKey
    char getNoEntryValue() -> getNoEntryValue
    char put(short,char) -> put
    char putIfAbsent(short,char) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortCharMap) -> putAll
    char get(short) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    char remove(short) -> remove
    int size() -> size
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean containsValue(char) -> containsValue
    boolean containsKey(short) -> containsKey
    gnu.trove.iterator.TShortCharIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortCharProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,char) -> adjustValue
    char adjustOrPutValue(short,char,char) -> adjustOrPutValue
gnu.trove.map.TShortDoubleMap -> gnu.trove.map.bg:
    short getNoEntryKey() -> getNoEntryKey
    double getNoEntryValue() -> getNoEntryValue
    double put(short,double) -> put
    double putIfAbsent(short,double) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortDoubleMap) -> putAll
    double get(short) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    double remove(short) -> remove
    int size() -> size
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean containsValue(double) -> containsValue
    boolean containsKey(short) -> containsKey
    gnu.trove.iterator.TShortDoubleIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortDoubleProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,double) -> adjustValue
    double adjustOrPutValue(short,double,double) -> adjustOrPutValue
gnu.trove.map.TShortFloatMap -> gnu.trove.map.bh:
    short getNoEntryKey() -> getNoEntryKey
    float getNoEntryValue() -> getNoEntryValue
    float put(short,float) -> put
    float putIfAbsent(short,float) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortFloatMap) -> putAll
    float get(short) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    float remove(short) -> remove
    int size() -> size
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean containsValue(float) -> containsValue
    boolean containsKey(short) -> containsKey
    gnu.trove.iterator.TShortFloatIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortFloatProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,float) -> adjustValue
    float adjustOrPutValue(short,float,float) -> adjustOrPutValue
gnu.trove.map.TShortIntMap -> gnu.trove.map.bi:
    short getNoEntryKey() -> getNoEntryKey
    int getNoEntryValue() -> getNoEntryValue
    int put(short,int) -> put
    int putIfAbsent(short,int) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortIntMap) -> putAll
    int get(short) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    int remove(short) -> remove
    int size() -> size
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean containsValue(int) -> containsValue
    boolean containsKey(short) -> containsKey
    gnu.trove.iterator.TShortIntIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortIntProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,int) -> adjustValue
    int adjustOrPutValue(short,int,int) -> adjustOrPutValue
gnu.trove.map.TShortLongMap -> gnu.trove.map.bj:
    short getNoEntryKey() -> getNoEntryKey
    long getNoEntryValue() -> getNoEntryValue
    long put(short,long) -> put
    long putIfAbsent(short,long) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortLongMap) -> putAll
    long get(short) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    long remove(short) -> remove
    int size() -> size
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean containsValue(long) -> containsValue
    boolean containsKey(short) -> containsKey
    gnu.trove.iterator.TShortLongIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortLongProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,long) -> adjustValue
    long adjustOrPutValue(short,long,long) -> adjustOrPutValue
gnu.trove.map.TShortObjectMap -> gnu.trove.map.bk:
    short getNoEntryKey() -> getNoEntryKey
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(short) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(short) -> get
    java.lang.Object put(short,java.lang.Object) -> put
    java.lang.Object putIfAbsent(short,java.lang.Object) -> putIfAbsent
    java.lang.Object remove(short) -> remove
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TShortObjectIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortObjectProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortObjectProcedure) -> retainEntries
gnu.trove.map.TShortShortMap -> gnu.trove.map.bl:
    short getNoEntryKey() -> getNoEntryKey
    short getNoEntryValue() -> getNoEntryValue
    short put(short,short) -> put
    short putIfAbsent(short,short) -> putIfAbsent
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortShortMap) -> putAll
    short get(short) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    short remove(short) -> remove
    int size() -> size
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean containsValue(short) -> containsValue
    boolean containsKey(short) -> containsKey
    gnu.trove.iterator.TShortShortIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortShortProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,short) -> adjustValue
    short adjustOrPutValue(short,short,short) -> adjustOrPutValue
gnu.trove.map.custom_hash.TObjectByteCustomHashMap -> gnu.trove.map.custom_hash.TObjectByteCustomHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TObjectByteProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    byte[] _values -> _values
    byte no_entry_value -> no_entry_value
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    byte getNoEntryValue() -> getNoEntryValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(java.lang.Object) -> get
    byte put(java.lang.Object,byte) -> put
    byte putIfAbsent(java.lang.Object,byte) -> putIfAbsent
    byte doPut(byte,int) -> a
    byte remove(java.lang.Object) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectByteMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    gnu.trove.iterator.TObjectByteIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,byte) -> adjustValue
    byte adjustOrPutValue(java.lang.Object,byte,byte) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectByteProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TObjectByteProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$100(gnu.trove.map.custom_hash.TObjectByteCustomHashMap) -> access$100
    int access$200(gnu.trove.map.custom_hash.TObjectByteCustomHashMap) -> access$200
gnu.trove.map.custom_hash.TObjectByteCustomHashMap$1 -> gnu.trove.map.custom_hash.a:
    gnu.trove.map.custom_hash.TObjectByteCustomHashMap this$0 -> a
    boolean execute(java.lang.Object,byte) -> a
gnu.trove.map.custom_hash.TObjectByteCustomHashMap$2 -> gnu.trove.map.custom_hash.b:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.custom_hash.TObjectByteCustomHashMap this$0 -> b
    boolean execute(java.lang.Object,byte) -> a
gnu.trove.map.custom_hash.TObjectByteCustomHashMap$KeyView -> gnu.trove.map.custom_hash.c:
    gnu.trove.map.custom_hash.TObjectByteCustomHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
gnu.trove.map.custom_hash.TObjectByteCustomHashMap$MapBackedView -> gnu.trove.map.custom_hash.d:
    gnu.trove.map.custom_hash.TObjectByteCustomHashMap this$0 -> b
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.custom_hash.TObjectByteCustomHashMap$TByteValueCollection -> gnu.trove.map.custom_hash.e:
    gnu.trove.map.custom_hash.TObjectByteCustomHashMap this$0 -> a
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.custom_hash.TObjectByteCustomHashMap$TByteValueCollection$1 -> gnu.trove.map.custom_hash.f:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.custom_hash.TObjectByteCustomHashMap$TByteValueCollection this$1 -> b
    boolean execute(byte) -> a
gnu.trove.map.custom_hash.TObjectByteCustomHashMap$TByteValueCollection$TObjectByteValueHashIterator -> gnu.trove.map.custom_hash.g:
    gnu.trove.impl.hash.THash _hash -> a
    int _expectedSize -> b
    int _index -> c
    gnu.trove.map.custom_hash.TObjectByteCustomHashMap$TByteValueCollection this$1 -> d
    boolean hasNext() -> hasNext
    byte next() -> a
    void remove() -> remove
    void moveToNextIndex() -> b
    int nextIndex() -> c
gnu.trove.map.custom_hash.TObjectByteCustomHashMap$TObjectByteHashIterator -> gnu.trove.map.custom_hash.h:
    gnu.trove.map.custom_hash.TObjectByteCustomHashMap _map -> f
    gnu.trove.map.custom_hash.TObjectByteCustomHashMap this$0 -> e
    void advance() -> c
    java.lang.Object key() -> a
    byte value() -> v_
gnu.trove.map.custom_hash.TObjectCharCustomHashMap -> gnu.trove.map.custom_hash.TObjectCharCustomHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TObjectCharProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    char[] _values -> _values
    char no_entry_value -> no_entry_value
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    char getNoEntryValue() -> getNoEntryValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(java.lang.Object) -> get
    char put(java.lang.Object,char) -> put
    char putIfAbsent(java.lang.Object,char) -> putIfAbsent
    char doPut(char,int) -> a
    char remove(java.lang.Object) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectCharMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    gnu.trove.iterator.TObjectCharIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,char) -> adjustValue
    char adjustOrPutValue(java.lang.Object,char,char) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectCharProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TObjectCharProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$100(gnu.trove.map.custom_hash.TObjectCharCustomHashMap) -> access$100
    int access$200(gnu.trove.map.custom_hash.TObjectCharCustomHashMap) -> access$200
gnu.trove.map.custom_hash.TObjectCharCustomHashMap$1 -> gnu.trove.map.custom_hash.i:
    gnu.trove.map.custom_hash.TObjectCharCustomHashMap this$0 -> a
    boolean execute(java.lang.Object,char) -> a
gnu.trove.map.custom_hash.TObjectCharCustomHashMap$2 -> gnu.trove.map.custom_hash.j:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.custom_hash.TObjectCharCustomHashMap this$0 -> b
    boolean execute(java.lang.Object,char) -> a
gnu.trove.map.custom_hash.TObjectCharCustomHashMap$KeyView -> gnu.trove.map.custom_hash.k:
    gnu.trove.map.custom_hash.TObjectCharCustomHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
gnu.trove.map.custom_hash.TObjectCharCustomHashMap$MapBackedView -> gnu.trove.map.custom_hash.l:
    gnu.trove.map.custom_hash.TObjectCharCustomHashMap this$0 -> b
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.custom_hash.TObjectCharCustomHashMap$TCharValueCollection -> gnu.trove.map.custom_hash.m:
    gnu.trove.map.custom_hash.TObjectCharCustomHashMap this$0 -> a
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.custom_hash.TObjectCharCustomHashMap$TCharValueCollection$1 -> gnu.trove.map.custom_hash.n:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.custom_hash.TObjectCharCustomHashMap$TCharValueCollection this$1 -> b
    boolean execute(char) -> a
gnu.trove.map.custom_hash.TObjectCharCustomHashMap$TCharValueCollection$TObjectCharValueHashIterator -> gnu.trove.map.custom_hash.o:
    gnu.trove.impl.hash.THash _hash -> a
    int _expectedSize -> b
    int _index -> c
    gnu.trove.map.custom_hash.TObjectCharCustomHashMap$TCharValueCollection this$1 -> d
    boolean hasNext() -> hasNext
    char next() -> a
    void remove() -> remove
    void moveToNextIndex() -> b
    int nextIndex() -> c
gnu.trove.map.custom_hash.TObjectCharCustomHashMap$TObjectCharHashIterator -> gnu.trove.map.custom_hash.p:
    gnu.trove.map.custom_hash.TObjectCharCustomHashMap _map -> f
    gnu.trove.map.custom_hash.TObjectCharCustomHashMap this$0 -> e
    void advance() -> c
    java.lang.Object key() -> a
    char value() -> x_
gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap -> gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TObjectDoubleProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    double[] _values -> _values
    double no_entry_value -> no_entry_value
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    double getNoEntryValue() -> getNoEntryValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(java.lang.Object) -> get
    double put(java.lang.Object,double) -> put
    double putIfAbsent(java.lang.Object,double) -> putIfAbsent
    double doPut(double,int) -> a
    double remove(java.lang.Object) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectDoubleMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    gnu.trove.iterator.TObjectDoubleIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,double) -> adjustValue
    double adjustOrPutValue(java.lang.Object,double,double) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectDoubleProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TObjectDoubleProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$100(gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap) -> access$100
    int access$200(gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap) -> access$200
gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap$1 -> gnu.trove.map.custom_hash.q:
    gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap this$0 -> a
    boolean execute(java.lang.Object,double) -> a
gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap$2 -> gnu.trove.map.custom_hash.r:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap this$0 -> b
    boolean execute(java.lang.Object,double) -> a
gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap$KeyView -> gnu.trove.map.custom_hash.s:
    gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap$MapBackedView -> gnu.trove.map.custom_hash.t:
    gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap this$0 -> b
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap$TDoubleValueCollection -> gnu.trove.map.custom_hash.u:
    gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap this$0 -> a
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap$TDoubleValueCollection$1 -> gnu.trove.map.custom_hash.v:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap$TDoubleValueCollection this$1 -> b
    boolean execute(double) -> a
gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap$TDoubleValueCollection$TObjectDoubleValueHashIterator -> gnu.trove.map.custom_hash.w:
    gnu.trove.impl.hash.THash _hash -> a
    int _expectedSize -> b
    int _index -> c
    gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap$TDoubleValueCollection this$1 -> d
    boolean hasNext() -> hasNext
    double next() -> a
    void remove() -> remove
    void moveToNextIndex() -> b
    int nextIndex() -> c
gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap$TObjectDoubleHashIterator -> gnu.trove.map.custom_hash.x:
    gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap _map -> f
    gnu.trove.map.custom_hash.TObjectDoubleCustomHashMap this$0 -> e
    void advance() -> c
    java.lang.Object key() -> a
    double value() -> y_
gnu.trove.map.custom_hash.TObjectFloatCustomHashMap -> gnu.trove.map.custom_hash.TObjectFloatCustomHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TObjectFloatProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    float[] _values -> _values
    float no_entry_value -> no_entry_value
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    float getNoEntryValue() -> getNoEntryValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(java.lang.Object) -> get
    float put(java.lang.Object,float) -> put
    float putIfAbsent(java.lang.Object,float) -> putIfAbsent
    float doPut(float,int) -> a
    float remove(java.lang.Object) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectFloatMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    gnu.trove.iterator.TObjectFloatIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,float) -> adjustValue
    float adjustOrPutValue(java.lang.Object,float,float) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectFloatProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TObjectFloatProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$100(gnu.trove.map.custom_hash.TObjectFloatCustomHashMap) -> access$100
    int access$200(gnu.trove.map.custom_hash.TObjectFloatCustomHashMap) -> access$200
gnu.trove.map.custom_hash.TObjectFloatCustomHashMap$1 -> gnu.trove.map.custom_hash.y:
    gnu.trove.map.custom_hash.TObjectFloatCustomHashMap this$0 -> a
    boolean execute(java.lang.Object,float) -> a
gnu.trove.map.custom_hash.TObjectFloatCustomHashMap$2 -> gnu.trove.map.custom_hash.z:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.custom_hash.TObjectFloatCustomHashMap this$0 -> b
    boolean execute(java.lang.Object,float) -> a
gnu.trove.map.custom_hash.TObjectFloatCustomHashMap$KeyView -> gnu.trove.map.custom_hash.aa:
    gnu.trove.map.custom_hash.TObjectFloatCustomHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
gnu.trove.map.custom_hash.TObjectFloatCustomHashMap$MapBackedView -> gnu.trove.map.custom_hash.ab:
    gnu.trove.map.custom_hash.TObjectFloatCustomHashMap this$0 -> b
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.custom_hash.TObjectFloatCustomHashMap$TFloatValueCollection -> gnu.trove.map.custom_hash.ac:
    gnu.trove.map.custom_hash.TObjectFloatCustomHashMap this$0 -> a
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.custom_hash.TObjectFloatCustomHashMap$TFloatValueCollection$1 -> gnu.trove.map.custom_hash.ad:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.custom_hash.TObjectFloatCustomHashMap$TFloatValueCollection this$1 -> b
    boolean execute(float) -> a
gnu.trove.map.custom_hash.TObjectFloatCustomHashMap$TFloatValueCollection$TObjectFloatValueHashIterator -> gnu.trove.map.custom_hash.ae:
    gnu.trove.impl.hash.THash _hash -> a
    int _expectedSize -> b
    int _index -> c
    gnu.trove.map.custom_hash.TObjectFloatCustomHashMap$TFloatValueCollection this$1 -> d
    boolean hasNext() -> hasNext
    float next() -> a
    void remove() -> remove
    void moveToNextIndex() -> b
    int nextIndex() -> c
gnu.trove.map.custom_hash.TObjectFloatCustomHashMap$TObjectFloatHashIterator -> gnu.trove.map.custom_hash.af:
    gnu.trove.map.custom_hash.TObjectFloatCustomHashMap _map -> f
    gnu.trove.map.custom_hash.TObjectFloatCustomHashMap this$0 -> e
    void advance() -> c
    java.lang.Object key() -> a
    float value() -> z_
gnu.trove.map.custom_hash.TObjectIntCustomHashMap -> gnu.trove.map.custom_hash.TObjectIntCustomHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TObjectIntProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    int[] _values -> _values
    int no_entry_value -> no_entry_value
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    int getNoEntryValue() -> getNoEntryValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(java.lang.Object) -> get
    int put(java.lang.Object,int) -> put
    int putIfAbsent(java.lang.Object,int) -> putIfAbsent
    int doPut(int,int) -> a
    int remove(java.lang.Object) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectIntMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    gnu.trove.iterator.TObjectIntIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,int) -> adjustValue
    int adjustOrPutValue(java.lang.Object,int,int) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectIntProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TObjectIntProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$100(gnu.trove.map.custom_hash.TObjectIntCustomHashMap) -> access$100
    int access$200(gnu.trove.map.custom_hash.TObjectIntCustomHashMap) -> access$200
gnu.trove.map.custom_hash.TObjectIntCustomHashMap$1 -> gnu.trove.map.custom_hash.ag:
    gnu.trove.map.custom_hash.TObjectIntCustomHashMap this$0 -> a
    boolean execute(java.lang.Object,int) -> a
gnu.trove.map.custom_hash.TObjectIntCustomHashMap$2 -> gnu.trove.map.custom_hash.ah:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.custom_hash.TObjectIntCustomHashMap this$0 -> b
    boolean execute(java.lang.Object,int) -> a
gnu.trove.map.custom_hash.TObjectIntCustomHashMap$KeyView -> gnu.trove.map.custom_hash.ai:
    gnu.trove.map.custom_hash.TObjectIntCustomHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
gnu.trove.map.custom_hash.TObjectIntCustomHashMap$MapBackedView -> gnu.trove.map.custom_hash.aj:
    gnu.trove.map.custom_hash.TObjectIntCustomHashMap this$0 -> b
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.custom_hash.TObjectIntCustomHashMap$TIntValueCollection -> gnu.trove.map.custom_hash.ak:
    gnu.trove.map.custom_hash.TObjectIntCustomHashMap this$0 -> a
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.custom_hash.TObjectIntCustomHashMap$TIntValueCollection$1 -> gnu.trove.map.custom_hash.al:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.custom_hash.TObjectIntCustomHashMap$TIntValueCollection this$1 -> b
    boolean execute(int) -> a
gnu.trove.map.custom_hash.TObjectIntCustomHashMap$TIntValueCollection$TObjectIntValueHashIterator -> gnu.trove.map.custom_hash.am:
    gnu.trove.impl.hash.THash _hash -> a
    int _expectedSize -> b
    int _index -> c
    gnu.trove.map.custom_hash.TObjectIntCustomHashMap$TIntValueCollection this$1 -> d
    boolean hasNext() -> hasNext
    int next() -> a
    void remove() -> remove
    void moveToNextIndex() -> b
    int nextIndex() -> c
gnu.trove.map.custom_hash.TObjectIntCustomHashMap$TObjectIntHashIterator -> gnu.trove.map.custom_hash.an:
    gnu.trove.map.custom_hash.TObjectIntCustomHashMap _map -> f
    gnu.trove.map.custom_hash.TObjectIntCustomHashMap this$0 -> e
    void advance() -> c
    java.lang.Object key() -> a
    int value() -> A_
gnu.trove.map.custom_hash.TObjectLongCustomHashMap -> gnu.trove.map.custom_hash.TObjectLongCustomHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TObjectLongProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    long[] _values -> _values
    long no_entry_value -> no_entry_value
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    long getNoEntryValue() -> getNoEntryValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(java.lang.Object) -> get
    long put(java.lang.Object,long) -> put
    long putIfAbsent(java.lang.Object,long) -> putIfAbsent
    long doPut(long,int) -> a
    long remove(java.lang.Object) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectLongMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    gnu.trove.iterator.TObjectLongIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,long) -> adjustValue
    long adjustOrPutValue(java.lang.Object,long,long) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectLongProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TObjectLongProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$100(gnu.trove.map.custom_hash.TObjectLongCustomHashMap) -> access$100
    int access$200(gnu.trove.map.custom_hash.TObjectLongCustomHashMap) -> access$200
gnu.trove.map.custom_hash.TObjectLongCustomHashMap$1 -> gnu.trove.map.custom_hash.ao:
    gnu.trove.map.custom_hash.TObjectLongCustomHashMap this$0 -> a
    boolean execute(java.lang.Object,long) -> a
gnu.trove.map.custom_hash.TObjectLongCustomHashMap$2 -> gnu.trove.map.custom_hash.ap:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.custom_hash.TObjectLongCustomHashMap this$0 -> b
    boolean execute(java.lang.Object,long) -> a
gnu.trove.map.custom_hash.TObjectLongCustomHashMap$KeyView -> gnu.trove.map.custom_hash.aq:
    gnu.trove.map.custom_hash.TObjectLongCustomHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
gnu.trove.map.custom_hash.TObjectLongCustomHashMap$MapBackedView -> gnu.trove.map.custom_hash.ar:
    gnu.trove.map.custom_hash.TObjectLongCustomHashMap this$0 -> b
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.custom_hash.TObjectLongCustomHashMap$TLongValueCollection -> gnu.trove.map.custom_hash.as:
    gnu.trove.map.custom_hash.TObjectLongCustomHashMap this$0 -> a
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.custom_hash.TObjectLongCustomHashMap$TLongValueCollection$1 -> gnu.trove.map.custom_hash.at:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.custom_hash.TObjectLongCustomHashMap$TLongValueCollection this$1 -> b
    boolean execute(long) -> a
gnu.trove.map.custom_hash.TObjectLongCustomHashMap$TLongValueCollection$TObjectLongValueHashIterator -> gnu.trove.map.custom_hash.au:
    gnu.trove.impl.hash.THash _hash -> a
    int _expectedSize -> b
    int _index -> c
    gnu.trove.map.custom_hash.TObjectLongCustomHashMap$TLongValueCollection this$1 -> d
    boolean hasNext() -> hasNext
    long next() -> a
    void remove() -> remove
    void moveToNextIndex() -> b
    int nextIndex() -> c
gnu.trove.map.custom_hash.TObjectLongCustomHashMap$TObjectLongHashIterator -> gnu.trove.map.custom_hash.av:
    gnu.trove.map.custom_hash.TObjectLongCustomHashMap _map -> f
    gnu.trove.map.custom_hash.TObjectLongCustomHashMap this$0 -> e
    void advance() -> c
    java.lang.Object key() -> a
    long value() -> B_
gnu.trove.map.custom_hash.TObjectShortCustomHashMap -> gnu.trove.map.custom_hash.TObjectShortCustomHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TObjectShortProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    short[] _values -> _values
    short no_entry_value -> no_entry_value
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    short getNoEntryValue() -> getNoEntryValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(java.lang.Object) -> get
    short put(java.lang.Object,short) -> put
    short putIfAbsent(java.lang.Object,short) -> putIfAbsent
    short doPut(short,int) -> a
    short remove(java.lang.Object) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectShortMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    gnu.trove.iterator.TObjectShortIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,short) -> adjustValue
    short adjustOrPutValue(java.lang.Object,short,short) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectShortProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TObjectShortProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$100(gnu.trove.map.custom_hash.TObjectShortCustomHashMap) -> access$100
    int access$200(gnu.trove.map.custom_hash.TObjectShortCustomHashMap) -> access$200
gnu.trove.map.custom_hash.TObjectShortCustomHashMap$1 -> gnu.trove.map.custom_hash.aw:
    gnu.trove.map.custom_hash.TObjectShortCustomHashMap this$0 -> a
    boolean execute(java.lang.Object,short) -> a
gnu.trove.map.custom_hash.TObjectShortCustomHashMap$2 -> gnu.trove.map.custom_hash.ax:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.custom_hash.TObjectShortCustomHashMap this$0 -> b
    boolean execute(java.lang.Object,short) -> a
gnu.trove.map.custom_hash.TObjectShortCustomHashMap$KeyView -> gnu.trove.map.custom_hash.ay:
    gnu.trove.map.custom_hash.TObjectShortCustomHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
gnu.trove.map.custom_hash.TObjectShortCustomHashMap$MapBackedView -> gnu.trove.map.custom_hash.az:
    gnu.trove.map.custom_hash.TObjectShortCustomHashMap this$0 -> b
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.custom_hash.TObjectShortCustomHashMap$TObjectShortHashIterator -> gnu.trove.map.custom_hash.ba:
    gnu.trove.map.custom_hash.TObjectShortCustomHashMap _map -> f
    gnu.trove.map.custom_hash.TObjectShortCustomHashMap this$0 -> e
    void advance() -> c
    java.lang.Object key() -> a
    short value() -> C_
gnu.trove.map.custom_hash.TObjectShortCustomHashMap$TShortValueCollection -> gnu.trove.map.custom_hash.bb:
    gnu.trove.map.custom_hash.TObjectShortCustomHashMap this$0 -> a
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.custom_hash.TObjectShortCustomHashMap$TShortValueCollection$1 -> gnu.trove.map.custom_hash.bc:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.custom_hash.TObjectShortCustomHashMap$TShortValueCollection this$1 -> b
    boolean execute(short) -> a
gnu.trove.map.custom_hash.TObjectShortCustomHashMap$TShortValueCollection$TObjectShortValueHashIterator -> gnu.trove.map.custom_hash.bd:
    gnu.trove.impl.hash.THash _hash -> a
    int _expectedSize -> b
    int _index -> c
    gnu.trove.map.custom_hash.TObjectShortCustomHashMap$TShortValueCollection this$1 -> d
    boolean hasNext() -> hasNext
    short next() -> a
    void remove() -> remove
    void moveToNextIndex() -> b
    int nextIndex() -> c
gnu.trove.map.hash.TByteByteHashMap -> gnu.trove.map.hash.TByteByteHashMap:
    long serialVersionUID -> serialVersionUID
    byte[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    byte put(byte,byte) -> put
    byte putIfAbsent(byte,byte) -> putIfAbsent
    byte doPut(byte,byte,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteByteMap) -> putAll
    byte get(byte) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    byte remove(byte) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean containsValue(byte) -> containsValue
    boolean containsKey(byte) -> containsKey
    gnu.trove.iterator.TByteByteIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteByteProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,byte) -> adjustValue
    byte adjustOrPutValue(byte,byte,byte) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    byte access$000(gnu.trove.map.hash.TByteByteHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TByteByteHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TByteByteHashMap) -> access$200
    byte access$300(gnu.trove.map.hash.TByteByteHashMap) -> access$300
    byte access$400(gnu.trove.map.hash.TByteByteHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TByteByteHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TByteByteHashMap) -> access$600
gnu.trove.map.hash.TByteByteHashMap$1 -> gnu.trove.map.hash.a:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteByteHashMap this$0 -> b
    boolean execute(byte,byte) -> a
gnu.trove.map.hash.TByteByteHashMap$TByteByteHashIterator -> gnu.trove.map.hash.b:
    gnu.trove.map.hash.TByteByteHashMap this$0 -> d
    void advance() -> c
    byte key() -> a
    byte value() -> D_
    void remove() -> remove
gnu.trove.map.hash.TByteByteHashMap$TByteByteKeyHashIterator -> gnu.trove.map.hash.c:
    gnu.trove.map.hash.TByteByteHashMap this$0 -> d
    byte next() -> a
    void remove() -> remove
gnu.trove.map.hash.TByteByteHashMap$TByteByteValueHashIterator -> gnu.trove.map.hash.d:
    gnu.trove.map.hash.TByteByteHashMap this$0 -> d
    byte next() -> a
    void remove() -> remove
gnu.trove.map.hash.TByteByteHashMap$TKeyView -> gnu.trove.map.hash.e:
    gnu.trove.map.hash.TByteByteHashMap this$0 -> a
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TByteByteHashMap$TKeyView$1 -> gnu.trove.map.hash.f:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteByteHashMap$TKeyView this$1 -> b
    boolean execute(byte) -> a
gnu.trove.map.hash.TByteByteHashMap$TValueView -> gnu.trove.map.hash.g:
    gnu.trove.map.hash.TByteByteHashMap this$0 -> a
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TByteByteHashMap$TValueView$1 -> gnu.trove.map.hash.h:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteByteHashMap$TValueView this$1 -> b
    boolean execute(byte) -> a
gnu.trove.map.hash.TByteCharHashMap -> gnu.trove.map.hash.TByteCharHashMap:
    long serialVersionUID -> serialVersionUID
    char[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    char put(byte,char) -> put
    char putIfAbsent(byte,char) -> putIfAbsent
    char doPut(byte,char,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteCharMap) -> putAll
    char get(byte) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    char remove(byte) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean containsValue(char) -> containsValue
    boolean containsKey(byte) -> containsKey
    gnu.trove.iterator.TByteCharIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteCharProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,char) -> adjustValue
    char adjustOrPutValue(byte,char,char) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    byte access$000(gnu.trove.map.hash.TByteCharHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TByteCharHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TByteCharHashMap) -> access$200
    char access$300(gnu.trove.map.hash.TByteCharHashMap) -> access$300
    char access$400(gnu.trove.map.hash.TByteCharHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TByteCharHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TByteCharHashMap) -> access$600
gnu.trove.map.hash.TByteCharHashMap$1 -> gnu.trove.map.hash.i:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteCharHashMap this$0 -> b
    boolean execute(byte,char) -> a
gnu.trove.map.hash.TByteCharHashMap$TByteCharHashIterator -> gnu.trove.map.hash.j:
    gnu.trove.map.hash.TByteCharHashMap this$0 -> d
    void advance() -> c
    byte key() -> a
    char value() -> F_
    void remove() -> remove
gnu.trove.map.hash.TByteCharHashMap$TByteCharKeyHashIterator -> gnu.trove.map.hash.k:
    gnu.trove.map.hash.TByteCharHashMap this$0 -> d
    byte next() -> a
    void remove() -> remove
gnu.trove.map.hash.TByteCharHashMap$TByteCharValueHashIterator -> gnu.trove.map.hash.l:
    gnu.trove.map.hash.TByteCharHashMap this$0 -> d
    char next() -> a
    void remove() -> remove
gnu.trove.map.hash.TByteCharHashMap$TKeyView -> gnu.trove.map.hash.m:
    gnu.trove.map.hash.TByteCharHashMap this$0 -> a
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TByteCharHashMap$TKeyView$1 -> gnu.trove.map.hash.n:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteCharHashMap$TKeyView this$1 -> b
    boolean execute(byte) -> a
gnu.trove.map.hash.TByteCharHashMap$TValueView -> gnu.trove.map.hash.o:
    gnu.trove.map.hash.TByteCharHashMap this$0 -> a
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TByteCharHashMap$TValueView$1 -> gnu.trove.map.hash.p:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteCharHashMap$TValueView this$1 -> b
    boolean execute(char) -> a
gnu.trove.map.hash.TByteDoubleHashMap -> gnu.trove.map.hash.TByteDoubleHashMap:
    long serialVersionUID -> serialVersionUID
    double[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    double put(byte,double) -> put
    double putIfAbsent(byte,double) -> putIfAbsent
    double doPut(byte,double,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteDoubleMap) -> putAll
    double get(byte) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    double remove(byte) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean containsValue(double) -> containsValue
    boolean containsKey(byte) -> containsKey
    gnu.trove.iterator.TByteDoubleIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteDoubleProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,double) -> adjustValue
    double adjustOrPutValue(byte,double,double) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    byte access$000(gnu.trove.map.hash.TByteDoubleHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TByteDoubleHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TByteDoubleHashMap) -> access$200
    double access$300(gnu.trove.map.hash.TByteDoubleHashMap) -> access$300
    double access$400(gnu.trove.map.hash.TByteDoubleHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TByteDoubleHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TByteDoubleHashMap) -> access$600
gnu.trove.map.hash.TByteDoubleHashMap$1 -> gnu.trove.map.hash.q:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteDoubleHashMap this$0 -> b
    boolean execute(byte,double) -> a
gnu.trove.map.hash.TByteDoubleHashMap$TByteDoubleHashIterator -> gnu.trove.map.hash.r:
    gnu.trove.map.hash.TByteDoubleHashMap this$0 -> d
    void advance() -> c
    byte key() -> a
    double value() -> G_
    void remove() -> remove
gnu.trove.map.hash.TByteDoubleHashMap$TByteDoubleKeyHashIterator -> gnu.trove.map.hash.s:
    gnu.trove.map.hash.TByteDoubleHashMap this$0 -> d
    byte next() -> a
    void remove() -> remove
gnu.trove.map.hash.TByteDoubleHashMap$TByteDoubleValueHashIterator -> gnu.trove.map.hash.t:
    gnu.trove.map.hash.TByteDoubleHashMap this$0 -> d
    double next() -> a
    void remove() -> remove
gnu.trove.map.hash.TByteDoubleHashMap$TKeyView -> gnu.trove.map.hash.u:
    gnu.trove.map.hash.TByteDoubleHashMap this$0 -> a
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TByteDoubleHashMap$TKeyView$1 -> gnu.trove.map.hash.v:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteDoubleHashMap$TKeyView this$1 -> b
    boolean execute(byte) -> a
gnu.trove.map.hash.TByteDoubleHashMap$TValueView -> gnu.trove.map.hash.w:
    gnu.trove.map.hash.TByteDoubleHashMap this$0 -> a
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TByteDoubleHashMap$TValueView$1 -> gnu.trove.map.hash.x:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteDoubleHashMap$TValueView this$1 -> b
    boolean execute(double) -> a
gnu.trove.map.hash.TByteFloatHashMap -> gnu.trove.map.hash.TByteFloatHashMap:
    long serialVersionUID -> serialVersionUID
    float[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    float put(byte,float) -> put
    float putIfAbsent(byte,float) -> putIfAbsent
    float doPut(byte,float,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteFloatMap) -> putAll
    float get(byte) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    float remove(byte) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean containsValue(float) -> containsValue
    boolean containsKey(byte) -> containsKey
    gnu.trove.iterator.TByteFloatIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteFloatProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,float) -> adjustValue
    float adjustOrPutValue(byte,float,float) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    byte access$000(gnu.trove.map.hash.TByteFloatHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TByteFloatHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TByteFloatHashMap) -> access$200
    float access$300(gnu.trove.map.hash.TByteFloatHashMap) -> access$300
    float access$400(gnu.trove.map.hash.TByteFloatHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TByteFloatHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TByteFloatHashMap) -> access$600
gnu.trove.map.hash.TByteFloatHashMap$1 -> gnu.trove.map.hash.y:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteFloatHashMap this$0 -> b
    boolean execute(byte,float) -> a
gnu.trove.map.hash.TByteFloatHashMap$TByteFloatHashIterator -> gnu.trove.map.hash.z:
    gnu.trove.map.hash.TByteFloatHashMap this$0 -> d
    void advance() -> c
    byte key() -> a
    float value() -> H_
    void remove() -> remove
gnu.trove.map.hash.TByteFloatHashMap$TByteFloatKeyHashIterator -> gnu.trove.map.hash.aa:
    gnu.trove.map.hash.TByteFloatHashMap this$0 -> d
    byte next() -> a
    void remove() -> remove
gnu.trove.map.hash.TByteFloatHashMap$TByteFloatValueHashIterator -> gnu.trove.map.hash.ab:
    gnu.trove.map.hash.TByteFloatHashMap this$0 -> d
    float next() -> a
    void remove() -> remove
gnu.trove.map.hash.TByteFloatHashMap$TKeyView -> gnu.trove.map.hash.ac:
    gnu.trove.map.hash.TByteFloatHashMap this$0 -> a
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TByteFloatHashMap$TKeyView$1 -> gnu.trove.map.hash.ad:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteFloatHashMap$TKeyView this$1 -> b
    boolean execute(byte) -> a
gnu.trove.map.hash.TByteFloatHashMap$TValueView -> gnu.trove.map.hash.ae:
    gnu.trove.map.hash.TByteFloatHashMap this$0 -> a
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TByteFloatHashMap$TValueView$1 -> gnu.trove.map.hash.af:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteFloatHashMap$TValueView this$1 -> b
    boolean execute(float) -> a
gnu.trove.map.hash.TByteIntHashMap -> gnu.trove.map.hash.TByteIntHashMap:
    long serialVersionUID -> serialVersionUID
    int[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    int put(byte,int) -> put
    int putIfAbsent(byte,int) -> putIfAbsent
    int doPut(byte,int,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteIntMap) -> putAll
    int get(byte) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    int remove(byte) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean containsValue(int) -> containsValue
    boolean containsKey(byte) -> containsKey
    gnu.trove.iterator.TByteIntIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteIntProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,int) -> adjustValue
    int adjustOrPutValue(byte,int,int) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    byte access$000(gnu.trove.map.hash.TByteIntHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TByteIntHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TByteIntHashMap) -> access$200
    int access$300(gnu.trove.map.hash.TByteIntHashMap) -> access$300
    int access$400(gnu.trove.map.hash.TByteIntHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TByteIntHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TByteIntHashMap) -> access$600
gnu.trove.map.hash.TByteIntHashMap$1 -> gnu.trove.map.hash.ag:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteIntHashMap this$0 -> b
    boolean execute(byte,int) -> a
gnu.trove.map.hash.TByteIntHashMap$TByteIntHashIterator -> gnu.trove.map.hash.ah:
    gnu.trove.map.hash.TByteIntHashMap this$0 -> d
    void advance() -> c
    byte key() -> a
    int value() -> I_
    void remove() -> remove
gnu.trove.map.hash.TByteIntHashMap$TByteIntKeyHashIterator -> gnu.trove.map.hash.ai:
    gnu.trove.map.hash.TByteIntHashMap this$0 -> d
    byte next() -> a
    void remove() -> remove
gnu.trove.map.hash.TByteIntHashMap$TByteIntValueHashIterator -> gnu.trove.map.hash.aj:
    gnu.trove.map.hash.TByteIntHashMap this$0 -> d
    int next() -> a
    void remove() -> remove
gnu.trove.map.hash.TByteIntHashMap$TKeyView -> gnu.trove.map.hash.ak:
    gnu.trove.map.hash.TByteIntHashMap this$0 -> a
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TByteIntHashMap$TKeyView$1 -> gnu.trove.map.hash.al:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteIntHashMap$TKeyView this$1 -> b
    boolean execute(byte) -> a
gnu.trove.map.hash.TByteIntHashMap$TValueView -> gnu.trove.map.hash.am:
    gnu.trove.map.hash.TByteIntHashMap this$0 -> a
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TByteIntHashMap$TValueView$1 -> gnu.trove.map.hash.an:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteIntHashMap$TValueView this$1 -> b
    boolean execute(int) -> a
gnu.trove.map.hash.TByteLongHashMap -> gnu.trove.map.hash.TByteLongHashMap:
    long serialVersionUID -> serialVersionUID
    long[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    long put(byte,long) -> put
    long putIfAbsent(byte,long) -> putIfAbsent
    long doPut(byte,long,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteLongMap) -> putAll
    long get(byte) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    long remove(byte) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean containsValue(long) -> containsValue
    boolean containsKey(byte) -> containsKey
    gnu.trove.iterator.TByteLongIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteLongProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,long) -> adjustValue
    long adjustOrPutValue(byte,long,long) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    byte access$000(gnu.trove.map.hash.TByteLongHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TByteLongHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TByteLongHashMap) -> access$200
    long access$300(gnu.trove.map.hash.TByteLongHashMap) -> access$300
    long access$400(gnu.trove.map.hash.TByteLongHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TByteLongHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TByteLongHashMap) -> access$600
gnu.trove.map.hash.TByteLongHashMap$1 -> gnu.trove.map.hash.ao:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteLongHashMap this$0 -> b
    boolean execute(byte,long) -> a
gnu.trove.map.hash.TByteLongHashMap$TByteLongHashIterator -> gnu.trove.map.hash.ap:
    gnu.trove.map.hash.TByteLongHashMap this$0 -> d
    void advance() -> c
    byte key() -> a
    long value() -> J_
    void remove() -> remove
gnu.trove.map.hash.TByteLongHashMap$TByteLongKeyHashIterator -> gnu.trove.map.hash.aq:
    gnu.trove.map.hash.TByteLongHashMap this$0 -> d
    byte next() -> a
    void remove() -> remove
gnu.trove.map.hash.TByteLongHashMap$TByteLongValueHashIterator -> gnu.trove.map.hash.ar:
    gnu.trove.map.hash.TByteLongHashMap this$0 -> d
    long next() -> a
    void remove() -> remove
gnu.trove.map.hash.TByteLongHashMap$TKeyView -> gnu.trove.map.hash.as:
    gnu.trove.map.hash.TByteLongHashMap this$0 -> a
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TByteLongHashMap$TKeyView$1 -> gnu.trove.map.hash.at:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteLongHashMap$TKeyView this$1 -> b
    boolean execute(byte) -> a
gnu.trove.map.hash.TByteLongHashMap$TValueView -> gnu.trove.map.hash.au:
    gnu.trove.map.hash.TByteLongHashMap this$0 -> a
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TByteLongHashMap$TValueView$1 -> gnu.trove.map.hash.av:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteLongHashMap$TValueView this$1 -> b
    boolean execute(long) -> a
gnu.trove.map.hash.TByteObjectHashMap -> gnu.trove.map.hash.TByteObjectHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TByteObjectProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    java.lang.Object[] _values -> _values
    byte no_entry_key -> no_entry_key
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    byte getNoEntryKey() -> getNoEntryKey
    boolean containsKey(byte) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(byte) -> get
    java.lang.Object put(byte,java.lang.Object) -> put
    java.lang.Object putIfAbsent(byte,java.lang.Object) -> putIfAbsent
    java.lang.Object doPut(java.lang.Object,int) -> a
    java.lang.Object remove(byte) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TByteObjectIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteObjectProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TByteObjectProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$000(gnu.trove.map.hash.TByteObjectHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TByteObjectHashMap) -> access$100
gnu.trove.map.hash.TByteObjectHashMap$1 -> gnu.trove.map.hash.aw:
    gnu.trove.map.hash.TByteObjectHashMap this$0 -> a
    boolean execute(byte,java.lang.Object) -> a
gnu.trove.map.hash.TByteObjectHashMap$2 -> gnu.trove.map.hash.ax:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteObjectHashMap this$0 -> b
    boolean execute(byte,java.lang.Object) -> a
gnu.trove.map.hash.TByteObjectHashMap$KeyView -> gnu.trove.map.hash.ay:
    gnu.trove.map.hash.TByteObjectHashMap this$0 -> a
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TByteObjectHashMap$KeyView$TByteHashIterator -> gnu.trove.map.hash.az:
    gnu.trove.impl.hash.TByteHash _hash -> e
    gnu.trove.map.hash.TByteObjectHashMap$KeyView this$1 -> d
    byte next() -> a
gnu.trove.map.hash.TByteObjectHashMap$MapBackedView -> gnu.trove.map.hash.ba:
    gnu.trove.map.hash.TByteObjectHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.hash.TByteObjectHashMap$TByteObjectHashIterator -> gnu.trove.map.hash.bb:
    gnu.trove.map.hash.TByteObjectHashMap _map -> e
    gnu.trove.map.hash.TByteObjectHashMap this$0 -> d
    void advance() -> c
    byte key() -> a
    java.lang.Object value() -> K_
gnu.trove.map.hash.TByteObjectHashMap$ValueView -> gnu.trove.map.hash.bc:
    gnu.trove.map.hash.TByteObjectHashMap this$0 -> b
    java.util.Iterator iterator() -> iterator
    boolean containsElement(java.lang.Object) -> b
    boolean removeElement(java.lang.Object) -> a
gnu.trove.map.hash.TByteObjectHashMap$ValueView$1 -> gnu.trove.map.hash.bd:
    gnu.trove.map.hash.TByteObjectHashMap$ValueView this$1 -> d
gnu.trove.map.hash.TByteObjectHashMap$ValueView$TByteObjectValueHashIterator -> gnu.trove.map.hash.be:
    gnu.trove.map.hash.TByteObjectHashMap _map -> e
    gnu.trove.map.hash.TByteObjectHashMap$ValueView this$1 -> f
    java.lang.Object next() -> next
gnu.trove.map.hash.TByteShortHashMap -> gnu.trove.map.hash.TByteShortHashMap:
    long serialVersionUID -> serialVersionUID
    short[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    short put(byte,short) -> put
    short putIfAbsent(byte,short) -> putIfAbsent
    short doPut(byte,short,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TByteShortMap) -> putAll
    short get(byte) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    short remove(byte) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TByteSet keySet() -> keySet
    byte[] keys() -> keys
    byte[] keys(byte[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean containsValue(short) -> containsValue
    boolean containsKey(byte) -> containsKey
    gnu.trove.iterator.TByteShortIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TByteProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TByteShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TByteShortProcedure) -> retainEntries
    boolean increment(byte) -> increment
    boolean adjustValue(byte,short) -> adjustValue
    short adjustOrPutValue(byte,short,short) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    byte access$000(gnu.trove.map.hash.TByteShortHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TByteShortHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TByteShortHashMap) -> access$200
    short access$300(gnu.trove.map.hash.TByteShortHashMap) -> access$300
    short access$400(gnu.trove.map.hash.TByteShortHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TByteShortHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TByteShortHashMap) -> access$600
gnu.trove.map.hash.TByteShortHashMap$1 -> gnu.trove.map.hash.bf:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteShortHashMap this$0 -> b
    boolean execute(byte,short) -> a
gnu.trove.map.hash.TByteShortHashMap$TByteShortHashIterator -> gnu.trove.map.hash.bg:
    gnu.trove.map.hash.TByteShortHashMap this$0 -> d
    void advance() -> c
    byte key() -> a
    short value() -> L_
    void remove() -> remove
gnu.trove.map.hash.TByteShortHashMap$TByteShortKeyHashIterator -> gnu.trove.map.hash.bh:
    gnu.trove.map.hash.TByteShortHashMap this$0 -> d
    byte next() -> a
    void remove() -> remove
gnu.trove.map.hash.TByteShortHashMap$TByteShortValueHashIterator -> gnu.trove.map.hash.bi:
    gnu.trove.map.hash.TByteShortHashMap this$0 -> d
    short next() -> a
    void remove() -> remove
gnu.trove.map.hash.TByteShortHashMap$TKeyView -> gnu.trove.map.hash.bj:
    gnu.trove.map.hash.TByteShortHashMap this$0 -> a
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TByteShortHashMap$TKeyView$1 -> gnu.trove.map.hash.bk:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteShortHashMap$TKeyView this$1 -> b
    boolean execute(byte) -> a
gnu.trove.map.hash.TByteShortHashMap$TValueView -> gnu.trove.map.hash.bl:
    gnu.trove.map.hash.TByteShortHashMap this$0 -> a
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TByteShortHashMap$TValueView$1 -> gnu.trove.map.hash.bm:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TByteShortHashMap$TValueView this$1 -> b
    boolean execute(short) -> a
gnu.trove.map.hash.TCharByteHashMap -> gnu.trove.map.hash.TCharByteHashMap:
    long serialVersionUID -> serialVersionUID
    byte[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    byte put(char,byte) -> put
    byte putIfAbsent(char,byte) -> putIfAbsent
    byte doPut(char,byte,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharByteMap) -> putAll
    byte get(char) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    byte remove(char) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean containsValue(byte) -> containsValue
    boolean containsKey(char) -> containsKey
    gnu.trove.iterator.TCharByteIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharByteProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,byte) -> adjustValue
    byte adjustOrPutValue(char,byte,byte) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    char access$000(gnu.trove.map.hash.TCharByteHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TCharByteHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TCharByteHashMap) -> access$200
    byte access$300(gnu.trove.map.hash.TCharByteHashMap) -> access$300
    byte access$400(gnu.trove.map.hash.TCharByteHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TCharByteHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TCharByteHashMap) -> access$600
gnu.trove.map.hash.TCharByteHashMap$1 -> gnu.trove.map.hash.bn:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharByteHashMap this$0 -> b
    boolean execute(char,byte) -> a
gnu.trove.map.hash.TCharByteHashMap$TCharByteHashIterator -> gnu.trove.map.hash.bo:
    gnu.trove.map.hash.TCharByteHashMap this$0 -> d
    void advance() -> c
    char key() -> a
    byte value() -> M_
    void remove() -> remove
gnu.trove.map.hash.TCharByteHashMap$TCharByteKeyHashIterator -> gnu.trove.map.hash.bp:
    gnu.trove.map.hash.TCharByteHashMap this$0 -> d
    char next() -> a
    void remove() -> remove
gnu.trove.map.hash.TCharByteHashMap$TCharByteValueHashIterator -> gnu.trove.map.hash.bq:
    gnu.trove.map.hash.TCharByteHashMap this$0 -> d
    byte next() -> a
    void remove() -> remove
gnu.trove.map.hash.TCharByteHashMap$TKeyView -> gnu.trove.map.hash.br:
    gnu.trove.map.hash.TCharByteHashMap this$0 -> a
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TCharByteHashMap$TKeyView$1 -> gnu.trove.map.hash.bs:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharByteHashMap$TKeyView this$1 -> b
    boolean execute(char) -> a
gnu.trove.map.hash.TCharByteHashMap$TValueView -> gnu.trove.map.hash.bt:
    gnu.trove.map.hash.TCharByteHashMap this$0 -> a
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TCharByteHashMap$TValueView$1 -> gnu.trove.map.hash.bu:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharByteHashMap$TValueView this$1 -> b
    boolean execute(byte) -> a
gnu.trove.map.hash.TCharCharHashMap -> gnu.trove.map.hash.TCharCharHashMap:
    long serialVersionUID -> serialVersionUID
    char[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    char put(char,char) -> put
    char putIfAbsent(char,char) -> putIfAbsent
    char doPut(char,char,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharCharMap) -> putAll
    char get(char) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    char remove(char) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean containsValue(char) -> containsValue
    boolean containsKey(char) -> containsKey
    gnu.trove.iterator.TCharCharIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharCharProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,char) -> adjustValue
    char adjustOrPutValue(char,char,char) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    char access$000(gnu.trove.map.hash.TCharCharHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TCharCharHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TCharCharHashMap) -> access$200
    char access$300(gnu.trove.map.hash.TCharCharHashMap) -> access$300
    char access$400(gnu.trove.map.hash.TCharCharHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TCharCharHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TCharCharHashMap) -> access$600
gnu.trove.map.hash.TCharCharHashMap$1 -> gnu.trove.map.hash.bv:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharCharHashMap this$0 -> b
    boolean execute(char,char) -> a
gnu.trove.map.hash.TCharCharHashMap$TCharCharHashIterator -> gnu.trove.map.hash.bw:
    gnu.trove.map.hash.TCharCharHashMap this$0 -> d
    void advance() -> c
    char key() -> a
    char value() -> N_
    void remove() -> remove
gnu.trove.map.hash.TCharCharHashMap$TCharCharKeyHashIterator -> gnu.trove.map.hash.bx:
    gnu.trove.map.hash.TCharCharHashMap this$0 -> d
    char next() -> a
    void remove() -> remove
gnu.trove.map.hash.TCharCharHashMap$TCharCharValueHashIterator -> gnu.trove.map.hash.by:
    gnu.trove.map.hash.TCharCharHashMap this$0 -> d
    char next() -> a
    void remove() -> remove
gnu.trove.map.hash.TCharCharHashMap$TKeyView -> gnu.trove.map.hash.bz:
    gnu.trove.map.hash.TCharCharHashMap this$0 -> a
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TCharCharHashMap$TKeyView$1 -> gnu.trove.map.hash.ca:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharCharHashMap$TKeyView this$1 -> b
    boolean execute(char) -> a
gnu.trove.map.hash.TCharCharHashMap$TValueView -> gnu.trove.map.hash.cb:
    gnu.trove.map.hash.TCharCharHashMap this$0 -> a
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TCharCharHashMap$TValueView$1 -> gnu.trove.map.hash.cc:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharCharHashMap$TValueView this$1 -> b
    boolean execute(char) -> a
gnu.trove.map.hash.TCharDoubleHashMap -> gnu.trove.map.hash.TCharDoubleHashMap:
    long serialVersionUID -> serialVersionUID
    double[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    double put(char,double) -> put
    double putIfAbsent(char,double) -> putIfAbsent
    double doPut(char,double,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharDoubleMap) -> putAll
    double get(char) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    double remove(char) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean containsValue(double) -> containsValue
    boolean containsKey(char) -> containsKey
    gnu.trove.iterator.TCharDoubleIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharDoubleProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,double) -> adjustValue
    double adjustOrPutValue(char,double,double) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    char access$000(gnu.trove.map.hash.TCharDoubleHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TCharDoubleHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TCharDoubleHashMap) -> access$200
    double access$300(gnu.trove.map.hash.TCharDoubleHashMap) -> access$300
    double access$400(gnu.trove.map.hash.TCharDoubleHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TCharDoubleHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TCharDoubleHashMap) -> access$600
gnu.trove.map.hash.TCharDoubleHashMap$1 -> gnu.trove.map.hash.cd:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharDoubleHashMap this$0 -> b
    boolean execute(char,double) -> a
gnu.trove.map.hash.TCharDoubleHashMap$TCharDoubleHashIterator -> gnu.trove.map.hash.ce:
    gnu.trove.map.hash.TCharDoubleHashMap this$0 -> d
    void advance() -> c
    char key() -> a
    double value() -> O_
    void remove() -> remove
gnu.trove.map.hash.TCharDoubleHashMap$TCharDoubleKeyHashIterator -> gnu.trove.map.hash.cf:
    gnu.trove.map.hash.TCharDoubleHashMap this$0 -> d
    char next() -> a
    void remove() -> remove
gnu.trove.map.hash.TCharDoubleHashMap$TCharDoubleValueHashIterator -> gnu.trove.map.hash.cg:
    gnu.trove.map.hash.TCharDoubleHashMap this$0 -> d
    double next() -> a
    void remove() -> remove
gnu.trove.map.hash.TCharDoubleHashMap$TKeyView -> gnu.trove.map.hash.ch:
    gnu.trove.map.hash.TCharDoubleHashMap this$0 -> a
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TCharDoubleHashMap$TKeyView$1 -> gnu.trove.map.hash.ci:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharDoubleHashMap$TKeyView this$1 -> b
    boolean execute(char) -> a
gnu.trove.map.hash.TCharDoubleHashMap$TValueView -> gnu.trove.map.hash.cj:
    gnu.trove.map.hash.TCharDoubleHashMap this$0 -> a
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TCharDoubleHashMap$TValueView$1 -> gnu.trove.map.hash.ck:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharDoubleHashMap$TValueView this$1 -> b
    boolean execute(double) -> a
gnu.trove.map.hash.TCharFloatHashMap -> gnu.trove.map.hash.TCharFloatHashMap:
    long serialVersionUID -> serialVersionUID
    float[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    float put(char,float) -> put
    float putIfAbsent(char,float) -> putIfAbsent
    float doPut(char,float,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharFloatMap) -> putAll
    float get(char) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    float remove(char) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean containsValue(float) -> containsValue
    boolean containsKey(char) -> containsKey
    gnu.trove.iterator.TCharFloatIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharFloatProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,float) -> adjustValue
    float adjustOrPutValue(char,float,float) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    char access$000(gnu.trove.map.hash.TCharFloatHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TCharFloatHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TCharFloatHashMap) -> access$200
    float access$300(gnu.trove.map.hash.TCharFloatHashMap) -> access$300
    float access$400(gnu.trove.map.hash.TCharFloatHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TCharFloatHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TCharFloatHashMap) -> access$600
gnu.trove.map.hash.TCharFloatHashMap$1 -> gnu.trove.map.hash.cl:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharFloatHashMap this$0 -> b
    boolean execute(char,float) -> a
gnu.trove.map.hash.TCharFloatHashMap$TCharFloatHashIterator -> gnu.trove.map.hash.cm:
    gnu.trove.map.hash.TCharFloatHashMap this$0 -> d
    void advance() -> c
    char key() -> a
    float value() -> P_
    void remove() -> remove
gnu.trove.map.hash.TCharFloatHashMap$TCharFloatKeyHashIterator -> gnu.trove.map.hash.cn:
    gnu.trove.map.hash.TCharFloatHashMap this$0 -> d
    char next() -> a
    void remove() -> remove
gnu.trove.map.hash.TCharFloatHashMap$TCharFloatValueHashIterator -> gnu.trove.map.hash.co:
    gnu.trove.map.hash.TCharFloatHashMap this$0 -> d
    float next() -> a
    void remove() -> remove
gnu.trove.map.hash.TCharFloatHashMap$TKeyView -> gnu.trove.map.hash.cp:
    gnu.trove.map.hash.TCharFloatHashMap this$0 -> a
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TCharFloatHashMap$TKeyView$1 -> gnu.trove.map.hash.cq:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharFloatHashMap$TKeyView this$1 -> b
    boolean execute(char) -> a
gnu.trove.map.hash.TCharFloatHashMap$TValueView -> gnu.trove.map.hash.cr:
    gnu.trove.map.hash.TCharFloatHashMap this$0 -> a
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TCharFloatHashMap$TValueView$1 -> gnu.trove.map.hash.cs:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharFloatHashMap$TValueView this$1 -> b
    boolean execute(float) -> a
gnu.trove.map.hash.TCharIntHashMap -> gnu.trove.map.hash.TCharIntHashMap:
    long serialVersionUID -> serialVersionUID
    int[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    int put(char,int) -> put
    int putIfAbsent(char,int) -> putIfAbsent
    int doPut(char,int,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharIntMap) -> putAll
    int get(char) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    int remove(char) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean containsValue(int) -> containsValue
    boolean containsKey(char) -> containsKey
    gnu.trove.iterator.TCharIntIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharIntProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,int) -> adjustValue
    int adjustOrPutValue(char,int,int) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    char access$000(gnu.trove.map.hash.TCharIntHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TCharIntHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TCharIntHashMap) -> access$200
    int access$300(gnu.trove.map.hash.TCharIntHashMap) -> access$300
    int access$400(gnu.trove.map.hash.TCharIntHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TCharIntHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TCharIntHashMap) -> access$600
gnu.trove.map.hash.TCharIntHashMap$1 -> gnu.trove.map.hash.ct:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharIntHashMap this$0 -> b
    boolean execute(char,int) -> a
gnu.trove.map.hash.TCharIntHashMap$TCharIntHashIterator -> gnu.trove.map.hash.cu:
    gnu.trove.map.hash.TCharIntHashMap this$0 -> d
    void advance() -> c
    char key() -> a
    int value() -> Q_
    void remove() -> remove
gnu.trove.map.hash.TCharIntHashMap$TCharIntKeyHashIterator -> gnu.trove.map.hash.cv:
    gnu.trove.map.hash.TCharIntHashMap this$0 -> d
    char next() -> a
    void remove() -> remove
gnu.trove.map.hash.TCharIntHashMap$TCharIntValueHashIterator -> gnu.trove.map.hash.cw:
    gnu.trove.map.hash.TCharIntHashMap this$0 -> d
    int next() -> a
    void remove() -> remove
gnu.trove.map.hash.TCharIntHashMap$TKeyView -> gnu.trove.map.hash.cx:
    gnu.trove.map.hash.TCharIntHashMap this$0 -> a
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TCharIntHashMap$TKeyView$1 -> gnu.trove.map.hash.cy:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharIntHashMap$TKeyView this$1 -> b
    boolean execute(char) -> a
gnu.trove.map.hash.TCharIntHashMap$TValueView -> gnu.trove.map.hash.cz:
    gnu.trove.map.hash.TCharIntHashMap this$0 -> a
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TCharIntHashMap$TValueView$1 -> gnu.trove.map.hash.da:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharIntHashMap$TValueView this$1 -> b
    boolean execute(int) -> a
gnu.trove.map.hash.TCharLongHashMap -> gnu.trove.map.hash.TCharLongHashMap:
    long serialVersionUID -> serialVersionUID
    long[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    long put(char,long) -> put
    long putIfAbsent(char,long) -> putIfAbsent
    long doPut(char,long,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharLongMap) -> putAll
    long get(char) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    long remove(char) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean containsValue(long) -> containsValue
    boolean containsKey(char) -> containsKey
    gnu.trove.iterator.TCharLongIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharLongProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,long) -> adjustValue
    long adjustOrPutValue(char,long,long) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    char access$000(gnu.trove.map.hash.TCharLongHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TCharLongHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TCharLongHashMap) -> access$200
    long access$300(gnu.trove.map.hash.TCharLongHashMap) -> access$300
    long access$400(gnu.trove.map.hash.TCharLongHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TCharLongHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TCharLongHashMap) -> access$600
gnu.trove.map.hash.TCharLongHashMap$1 -> gnu.trove.map.hash.db:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharLongHashMap this$0 -> b
    boolean execute(char,long) -> a
gnu.trove.map.hash.TCharLongHashMap$TCharLongHashIterator -> gnu.trove.map.hash.dc:
    gnu.trove.map.hash.TCharLongHashMap this$0 -> d
    void advance() -> c
    char key() -> a
    long value() -> R_
    void remove() -> remove
gnu.trove.map.hash.TCharLongHashMap$TCharLongKeyHashIterator -> gnu.trove.map.hash.dd:
    gnu.trove.map.hash.TCharLongHashMap this$0 -> d
    char next() -> a
    void remove() -> remove
gnu.trove.map.hash.TCharLongHashMap$TCharLongValueHashIterator -> gnu.trove.map.hash.de:
    gnu.trove.map.hash.TCharLongHashMap this$0 -> d
    long next() -> a
    void remove() -> remove
gnu.trove.map.hash.TCharLongHashMap$TKeyView -> gnu.trove.map.hash.df:
    gnu.trove.map.hash.TCharLongHashMap this$0 -> a
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TCharLongHashMap$TKeyView$1 -> gnu.trove.map.hash.dg:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharLongHashMap$TKeyView this$1 -> b
    boolean execute(char) -> a
gnu.trove.map.hash.TCharLongHashMap$TValueView -> gnu.trove.map.hash.dh:
    gnu.trove.map.hash.TCharLongHashMap this$0 -> a
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TCharLongHashMap$TValueView$1 -> gnu.trove.map.hash.di:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharLongHashMap$TValueView this$1 -> b
    boolean execute(long) -> a
gnu.trove.map.hash.TCharObjectHashMap -> gnu.trove.map.hash.TCharObjectHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TCharObjectProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    java.lang.Object[] _values -> _values
    char no_entry_key -> no_entry_key
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    char getNoEntryKey() -> getNoEntryKey
    boolean containsKey(char) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(char) -> get
    java.lang.Object put(char,java.lang.Object) -> put
    java.lang.Object putIfAbsent(char,java.lang.Object) -> putIfAbsent
    java.lang.Object doPut(java.lang.Object,int) -> a
    java.lang.Object remove(char) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TCharObjectIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharObjectProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TCharObjectProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$000(gnu.trove.map.hash.TCharObjectHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TCharObjectHashMap) -> access$100
gnu.trove.map.hash.TCharObjectHashMap$1 -> gnu.trove.map.hash.dj:
    gnu.trove.map.hash.TCharObjectHashMap this$0 -> a
    boolean execute(char,java.lang.Object) -> a
gnu.trove.map.hash.TCharObjectHashMap$2 -> gnu.trove.map.hash.dk:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharObjectHashMap this$0 -> b
    boolean execute(char,java.lang.Object) -> a
gnu.trove.map.hash.TCharObjectHashMap$KeyView -> gnu.trove.map.hash.dl:
    gnu.trove.map.hash.TCharObjectHashMap this$0 -> a
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TCharObjectHashMap$KeyView$TCharHashIterator -> gnu.trove.map.hash.dm:
    gnu.trove.impl.hash.TCharHash _hash -> e
    gnu.trove.map.hash.TCharObjectHashMap$KeyView this$1 -> d
    char next() -> a
gnu.trove.map.hash.TCharObjectHashMap$MapBackedView -> gnu.trove.map.hash.dn:
    gnu.trove.map.hash.TCharObjectHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.hash.TCharObjectHashMap$TCharObjectHashIterator -> gnu.trove.map.hash.do:
    gnu.trove.map.hash.TCharObjectHashMap _map -> e
    gnu.trove.map.hash.TCharObjectHashMap this$0 -> d
    void advance() -> c
    char key() -> a
    java.lang.Object value() -> S_
gnu.trove.map.hash.TCharObjectHashMap$ValueView -> gnu.trove.map.hash.dp:
    gnu.trove.map.hash.TCharObjectHashMap this$0 -> b
    java.util.Iterator iterator() -> iterator
    boolean containsElement(java.lang.Object) -> b
    boolean removeElement(java.lang.Object) -> a
gnu.trove.map.hash.TCharObjectHashMap$ValueView$1 -> gnu.trove.map.hash.dq:
    gnu.trove.map.hash.TCharObjectHashMap$ValueView this$1 -> d
gnu.trove.map.hash.TCharObjectHashMap$ValueView$TCharObjectValueHashIterator -> gnu.trove.map.hash.dr:
    gnu.trove.map.hash.TCharObjectHashMap _map -> e
    gnu.trove.map.hash.TCharObjectHashMap$ValueView this$1 -> f
    java.lang.Object next() -> next
gnu.trove.map.hash.TCharShortHashMap -> gnu.trove.map.hash.TCharShortHashMap:
    long serialVersionUID -> serialVersionUID
    short[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    short put(char,short) -> put
    short putIfAbsent(char,short) -> putIfAbsent
    short doPut(char,short,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TCharShortMap) -> putAll
    short get(char) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    short remove(char) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TCharSet keySet() -> keySet
    char[] keys() -> keys
    char[] keys(char[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean containsValue(short) -> containsValue
    boolean containsKey(char) -> containsKey
    gnu.trove.iterator.TCharShortIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TCharProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TCharShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TCharShortProcedure) -> retainEntries
    boolean increment(char) -> increment
    boolean adjustValue(char,short) -> adjustValue
    short adjustOrPutValue(char,short,short) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    char access$000(gnu.trove.map.hash.TCharShortHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TCharShortHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TCharShortHashMap) -> access$200
    short access$300(gnu.trove.map.hash.TCharShortHashMap) -> access$300
    short access$400(gnu.trove.map.hash.TCharShortHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TCharShortHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TCharShortHashMap) -> access$600
gnu.trove.map.hash.TCharShortHashMap$1 -> gnu.trove.map.hash.ds:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharShortHashMap this$0 -> b
    boolean execute(char,short) -> a
gnu.trove.map.hash.TCharShortHashMap$TCharShortHashIterator -> gnu.trove.map.hash.dt:
    gnu.trove.map.hash.TCharShortHashMap this$0 -> d
    void advance() -> c
    char key() -> a
    short value() -> T_
    void remove() -> remove
gnu.trove.map.hash.TCharShortHashMap$TCharShortKeyHashIterator -> gnu.trove.map.hash.du:
    gnu.trove.map.hash.TCharShortHashMap this$0 -> d
    char next() -> a
    void remove() -> remove
gnu.trove.map.hash.TCharShortHashMap$TCharShortValueHashIterator -> gnu.trove.map.hash.dv:
    gnu.trove.map.hash.TCharShortHashMap this$0 -> d
    short next() -> a
    void remove() -> remove
gnu.trove.map.hash.TCharShortHashMap$TKeyView -> gnu.trove.map.hash.dw:
    gnu.trove.map.hash.TCharShortHashMap this$0 -> a
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TCharShortHashMap$TKeyView$1 -> gnu.trove.map.hash.dx:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharShortHashMap$TKeyView this$1 -> b
    boolean execute(char) -> a
gnu.trove.map.hash.TCharShortHashMap$TValueView -> gnu.trove.map.hash.dy:
    gnu.trove.map.hash.TCharShortHashMap this$0 -> a
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TCharShortHashMap$TValueView$1 -> gnu.trove.map.hash.dz:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCharShortHashMap$TValueView this$1 -> b
    boolean execute(short) -> a
gnu.trove.map.hash.TCustomHashMap -> gnu.trove.map.hash.TCustomHashMap:
    long serialVersionUID -> serialVersionUID
    java.lang.Object[] _values -> _values
    int setUp(int) -> setUp
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    java.lang.Object doPut(java.lang.Object,int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectObjectProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TObjectObjectProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    void rehash(int) -> rehash
    java.lang.Object get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    void removeAt(int) -> removeAt
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    void putAll(java.util.Map) -> putAll
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    gnu.trove.strategy.HashingStrategy access$200(gnu.trove.map.hash.TCustomHashMap) -> access$200
    int access$300(gnu.trove.map.hash.TCustomHashMap,java.lang.Object) -> access$300
    gnu.trove.strategy.HashingStrategy access$400(gnu.trove.map.hash.TCustomHashMap) -> access$400
    gnu.trove.strategy.HashingStrategy access$500(gnu.trove.map.hash.TCustomHashMap) -> access$500
    gnu.trove.strategy.HashingStrategy access$600(gnu.trove.map.hash.TCustomHashMap) -> access$600
gnu.trove.map.hash.TCustomHashMap$1 -> gnu.trove.map.hash.ea:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TCustomHashMap this$0 -> b
    boolean execute(java.lang.Object,java.lang.Object) -> a
gnu.trove.map.hash.TCustomHashMap$Entry -> gnu.trove.map.hash.eb:
    java.lang.Object key -> b
    java.lang.Object val -> c
    int index -> d
    gnu.trove.map.hash.TCustomHashMap this$0 -> a
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TCustomHashMap$EntryView -> gnu.trove.map.hash.ec:
    gnu.trove.map.hash.TCustomHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.util.Map$Entry) -> a
    boolean containsElement(java.util.Map$Entry) -> b
    java.lang.Object valueForEntry(java.util.Map$Entry) -> c
    java.lang.Object keyForEntry(java.util.Map$Entry) -> d
    boolean containsElement(java.lang.Object) -> a
    boolean removeElement(java.lang.Object) -> b
gnu.trove.map.hash.TCustomHashMap$EntryView$EntryIterator -> gnu.trove.map.hash.ed:
    gnu.trove.map.hash.TCustomHashMap$EntryView this$1 -> e
    gnu.trove.map.hash.TCustomHashMap$Entry objectAtIndex(int) -> b
    java.lang.Object objectAtIndex(int) -> a
gnu.trove.map.hash.TCustomHashMap$EqProcedure -> gnu.trove.map.hash.ee:
    java.util.Map _otherMap -> a
    boolean execute(java.lang.Object,java.lang.Object) -> a
gnu.trove.map.hash.TCustomHashMap$HashProcedure -> gnu.trove.map.hash.ef:
    int h -> b
    gnu.trove.map.hash.TCustomHashMap this$0 -> a
    int getHashCode() -> a
    boolean execute(java.lang.Object,java.lang.Object) -> a
gnu.trove.map.hash.TCustomHashMap$KeyView -> gnu.trove.map.hash.eg:
    gnu.trove.map.hash.TCustomHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> b
    boolean containsElement(java.lang.Object) -> a
gnu.trove.map.hash.TCustomHashMap$MapBackedView -> gnu.trove.map.hash.eh:
    gnu.trove.map.hash.TCustomHashMap this$0 -> b
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> b
    boolean containsElement(java.lang.Object) -> a
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.String toString() -> toString
gnu.trove.map.hash.TCustomHashMap$ValueView -> gnu.trove.map.hash.ei:
    gnu.trove.map.hash.TCustomHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean containsElement(java.lang.Object) -> a
    boolean removeElement(java.lang.Object) -> b
gnu.trove.map.hash.TCustomHashMap$ValueView$1 -> gnu.trove.map.hash.ej:
    gnu.trove.map.hash.TCustomHashMap$ValueView this$1 -> e
    java.lang.Object objectAtIndex(int) -> a
gnu.trove.map.hash.TDoubleByteHashMap -> gnu.trove.map.hash.TDoubleByteHashMap:
    long serialVersionUID -> serialVersionUID
    byte[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    byte put(double,byte) -> put
    byte putIfAbsent(double,byte) -> putIfAbsent
    byte doPut(double,byte,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleByteMap) -> putAll
    byte get(double) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    byte remove(double) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean containsValue(byte) -> containsValue
    boolean containsKey(double) -> containsKey
    gnu.trove.iterator.TDoubleByteIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleByteProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,byte) -> adjustValue
    byte adjustOrPutValue(double,byte,byte) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    double access$000(gnu.trove.map.hash.TDoubleByteHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TDoubleByteHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TDoubleByteHashMap) -> access$200
    byte access$300(gnu.trove.map.hash.TDoubleByteHashMap) -> access$300
    byte access$400(gnu.trove.map.hash.TDoubleByteHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TDoubleByteHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TDoubleByteHashMap) -> access$600
gnu.trove.map.hash.TDoubleByteHashMap$1 -> gnu.trove.map.hash.ek:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleByteHashMap this$0 -> b
    boolean execute(double,byte) -> a
gnu.trove.map.hash.TDoubleByteHashMap$TDoubleByteHashIterator -> gnu.trove.map.hash.el:
    gnu.trove.map.hash.TDoubleByteHashMap this$0 -> d
    void advance() -> c
    double key() -> a
    byte value() -> U_
    void remove() -> remove
gnu.trove.map.hash.TDoubleByteHashMap$TDoubleByteKeyHashIterator -> gnu.trove.map.hash.em:
    gnu.trove.map.hash.TDoubleByteHashMap this$0 -> d
    double next() -> a
    void remove() -> remove
gnu.trove.map.hash.TDoubleByteHashMap$TDoubleByteValueHashIterator -> gnu.trove.map.hash.en:
    gnu.trove.map.hash.TDoubleByteHashMap this$0 -> d
    byte next() -> a
    void remove() -> remove
gnu.trove.map.hash.TDoubleByteHashMap$TKeyView -> gnu.trove.map.hash.eo:
    gnu.trove.map.hash.TDoubleByteHashMap this$0 -> a
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TDoubleByteHashMap$TKeyView$1 -> gnu.trove.map.hash.ep:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleByteHashMap$TKeyView this$1 -> b
    boolean execute(double) -> a
gnu.trove.map.hash.TDoubleByteHashMap$TValueView -> gnu.trove.map.hash.eq:
    gnu.trove.map.hash.TDoubleByteHashMap this$0 -> a
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TDoubleByteHashMap$TValueView$1 -> gnu.trove.map.hash.er:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleByteHashMap$TValueView this$1 -> b
    boolean execute(byte) -> a
gnu.trove.map.hash.TDoubleCharHashMap -> gnu.trove.map.hash.TDoubleCharHashMap:
    long serialVersionUID -> serialVersionUID
    char[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    char put(double,char) -> put
    char putIfAbsent(double,char) -> putIfAbsent
    char doPut(double,char,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleCharMap) -> putAll
    char get(double) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    char remove(double) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean containsValue(char) -> containsValue
    boolean containsKey(double) -> containsKey
    gnu.trove.iterator.TDoubleCharIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleCharProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,char) -> adjustValue
    char adjustOrPutValue(double,char,char) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    double access$000(gnu.trove.map.hash.TDoubleCharHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TDoubleCharHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TDoubleCharHashMap) -> access$200
    char access$300(gnu.trove.map.hash.TDoubleCharHashMap) -> access$300
    char access$400(gnu.trove.map.hash.TDoubleCharHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TDoubleCharHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TDoubleCharHashMap) -> access$600
gnu.trove.map.hash.TDoubleCharHashMap$1 -> gnu.trove.map.hash.es:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleCharHashMap this$0 -> b
    boolean execute(double,char) -> a
gnu.trove.map.hash.TDoubleCharHashMap$TDoubleCharHashIterator -> gnu.trove.map.hash.et:
    gnu.trove.map.hash.TDoubleCharHashMap this$0 -> d
    void advance() -> c
    double key() -> a
    char value() -> V_
    void remove() -> remove
gnu.trove.map.hash.TDoubleCharHashMap$TDoubleCharKeyHashIterator -> gnu.trove.map.hash.eu:
    gnu.trove.map.hash.TDoubleCharHashMap this$0 -> d
    double next() -> a
    void remove() -> remove
gnu.trove.map.hash.TDoubleCharHashMap$TDoubleCharValueHashIterator -> gnu.trove.map.hash.ev:
    gnu.trove.map.hash.TDoubleCharHashMap this$0 -> d
    char next() -> a
    void remove() -> remove
gnu.trove.map.hash.TDoubleCharHashMap$TKeyView -> gnu.trove.map.hash.ew:
    gnu.trove.map.hash.TDoubleCharHashMap this$0 -> a
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TDoubleCharHashMap$TKeyView$1 -> gnu.trove.map.hash.ex:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleCharHashMap$TKeyView this$1 -> b
    boolean execute(double) -> a
gnu.trove.map.hash.TDoubleCharHashMap$TValueView -> gnu.trove.map.hash.ey:
    gnu.trove.map.hash.TDoubleCharHashMap this$0 -> a
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TDoubleCharHashMap$TValueView$1 -> gnu.trove.map.hash.ez:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleCharHashMap$TValueView this$1 -> b
    boolean execute(char) -> a
gnu.trove.map.hash.TDoubleDoubleHashMap -> gnu.trove.map.hash.TDoubleDoubleHashMap:
    long serialVersionUID -> serialVersionUID
    double[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    double put(double,double) -> put
    double putIfAbsent(double,double) -> putIfAbsent
    double doPut(double,double,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleDoubleMap) -> putAll
    double get(double) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    double remove(double) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean containsValue(double) -> containsValue
    boolean containsKey(double) -> containsKey
    gnu.trove.iterator.TDoubleDoubleIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleDoubleProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,double) -> adjustValue
    double adjustOrPutValue(double,double,double) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    double access$000(gnu.trove.map.hash.TDoubleDoubleHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TDoubleDoubleHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TDoubleDoubleHashMap) -> access$200
    double access$300(gnu.trove.map.hash.TDoubleDoubleHashMap) -> access$300
    double access$400(gnu.trove.map.hash.TDoubleDoubleHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TDoubleDoubleHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TDoubleDoubleHashMap) -> access$600
gnu.trove.map.hash.TDoubleDoubleHashMap$1 -> gnu.trove.map.hash.fa:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleDoubleHashMap this$0 -> b
    boolean execute(double,double) -> a
gnu.trove.map.hash.TDoubleDoubleHashMap$TDoubleDoubleHashIterator -> gnu.trove.map.hash.fb:
    gnu.trove.map.hash.TDoubleDoubleHashMap this$0 -> d
    void advance() -> c
    double key() -> a
    double value() -> W_
    void remove() -> remove
gnu.trove.map.hash.TDoubleDoubleHashMap$TDoubleDoubleKeyHashIterator -> gnu.trove.map.hash.fc:
    gnu.trove.map.hash.TDoubleDoubleHashMap this$0 -> d
    double next() -> a
    void remove() -> remove
gnu.trove.map.hash.TDoubleDoubleHashMap$TDoubleDoubleValueHashIterator -> gnu.trove.map.hash.fd:
    gnu.trove.map.hash.TDoubleDoubleHashMap this$0 -> d
    double next() -> a
    void remove() -> remove
gnu.trove.map.hash.TDoubleDoubleHashMap$TKeyView -> gnu.trove.map.hash.fe:
    gnu.trove.map.hash.TDoubleDoubleHashMap this$0 -> a
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TDoubleDoubleHashMap$TKeyView$1 -> gnu.trove.map.hash.ff:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleDoubleHashMap$TKeyView this$1 -> b
    boolean execute(double) -> a
gnu.trove.map.hash.TDoubleDoubleHashMap$TValueView -> gnu.trove.map.hash.fg:
    gnu.trove.map.hash.TDoubleDoubleHashMap this$0 -> a
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TDoubleDoubleHashMap$TValueView$1 -> gnu.trove.map.hash.fh:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleDoubleHashMap$TValueView this$1 -> b
    boolean execute(double) -> a
gnu.trove.map.hash.TDoubleFloatHashMap -> gnu.trove.map.hash.TDoubleFloatHashMap:
    long serialVersionUID -> serialVersionUID
    float[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    float put(double,float) -> put
    float putIfAbsent(double,float) -> putIfAbsent
    float doPut(double,float,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleFloatMap) -> putAll
    float get(double) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    float remove(double) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean containsValue(float) -> containsValue
    boolean containsKey(double) -> containsKey
    gnu.trove.iterator.TDoubleFloatIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleFloatProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,float) -> adjustValue
    float adjustOrPutValue(double,float,float) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    double access$000(gnu.trove.map.hash.TDoubleFloatHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TDoubleFloatHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TDoubleFloatHashMap) -> access$200
    float access$300(gnu.trove.map.hash.TDoubleFloatHashMap) -> access$300
    float access$400(gnu.trove.map.hash.TDoubleFloatHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TDoubleFloatHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TDoubleFloatHashMap) -> access$600
gnu.trove.map.hash.TDoubleFloatHashMap$1 -> gnu.trove.map.hash.fi:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleFloatHashMap this$0 -> b
    boolean execute(double,float) -> a
gnu.trove.map.hash.TDoubleFloatHashMap$TDoubleFloatHashIterator -> gnu.trove.map.hash.fj:
    gnu.trove.map.hash.TDoubleFloatHashMap this$0 -> d
    void advance() -> c
    double key() -> a
    float value() -> X_
    void remove() -> remove
gnu.trove.map.hash.TDoubleFloatHashMap$TDoubleFloatKeyHashIterator -> gnu.trove.map.hash.fk:
    gnu.trove.map.hash.TDoubleFloatHashMap this$0 -> d
    double next() -> a
    void remove() -> remove
gnu.trove.map.hash.TDoubleFloatHashMap$TDoubleFloatValueHashIterator -> gnu.trove.map.hash.fl:
    gnu.trove.map.hash.TDoubleFloatHashMap this$0 -> d
    float next() -> a
    void remove() -> remove
gnu.trove.map.hash.TDoubleFloatHashMap$TKeyView -> gnu.trove.map.hash.fm:
    gnu.trove.map.hash.TDoubleFloatHashMap this$0 -> a
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TDoubleFloatHashMap$TKeyView$1 -> gnu.trove.map.hash.fn:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleFloatHashMap$TKeyView this$1 -> b
    boolean execute(double) -> a
gnu.trove.map.hash.TDoubleFloatHashMap$TValueView -> gnu.trove.map.hash.fo:
    gnu.trove.map.hash.TDoubleFloatHashMap this$0 -> a
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TDoubleFloatHashMap$TValueView$1 -> gnu.trove.map.hash.fp:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleFloatHashMap$TValueView this$1 -> b
    boolean execute(float) -> a
gnu.trove.map.hash.TDoubleIntHashMap -> gnu.trove.map.hash.TDoubleIntHashMap:
    long serialVersionUID -> serialVersionUID
    int[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    int put(double,int) -> put
    int putIfAbsent(double,int) -> putIfAbsent
    int doPut(double,int,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleIntMap) -> putAll
    int get(double) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    int remove(double) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean containsValue(int) -> containsValue
    boolean containsKey(double) -> containsKey
    gnu.trove.iterator.TDoubleIntIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleIntProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,int) -> adjustValue
    int adjustOrPutValue(double,int,int) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    double access$000(gnu.trove.map.hash.TDoubleIntHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TDoubleIntHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TDoubleIntHashMap) -> access$200
    int access$300(gnu.trove.map.hash.TDoubleIntHashMap) -> access$300
    int access$400(gnu.trove.map.hash.TDoubleIntHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TDoubleIntHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TDoubleIntHashMap) -> access$600
gnu.trove.map.hash.TDoubleIntHashMap$1 -> gnu.trove.map.hash.fq:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleIntHashMap this$0 -> b
    boolean execute(double,int) -> a
gnu.trove.map.hash.TDoubleIntHashMap$TDoubleIntHashIterator -> gnu.trove.map.hash.fr:
    gnu.trove.map.hash.TDoubleIntHashMap this$0 -> d
    void advance() -> c
    double key() -> a
    int value() -> Y_
    void remove() -> remove
gnu.trove.map.hash.TDoubleIntHashMap$TDoubleIntKeyHashIterator -> gnu.trove.map.hash.fs:
    gnu.trove.map.hash.TDoubleIntHashMap this$0 -> d
    double next() -> a
    void remove() -> remove
gnu.trove.map.hash.TDoubleIntHashMap$TDoubleIntValueHashIterator -> gnu.trove.map.hash.ft:
    gnu.trove.map.hash.TDoubleIntHashMap this$0 -> d
    int next() -> a
    void remove() -> remove
gnu.trove.map.hash.TDoubleIntHashMap$TKeyView -> gnu.trove.map.hash.fu:
    gnu.trove.map.hash.TDoubleIntHashMap this$0 -> a
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TDoubleIntHashMap$TKeyView$1 -> gnu.trove.map.hash.fv:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleIntHashMap$TKeyView this$1 -> b
    boolean execute(double) -> a
gnu.trove.map.hash.TDoubleIntHashMap$TValueView -> gnu.trove.map.hash.fw:
    gnu.trove.map.hash.TDoubleIntHashMap this$0 -> a
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TDoubleIntHashMap$TValueView$1 -> gnu.trove.map.hash.fx:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleIntHashMap$TValueView this$1 -> b
    boolean execute(int) -> a
gnu.trove.map.hash.TDoubleLongHashMap -> gnu.trove.map.hash.TDoubleLongHashMap:
    long serialVersionUID -> serialVersionUID
    long[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    long put(double,long) -> put
    long putIfAbsent(double,long) -> putIfAbsent
    long doPut(double,long,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleLongMap) -> putAll
    long get(double) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    long remove(double) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean containsValue(long) -> containsValue
    boolean containsKey(double) -> containsKey
    gnu.trove.iterator.TDoubleLongIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleLongProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,long) -> adjustValue
    long adjustOrPutValue(double,long,long) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    double access$000(gnu.trove.map.hash.TDoubleLongHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TDoubleLongHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TDoubleLongHashMap) -> access$200
    long access$300(gnu.trove.map.hash.TDoubleLongHashMap) -> access$300
    long access$400(gnu.trove.map.hash.TDoubleLongHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TDoubleLongHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TDoubleLongHashMap) -> access$600
gnu.trove.map.hash.TDoubleLongHashMap$1 -> gnu.trove.map.hash.fy:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleLongHashMap this$0 -> b
    boolean execute(double,long) -> a
gnu.trove.map.hash.TDoubleLongHashMap$TDoubleLongHashIterator -> gnu.trove.map.hash.fz:
    gnu.trove.map.hash.TDoubleLongHashMap this$0 -> d
    void advance() -> c
    double key() -> a
    long value() -> Z_
    void remove() -> remove
gnu.trove.map.hash.TDoubleLongHashMap$TDoubleLongKeyHashIterator -> gnu.trove.map.hash.ga:
    gnu.trove.map.hash.TDoubleLongHashMap this$0 -> d
    double next() -> a
    void remove() -> remove
gnu.trove.map.hash.TDoubleLongHashMap$TDoubleLongValueHashIterator -> gnu.trove.map.hash.gb:
    gnu.trove.map.hash.TDoubleLongHashMap this$0 -> d
    long next() -> a
    void remove() -> remove
gnu.trove.map.hash.TDoubleLongHashMap$TKeyView -> gnu.trove.map.hash.gc:
    gnu.trove.map.hash.TDoubleLongHashMap this$0 -> a
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TDoubleLongHashMap$TKeyView$1 -> gnu.trove.map.hash.gd:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleLongHashMap$TKeyView this$1 -> b
    boolean execute(double) -> a
gnu.trove.map.hash.TDoubleLongHashMap$TValueView -> gnu.trove.map.hash.ge:
    gnu.trove.map.hash.TDoubleLongHashMap this$0 -> a
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TDoubleLongHashMap$TValueView$1 -> gnu.trove.map.hash.gf:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleLongHashMap$TValueView this$1 -> b
    boolean execute(long) -> a
gnu.trove.map.hash.TDoubleObjectHashMap -> gnu.trove.map.hash.TDoubleObjectHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TDoubleObjectProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    java.lang.Object[] _values -> _values
    double no_entry_key -> no_entry_key
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    double getNoEntryKey() -> getNoEntryKey
    boolean containsKey(double) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(double) -> get
    java.lang.Object put(double,java.lang.Object) -> put
    java.lang.Object putIfAbsent(double,java.lang.Object) -> putIfAbsent
    java.lang.Object doPut(java.lang.Object,int) -> a
    java.lang.Object remove(double) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TDoubleObjectIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleObjectProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TDoubleObjectProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$000(gnu.trove.map.hash.TDoubleObjectHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TDoubleObjectHashMap) -> access$100
gnu.trove.map.hash.TDoubleObjectHashMap$1 -> gnu.trove.map.hash.gg:
    gnu.trove.map.hash.TDoubleObjectHashMap this$0 -> a
    boolean execute(double,java.lang.Object) -> a
gnu.trove.map.hash.TDoubleObjectHashMap$2 -> gnu.trove.map.hash.gh:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleObjectHashMap this$0 -> b
    boolean execute(double,java.lang.Object) -> a
gnu.trove.map.hash.TDoubleObjectHashMap$KeyView -> gnu.trove.map.hash.gi:
    gnu.trove.map.hash.TDoubleObjectHashMap this$0 -> a
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TDoubleObjectHashMap$KeyView$TDoubleHashIterator -> gnu.trove.map.hash.gj:
    gnu.trove.impl.hash.TDoubleHash _hash -> e
    gnu.trove.map.hash.TDoubleObjectHashMap$KeyView this$1 -> d
    double next() -> a
gnu.trove.map.hash.TDoubleObjectHashMap$MapBackedView -> gnu.trove.map.hash.gk:
    gnu.trove.map.hash.TDoubleObjectHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.hash.TDoubleObjectHashMap$TDoubleObjectHashIterator -> gnu.trove.map.hash.gl:
    gnu.trove.map.hash.TDoubleObjectHashMap _map -> e
    gnu.trove.map.hash.TDoubleObjectHashMap this$0 -> d
    void advance() -> c
    double key() -> a
    java.lang.Object value() -> aa_
gnu.trove.map.hash.TDoubleObjectHashMap$ValueView -> gnu.trove.map.hash.gm:
    gnu.trove.map.hash.TDoubleObjectHashMap this$0 -> b
    java.util.Iterator iterator() -> iterator
    boolean containsElement(java.lang.Object) -> b
    boolean removeElement(java.lang.Object) -> a
gnu.trove.map.hash.TDoubleObjectHashMap$ValueView$1 -> gnu.trove.map.hash.gn:
    gnu.trove.map.hash.TDoubleObjectHashMap$ValueView this$1 -> d
gnu.trove.map.hash.TDoubleObjectHashMap$ValueView$TDoubleObjectValueHashIterator -> gnu.trove.map.hash.go:
    gnu.trove.map.hash.TDoubleObjectHashMap _map -> e
    gnu.trove.map.hash.TDoubleObjectHashMap$ValueView this$1 -> f
    java.lang.Object next() -> next
gnu.trove.map.hash.TDoubleShortHashMap -> gnu.trove.map.hash.TDoubleShortHashMap:
    long serialVersionUID -> serialVersionUID
    short[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    short put(double,short) -> put
    short putIfAbsent(double,short) -> putIfAbsent
    short doPut(double,short,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TDoubleShortMap) -> putAll
    short get(double) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    short remove(double) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TDoubleSet keySet() -> keySet
    double[] keys() -> keys
    double[] keys(double[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean containsValue(short) -> containsValue
    boolean containsKey(double) -> containsKey
    gnu.trove.iterator.TDoubleShortIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TDoubleProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TDoubleShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TDoubleShortProcedure) -> retainEntries
    boolean increment(double) -> increment
    boolean adjustValue(double,short) -> adjustValue
    short adjustOrPutValue(double,short,short) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    double access$000(gnu.trove.map.hash.TDoubleShortHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TDoubleShortHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TDoubleShortHashMap) -> access$200
    short access$300(gnu.trove.map.hash.TDoubleShortHashMap) -> access$300
    short access$400(gnu.trove.map.hash.TDoubleShortHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TDoubleShortHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TDoubleShortHashMap) -> access$600
gnu.trove.map.hash.TDoubleShortHashMap$1 -> gnu.trove.map.hash.gp:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleShortHashMap this$0 -> b
    boolean execute(double,short) -> a
gnu.trove.map.hash.TDoubleShortHashMap$TDoubleShortHashIterator -> gnu.trove.map.hash.gq:
    gnu.trove.map.hash.TDoubleShortHashMap this$0 -> d
    void advance() -> c
    double key() -> a
    short value() -> ab_
    void remove() -> remove
gnu.trove.map.hash.TDoubleShortHashMap$TDoubleShortKeyHashIterator -> gnu.trove.map.hash.gr:
    gnu.trove.map.hash.TDoubleShortHashMap this$0 -> d
    double next() -> a
    void remove() -> remove
gnu.trove.map.hash.TDoubleShortHashMap$TDoubleShortValueHashIterator -> gnu.trove.map.hash.gs:
    gnu.trove.map.hash.TDoubleShortHashMap this$0 -> d
    short next() -> a
    void remove() -> remove
gnu.trove.map.hash.TDoubleShortHashMap$TKeyView -> gnu.trove.map.hash.gt:
    gnu.trove.map.hash.TDoubleShortHashMap this$0 -> a
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TDoubleShortHashMap$TKeyView$1 -> gnu.trove.map.hash.gu:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleShortHashMap$TKeyView this$1 -> b
    boolean execute(double) -> a
gnu.trove.map.hash.TDoubleShortHashMap$TValueView -> gnu.trove.map.hash.gv:
    gnu.trove.map.hash.TDoubleShortHashMap this$0 -> a
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TDoubleShortHashMap$TValueView$1 -> gnu.trove.map.hash.gw:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TDoubleShortHashMap$TValueView this$1 -> b
    boolean execute(short) -> a
gnu.trove.map.hash.TFloatByteHashMap -> gnu.trove.map.hash.TFloatByteHashMap:
    long serialVersionUID -> serialVersionUID
    byte[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    byte put(float,byte) -> put
    byte putIfAbsent(float,byte) -> putIfAbsent
    byte doPut(float,byte,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatByteMap) -> putAll
    byte get(float) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    byte remove(float) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean containsValue(byte) -> containsValue
    boolean containsKey(float) -> containsKey
    gnu.trove.iterator.TFloatByteIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatByteProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,byte) -> adjustValue
    byte adjustOrPutValue(float,byte,byte) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    float access$000(gnu.trove.map.hash.TFloatByteHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TFloatByteHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TFloatByteHashMap) -> access$200
    byte access$300(gnu.trove.map.hash.TFloatByteHashMap) -> access$300
    byte access$400(gnu.trove.map.hash.TFloatByteHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TFloatByteHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TFloatByteHashMap) -> access$600
gnu.trove.map.hash.TFloatByteHashMap$1 -> gnu.trove.map.hash.gx:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatByteHashMap this$0 -> b
    boolean execute(float,byte) -> a
gnu.trove.map.hash.TFloatByteHashMap$TFloatByteHashIterator -> gnu.trove.map.hash.gy:
    gnu.trove.map.hash.TFloatByteHashMap this$0 -> d
    void advance() -> c
    float key() -> a
    byte value() -> ac_
    void remove() -> remove
gnu.trove.map.hash.TFloatByteHashMap$TFloatByteKeyHashIterator -> gnu.trove.map.hash.gz:
    gnu.trove.map.hash.TFloatByteHashMap this$0 -> d
    float next() -> a
    void remove() -> remove
gnu.trove.map.hash.TFloatByteHashMap$TFloatByteValueHashIterator -> gnu.trove.map.hash.ha:
    gnu.trove.map.hash.TFloatByteHashMap this$0 -> d
    byte next() -> a
    void remove() -> remove
gnu.trove.map.hash.TFloatByteHashMap$TKeyView -> gnu.trove.map.hash.hb:
    gnu.trove.map.hash.TFloatByteHashMap this$0 -> a
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TFloatByteHashMap$TKeyView$1 -> gnu.trove.map.hash.hc:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatByteHashMap$TKeyView this$1 -> b
    boolean execute(float) -> a
gnu.trove.map.hash.TFloatByteHashMap$TValueView -> gnu.trove.map.hash.hd:
    gnu.trove.map.hash.TFloatByteHashMap this$0 -> a
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TFloatByteHashMap$TValueView$1 -> gnu.trove.map.hash.he:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatByteHashMap$TValueView this$1 -> b
    boolean execute(byte) -> a
gnu.trove.map.hash.TFloatCharHashMap -> gnu.trove.map.hash.TFloatCharHashMap:
    long serialVersionUID -> serialVersionUID
    char[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    char put(float,char) -> put
    char putIfAbsent(float,char) -> putIfAbsent
    char doPut(float,char,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatCharMap) -> putAll
    char get(float) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    char remove(float) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean containsValue(char) -> containsValue
    boolean containsKey(float) -> containsKey
    gnu.trove.iterator.TFloatCharIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatCharProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,char) -> adjustValue
    char adjustOrPutValue(float,char,char) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    float access$000(gnu.trove.map.hash.TFloatCharHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TFloatCharHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TFloatCharHashMap) -> access$200
    char access$300(gnu.trove.map.hash.TFloatCharHashMap) -> access$300
    char access$400(gnu.trove.map.hash.TFloatCharHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TFloatCharHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TFloatCharHashMap) -> access$600
gnu.trove.map.hash.TFloatCharHashMap$1 -> gnu.trove.map.hash.hf:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatCharHashMap this$0 -> b
    boolean execute(float,char) -> a
gnu.trove.map.hash.TFloatCharHashMap$TFloatCharHashIterator -> gnu.trove.map.hash.hg:
    gnu.trove.map.hash.TFloatCharHashMap this$0 -> d
    void advance() -> c
    float key() -> a
    char value() -> ad_
    void remove() -> remove
gnu.trove.map.hash.TFloatCharHashMap$TFloatCharKeyHashIterator -> gnu.trove.map.hash.hh:
    gnu.trove.map.hash.TFloatCharHashMap this$0 -> d
    float next() -> a
    void remove() -> remove
gnu.trove.map.hash.TFloatCharHashMap$TFloatCharValueHashIterator -> gnu.trove.map.hash.hi:
    gnu.trove.map.hash.TFloatCharHashMap this$0 -> d
    char next() -> a
    void remove() -> remove
gnu.trove.map.hash.TFloatCharHashMap$TKeyView -> gnu.trove.map.hash.hj:
    gnu.trove.map.hash.TFloatCharHashMap this$0 -> a
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TFloatCharHashMap$TKeyView$1 -> gnu.trove.map.hash.hk:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatCharHashMap$TKeyView this$1 -> b
    boolean execute(float) -> a
gnu.trove.map.hash.TFloatCharHashMap$TValueView -> gnu.trove.map.hash.hl:
    gnu.trove.map.hash.TFloatCharHashMap this$0 -> a
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TFloatCharHashMap$TValueView$1 -> gnu.trove.map.hash.hm:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatCharHashMap$TValueView this$1 -> b
    boolean execute(char) -> a
gnu.trove.map.hash.TFloatDoubleHashMap -> gnu.trove.map.hash.TFloatDoubleHashMap:
    long serialVersionUID -> serialVersionUID
    double[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    double put(float,double) -> put
    double putIfAbsent(float,double) -> putIfAbsent
    double doPut(float,double,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatDoubleMap) -> putAll
    double get(float) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    double remove(float) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean containsValue(double) -> containsValue
    boolean containsKey(float) -> containsKey
    gnu.trove.iterator.TFloatDoubleIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatDoubleProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,double) -> adjustValue
    double adjustOrPutValue(float,double,double) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    float access$000(gnu.trove.map.hash.TFloatDoubleHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TFloatDoubleHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TFloatDoubleHashMap) -> access$200
    double access$300(gnu.trove.map.hash.TFloatDoubleHashMap) -> access$300
    double access$400(gnu.trove.map.hash.TFloatDoubleHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TFloatDoubleHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TFloatDoubleHashMap) -> access$600
gnu.trove.map.hash.TFloatDoubleHashMap$1 -> gnu.trove.map.hash.hn:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatDoubleHashMap this$0 -> b
    boolean execute(float,double) -> a
gnu.trove.map.hash.TFloatDoubleHashMap$TFloatDoubleHashIterator -> gnu.trove.map.hash.ho:
    gnu.trove.map.hash.TFloatDoubleHashMap this$0 -> d
    void advance() -> c
    float key() -> a
    double value() -> ae_
    void remove() -> remove
gnu.trove.map.hash.TFloatDoubleHashMap$TFloatDoubleKeyHashIterator -> gnu.trove.map.hash.hp:
    gnu.trove.map.hash.TFloatDoubleHashMap this$0 -> d
    float next() -> a
    void remove() -> remove
gnu.trove.map.hash.TFloatDoubleHashMap$TFloatDoubleValueHashIterator -> gnu.trove.map.hash.hq:
    gnu.trove.map.hash.TFloatDoubleHashMap this$0 -> d
    double next() -> a
    void remove() -> remove
gnu.trove.map.hash.TFloatDoubleHashMap$TKeyView -> gnu.trove.map.hash.hr:
    gnu.trove.map.hash.TFloatDoubleHashMap this$0 -> a
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TFloatDoubleHashMap$TKeyView$1 -> gnu.trove.map.hash.hs:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatDoubleHashMap$TKeyView this$1 -> b
    boolean execute(float) -> a
gnu.trove.map.hash.TFloatDoubleHashMap$TValueView -> gnu.trove.map.hash.ht:
    gnu.trove.map.hash.TFloatDoubleHashMap this$0 -> a
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TFloatDoubleHashMap$TValueView$1 -> gnu.trove.map.hash.hu:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatDoubleHashMap$TValueView this$1 -> b
    boolean execute(double) -> a
gnu.trove.map.hash.TFloatFloatHashMap -> gnu.trove.map.hash.TFloatFloatHashMap:
    long serialVersionUID -> serialVersionUID
    float[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    float put(float,float) -> put
    float putIfAbsent(float,float) -> putIfAbsent
    float doPut(float,float,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatFloatMap) -> putAll
    float get(float) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    float remove(float) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean containsValue(float) -> containsValue
    boolean containsKey(float) -> containsKey
    gnu.trove.iterator.TFloatFloatIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatFloatProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,float) -> adjustValue
    float adjustOrPutValue(float,float,float) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    float access$000(gnu.trove.map.hash.TFloatFloatHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TFloatFloatHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TFloatFloatHashMap) -> access$200
    float access$300(gnu.trove.map.hash.TFloatFloatHashMap) -> access$300
    float access$400(gnu.trove.map.hash.TFloatFloatHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TFloatFloatHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TFloatFloatHashMap) -> access$600
gnu.trove.map.hash.TFloatFloatHashMap$1 -> gnu.trove.map.hash.hv:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatFloatHashMap this$0 -> b
    boolean execute(float,float) -> a
gnu.trove.map.hash.TFloatFloatHashMap$TFloatFloatHashIterator -> gnu.trove.map.hash.hw:
    gnu.trove.map.hash.TFloatFloatHashMap this$0 -> d
    void advance() -> c
    float key() -> a
    float value() -> af_
    void remove() -> remove
gnu.trove.map.hash.TFloatFloatHashMap$TFloatFloatKeyHashIterator -> gnu.trove.map.hash.hx:
    gnu.trove.map.hash.TFloatFloatHashMap this$0 -> d
    float next() -> a
    void remove() -> remove
gnu.trove.map.hash.TFloatFloatHashMap$TFloatFloatValueHashIterator -> gnu.trove.map.hash.hy:
    gnu.trove.map.hash.TFloatFloatHashMap this$0 -> d
    float next() -> a
    void remove() -> remove
gnu.trove.map.hash.TFloatFloatHashMap$TKeyView -> gnu.trove.map.hash.hz:
    gnu.trove.map.hash.TFloatFloatHashMap this$0 -> a
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TFloatFloatHashMap$TKeyView$1 -> gnu.trove.map.hash.ia:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatFloatHashMap$TKeyView this$1 -> b
    boolean execute(float) -> a
gnu.trove.map.hash.TFloatFloatHashMap$TValueView -> gnu.trove.map.hash.ib:
    gnu.trove.map.hash.TFloatFloatHashMap this$0 -> a
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TFloatFloatHashMap$TValueView$1 -> gnu.trove.map.hash.ic:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatFloatHashMap$TValueView this$1 -> b
    boolean execute(float) -> a
gnu.trove.map.hash.TFloatIntHashMap -> gnu.trove.map.hash.TFloatIntHashMap:
    long serialVersionUID -> serialVersionUID
    int[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    int put(float,int) -> put
    int putIfAbsent(float,int) -> putIfAbsent
    int doPut(float,int,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatIntMap) -> putAll
    int get(float) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    int remove(float) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean containsValue(int) -> containsValue
    boolean containsKey(float) -> containsKey
    gnu.trove.iterator.TFloatIntIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatIntProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,int) -> adjustValue
    int adjustOrPutValue(float,int,int) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    float access$000(gnu.trove.map.hash.TFloatIntHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TFloatIntHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TFloatIntHashMap) -> access$200
    int access$300(gnu.trove.map.hash.TFloatIntHashMap) -> access$300
    int access$400(gnu.trove.map.hash.TFloatIntHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TFloatIntHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TFloatIntHashMap) -> access$600
gnu.trove.map.hash.TFloatIntHashMap$1 -> gnu.trove.map.hash.id:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatIntHashMap this$0 -> b
    boolean execute(float,int) -> a
gnu.trove.map.hash.TFloatIntHashMap$TFloatIntHashIterator -> gnu.trove.map.hash.ie:
    gnu.trove.map.hash.TFloatIntHashMap this$0 -> d
    void advance() -> c
    float key() -> a
    int value() -> ag_
    void remove() -> remove
gnu.trove.map.hash.TFloatIntHashMap$TFloatIntKeyHashIterator -> gnu.trove.map.hash.if:
    gnu.trove.map.hash.TFloatIntHashMap this$0 -> d
    float next() -> a
    void remove() -> remove
gnu.trove.map.hash.TFloatIntHashMap$TFloatIntValueHashIterator -> gnu.trove.map.hash.ig:
    gnu.trove.map.hash.TFloatIntHashMap this$0 -> d
    int next() -> a
    void remove() -> remove
gnu.trove.map.hash.TFloatIntHashMap$TKeyView -> gnu.trove.map.hash.ih:
    gnu.trove.map.hash.TFloatIntHashMap this$0 -> a
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TFloatIntHashMap$TKeyView$1 -> gnu.trove.map.hash.ii:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatIntHashMap$TKeyView this$1 -> b
    boolean execute(float) -> a
gnu.trove.map.hash.TFloatIntHashMap$TValueView -> gnu.trove.map.hash.ij:
    gnu.trove.map.hash.TFloatIntHashMap this$0 -> a
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TFloatIntHashMap$TValueView$1 -> gnu.trove.map.hash.ik:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatIntHashMap$TValueView this$1 -> b
    boolean execute(int) -> a
gnu.trove.map.hash.TFloatLongHashMap -> gnu.trove.map.hash.TFloatLongHashMap:
    long serialVersionUID -> serialVersionUID
    long[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    long put(float,long) -> put
    long putIfAbsent(float,long) -> putIfAbsent
    long doPut(float,long,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatLongMap) -> putAll
    long get(float) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    long remove(float) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean containsValue(long) -> containsValue
    boolean containsKey(float) -> containsKey
    gnu.trove.iterator.TFloatLongIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatLongProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,long) -> adjustValue
    long adjustOrPutValue(float,long,long) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    float access$000(gnu.trove.map.hash.TFloatLongHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TFloatLongHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TFloatLongHashMap) -> access$200
    long access$300(gnu.trove.map.hash.TFloatLongHashMap) -> access$300
    long access$400(gnu.trove.map.hash.TFloatLongHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TFloatLongHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TFloatLongHashMap) -> access$600
gnu.trove.map.hash.TFloatLongHashMap$1 -> gnu.trove.map.hash.il:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatLongHashMap this$0 -> b
    boolean execute(float,long) -> a
gnu.trove.map.hash.TFloatLongHashMap$TFloatLongHashIterator -> gnu.trove.map.hash.im:
    gnu.trove.map.hash.TFloatLongHashMap this$0 -> d
    void advance() -> c
    float key() -> a
    long value() -> ah_
    void remove() -> remove
gnu.trove.map.hash.TFloatLongHashMap$TFloatLongKeyHashIterator -> gnu.trove.map.hash.in:
    gnu.trove.map.hash.TFloatLongHashMap this$0 -> d
    float next() -> a
    void remove() -> remove
gnu.trove.map.hash.TFloatLongHashMap$TFloatLongValueHashIterator -> gnu.trove.map.hash.io:
    gnu.trove.map.hash.TFloatLongHashMap this$0 -> d
    long next() -> a
    void remove() -> remove
gnu.trove.map.hash.TFloatLongHashMap$TKeyView -> gnu.trove.map.hash.ip:
    gnu.trove.map.hash.TFloatLongHashMap this$0 -> a
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TFloatLongHashMap$TKeyView$1 -> gnu.trove.map.hash.iq:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatLongHashMap$TKeyView this$1 -> b
    boolean execute(float) -> a
gnu.trove.map.hash.TFloatLongHashMap$TValueView -> gnu.trove.map.hash.ir:
    gnu.trove.map.hash.TFloatLongHashMap this$0 -> a
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TFloatLongHashMap$TValueView$1 -> gnu.trove.map.hash.is:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatLongHashMap$TValueView this$1 -> b
    boolean execute(long) -> a
gnu.trove.map.hash.TFloatObjectHashMap -> gnu.trove.map.hash.TFloatObjectHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TFloatObjectProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    java.lang.Object[] _values -> _values
    float no_entry_key -> no_entry_key
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    float getNoEntryKey() -> getNoEntryKey
    boolean containsKey(float) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(float) -> get
    java.lang.Object put(float,java.lang.Object) -> put
    java.lang.Object putIfAbsent(float,java.lang.Object) -> putIfAbsent
    java.lang.Object doPut(java.lang.Object,int) -> a
    java.lang.Object remove(float) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TFloatObjectIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatObjectProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TFloatObjectProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$000(gnu.trove.map.hash.TFloatObjectHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TFloatObjectHashMap) -> access$100
gnu.trove.map.hash.TFloatObjectHashMap$1 -> gnu.trove.map.hash.it:
    gnu.trove.map.hash.TFloatObjectHashMap this$0 -> a
    boolean execute(float,java.lang.Object) -> a
gnu.trove.map.hash.TFloatObjectHashMap$2 -> gnu.trove.map.hash.iu:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatObjectHashMap this$0 -> b
    boolean execute(float,java.lang.Object) -> a
gnu.trove.map.hash.TFloatObjectHashMap$KeyView -> gnu.trove.map.hash.iv:
    gnu.trove.map.hash.TFloatObjectHashMap this$0 -> a
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TFloatObjectHashMap$KeyView$TFloatHashIterator -> gnu.trove.map.hash.iw:
    gnu.trove.impl.hash.TFloatHash _hash -> e
    gnu.trove.map.hash.TFloatObjectHashMap$KeyView this$1 -> d
    float next() -> a
gnu.trove.map.hash.TFloatObjectHashMap$MapBackedView -> gnu.trove.map.hash.ix:
    gnu.trove.map.hash.TFloatObjectHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.hash.TFloatObjectHashMap$TFloatObjectHashIterator -> gnu.trove.map.hash.iy:
    gnu.trove.map.hash.TFloatObjectHashMap _map -> e
    gnu.trove.map.hash.TFloatObjectHashMap this$0 -> d
    void advance() -> c
    float key() -> a
    java.lang.Object value() -> ai_
gnu.trove.map.hash.TFloatObjectHashMap$ValueView -> gnu.trove.map.hash.iz:
    gnu.trove.map.hash.TFloatObjectHashMap this$0 -> b
    java.util.Iterator iterator() -> iterator
    boolean containsElement(java.lang.Object) -> b
    boolean removeElement(java.lang.Object) -> a
gnu.trove.map.hash.TFloatObjectHashMap$ValueView$1 -> gnu.trove.map.hash.ja:
    gnu.trove.map.hash.TFloatObjectHashMap$ValueView this$1 -> d
gnu.trove.map.hash.TFloatObjectHashMap$ValueView$TFloatObjectValueHashIterator -> gnu.trove.map.hash.jb:
    gnu.trove.map.hash.TFloatObjectHashMap _map -> e
    gnu.trove.map.hash.TFloatObjectHashMap$ValueView this$1 -> f
    java.lang.Object next() -> next
gnu.trove.map.hash.TFloatShortHashMap -> gnu.trove.map.hash.TFloatShortHashMap:
    long serialVersionUID -> serialVersionUID
    short[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    short put(float,short) -> put
    short putIfAbsent(float,short) -> putIfAbsent
    short doPut(float,short,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TFloatShortMap) -> putAll
    short get(float) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    short remove(float) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TFloatSet keySet() -> keySet
    float[] keys() -> keys
    float[] keys(float[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean containsValue(short) -> containsValue
    boolean containsKey(float) -> containsKey
    gnu.trove.iterator.TFloatShortIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TFloatProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TFloatShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TFloatShortProcedure) -> retainEntries
    boolean increment(float) -> increment
    boolean adjustValue(float,short) -> adjustValue
    short adjustOrPutValue(float,short,short) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    float access$000(gnu.trove.map.hash.TFloatShortHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TFloatShortHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TFloatShortHashMap) -> access$200
    short access$300(gnu.trove.map.hash.TFloatShortHashMap) -> access$300
    short access$400(gnu.trove.map.hash.TFloatShortHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TFloatShortHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TFloatShortHashMap) -> access$600
gnu.trove.map.hash.TFloatShortHashMap$1 -> gnu.trove.map.hash.jc:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatShortHashMap this$0 -> b
    boolean execute(float,short) -> a
gnu.trove.map.hash.TFloatShortHashMap$TFloatShortHashIterator -> gnu.trove.map.hash.jd:
    gnu.trove.map.hash.TFloatShortHashMap this$0 -> d
    void advance() -> c
    float key() -> a
    short value() -> aj_
    void remove() -> remove
gnu.trove.map.hash.TFloatShortHashMap$TFloatShortKeyHashIterator -> gnu.trove.map.hash.je:
    gnu.trove.map.hash.TFloatShortHashMap this$0 -> d
    float next() -> a
    void remove() -> remove
gnu.trove.map.hash.TFloatShortHashMap$TFloatShortValueHashIterator -> gnu.trove.map.hash.jf:
    gnu.trove.map.hash.TFloatShortHashMap this$0 -> d
    short next() -> a
    void remove() -> remove
gnu.trove.map.hash.TFloatShortHashMap$TKeyView -> gnu.trove.map.hash.jg:
    gnu.trove.map.hash.TFloatShortHashMap this$0 -> a
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TFloatShortHashMap$TKeyView$1 -> gnu.trove.map.hash.jh:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatShortHashMap$TKeyView this$1 -> b
    boolean execute(float) -> a
gnu.trove.map.hash.TFloatShortHashMap$TValueView -> gnu.trove.map.hash.ji:
    gnu.trove.map.hash.TFloatShortHashMap this$0 -> a
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TFloatShortHashMap$TValueView$1 -> gnu.trove.map.hash.jj:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TFloatShortHashMap$TValueView this$1 -> b
    boolean execute(short) -> a
gnu.trove.map.hash.THashMap -> gnu.trove.map.hash.THashMap:
    long serialVersionUID -> serialVersionUID
    java.lang.Object[] _values -> _values
    int setUp(int) -> setUp
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object) -> putIfAbsent
    java.lang.Object doPut(java.lang.Object,int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectObjectProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TObjectObjectProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    void rehash(int) -> rehash
    java.lang.Object get(java.lang.Object) -> get
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    void removeAt(int) -> removeAt
    java.util.Collection values() -> values
    java.util.Set keySet() -> keySet
    java.util.Set entrySet() -> entrySet
    boolean containsValue(java.lang.Object) -> containsValue
    boolean containsKey(java.lang.Object) -> containsKey
    void putAll(java.util.Map) -> putAll
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    boolean access$100(gnu.trove.map.hash.THashMap,java.lang.Object,java.lang.Object) -> access$100
    boolean access$300(gnu.trove.map.hash.THashMap,java.lang.Object,java.lang.Object) -> access$300
    int access$400(gnu.trove.map.hash.THashMap,java.lang.Object) -> access$400
    boolean access$500(gnu.trove.map.hash.THashMap,java.lang.Object,java.lang.Object) -> access$500
    boolean access$600(gnu.trove.map.hash.THashMap,java.lang.Object,java.lang.Object) -> access$600
    boolean access$700(gnu.trove.map.hash.THashMap,java.lang.Object,java.lang.Object) -> access$700
    boolean access$800(gnu.trove.map.hash.THashMap,java.lang.Object,java.lang.Object) -> access$800
gnu.trove.map.hash.THashMap$1 -> gnu.trove.map.hash.jk:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.THashMap this$0 -> b
    boolean execute(java.lang.Object,java.lang.Object) -> a
gnu.trove.map.hash.THashMap$Entry -> gnu.trove.map.hash.jl:
    java.lang.Object key -> b
    java.lang.Object val -> c
    int index -> d
    gnu.trove.map.hash.THashMap this$0 -> a
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.THashMap$EntryView -> gnu.trove.map.hash.jm:
    gnu.trove.map.hash.THashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.util.Map$Entry) -> a
    boolean containsElement(java.util.Map$Entry) -> b
    java.lang.Object valueForEntry(java.util.Map$Entry) -> c
    java.lang.Object keyForEntry(java.util.Map$Entry) -> d
    boolean containsElement(java.lang.Object) -> a
    boolean removeElement(java.lang.Object) -> b
gnu.trove.map.hash.THashMap$EntryView$EntryIterator -> gnu.trove.map.hash.jn:
    gnu.trove.map.hash.THashMap$EntryView this$1 -> e
    gnu.trove.map.hash.THashMap$Entry objectAtIndex(int) -> b
    java.lang.Object objectAtIndex(int) -> a
gnu.trove.map.hash.THashMap$EqProcedure -> gnu.trove.map.hash.jo:
    java.util.Map _otherMap -> b
    gnu.trove.map.hash.THashMap this$0 -> a
    boolean execute(java.lang.Object,java.lang.Object) -> a
gnu.trove.map.hash.THashMap$HashProcedure -> gnu.trove.map.hash.jp:
    int h -> b
    gnu.trove.map.hash.THashMap this$0 -> a
    int getHashCode() -> a
    boolean execute(java.lang.Object,java.lang.Object) -> a
gnu.trove.map.hash.THashMap$KeyView -> gnu.trove.map.hash.jq:
    gnu.trove.map.hash.THashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> b
    boolean containsElement(java.lang.Object) -> a
gnu.trove.map.hash.THashMap$MapBackedView -> gnu.trove.map.hash.jr:
    gnu.trove.map.hash.THashMap this$0 -> b
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> b
    boolean containsElement(java.lang.Object) -> a
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.String toString() -> toString
gnu.trove.map.hash.THashMap$ValueView -> gnu.trove.map.hash.js:
    gnu.trove.map.hash.THashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean containsElement(java.lang.Object) -> a
    boolean removeElement(java.lang.Object) -> b
gnu.trove.map.hash.THashMap$ValueView$1 -> gnu.trove.map.hash.jt:
    gnu.trove.map.hash.THashMap$ValueView this$1 -> e
    java.lang.Object objectAtIndex(int) -> a
gnu.trove.map.hash.TIntByteHashMap -> gnu.trove.map.hash.TIntByteHashMap:
    long serialVersionUID -> serialVersionUID
    byte[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    byte put(int,byte) -> put
    byte putIfAbsent(int,byte) -> putIfAbsent
    byte doPut(int,byte,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntByteMap) -> putAll
    byte get(int) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    byte remove(int) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean containsValue(byte) -> containsValue
    boolean containsKey(int) -> containsKey
    gnu.trove.iterator.TIntByteIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntByteProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,byte) -> adjustValue
    byte adjustOrPutValue(int,byte,byte) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    int access$000(gnu.trove.map.hash.TIntByteHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TIntByteHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TIntByteHashMap) -> access$200
    byte access$300(gnu.trove.map.hash.TIntByteHashMap) -> access$300
    byte access$400(gnu.trove.map.hash.TIntByteHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TIntByteHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TIntByteHashMap) -> access$600
gnu.trove.map.hash.TIntByteHashMap$1 -> gnu.trove.map.hash.ju:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntByteHashMap this$0 -> b
    boolean execute(int,byte) -> a
gnu.trove.map.hash.TIntByteHashMap$TIntByteHashIterator -> gnu.trove.map.hash.jv:
    gnu.trove.map.hash.TIntByteHashMap this$0 -> d
    void advance() -> c
    int key() -> a
    byte value() -> ak_
    void remove() -> remove
gnu.trove.map.hash.TIntByteHashMap$TIntByteKeyHashIterator -> gnu.trove.map.hash.jw:
    gnu.trove.map.hash.TIntByteHashMap this$0 -> d
    int next() -> a
    void remove() -> remove
gnu.trove.map.hash.TIntByteHashMap$TIntByteValueHashIterator -> gnu.trove.map.hash.jx:
    gnu.trove.map.hash.TIntByteHashMap this$0 -> d
    byte next() -> a
    void remove() -> remove
gnu.trove.map.hash.TIntByteHashMap$TKeyView -> gnu.trove.map.hash.jy:
    gnu.trove.map.hash.TIntByteHashMap this$0 -> a
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TIntByteHashMap$TKeyView$1 -> gnu.trove.map.hash.jz:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntByteHashMap$TKeyView this$1 -> b
    boolean execute(int) -> a
gnu.trove.map.hash.TIntByteHashMap$TValueView -> gnu.trove.map.hash.ka:
    gnu.trove.map.hash.TIntByteHashMap this$0 -> a
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TIntByteHashMap$TValueView$1 -> gnu.trove.map.hash.kb:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntByteHashMap$TValueView this$1 -> b
    boolean execute(byte) -> a
gnu.trove.map.hash.TIntCharHashMap -> gnu.trove.map.hash.TIntCharHashMap:
    long serialVersionUID -> serialVersionUID
    char[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    char put(int,char) -> put
    char putIfAbsent(int,char) -> putIfAbsent
    char doPut(int,char,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntCharMap) -> putAll
    char get(int) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    char remove(int) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean containsValue(char) -> containsValue
    boolean containsKey(int) -> containsKey
    gnu.trove.iterator.TIntCharIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntCharProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,char) -> adjustValue
    char adjustOrPutValue(int,char,char) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    int access$000(gnu.trove.map.hash.TIntCharHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TIntCharHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TIntCharHashMap) -> access$200
    char access$300(gnu.trove.map.hash.TIntCharHashMap) -> access$300
    char access$400(gnu.trove.map.hash.TIntCharHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TIntCharHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TIntCharHashMap) -> access$600
gnu.trove.map.hash.TIntCharHashMap$1 -> gnu.trove.map.hash.kc:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntCharHashMap this$0 -> b
    boolean execute(int,char) -> a
gnu.trove.map.hash.TIntCharHashMap$TIntCharHashIterator -> gnu.trove.map.hash.kd:
    gnu.trove.map.hash.TIntCharHashMap this$0 -> d
    void advance() -> c
    int key() -> a
    char value() -> al_
    void remove() -> remove
gnu.trove.map.hash.TIntCharHashMap$TIntCharKeyHashIterator -> gnu.trove.map.hash.ke:
    gnu.trove.map.hash.TIntCharHashMap this$0 -> d
    int next() -> a
    void remove() -> remove
gnu.trove.map.hash.TIntCharHashMap$TIntCharValueHashIterator -> gnu.trove.map.hash.kf:
    gnu.trove.map.hash.TIntCharHashMap this$0 -> d
    char next() -> a
    void remove() -> remove
gnu.trove.map.hash.TIntCharHashMap$TKeyView -> gnu.trove.map.hash.kg:
    gnu.trove.map.hash.TIntCharHashMap this$0 -> a
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TIntCharHashMap$TKeyView$1 -> gnu.trove.map.hash.kh:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntCharHashMap$TKeyView this$1 -> b
    boolean execute(int) -> a
gnu.trove.map.hash.TIntCharHashMap$TValueView -> gnu.trove.map.hash.ki:
    gnu.trove.map.hash.TIntCharHashMap this$0 -> a
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TIntCharHashMap$TValueView$1 -> gnu.trove.map.hash.kj:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntCharHashMap$TValueView this$1 -> b
    boolean execute(char) -> a
gnu.trove.map.hash.TIntDoubleHashMap -> gnu.trove.map.hash.TIntDoubleHashMap:
    long serialVersionUID -> serialVersionUID
    double[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    double put(int,double) -> put
    double putIfAbsent(int,double) -> putIfAbsent
    double doPut(int,double,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntDoubleMap) -> putAll
    double get(int) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    double remove(int) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean containsValue(double) -> containsValue
    boolean containsKey(int) -> containsKey
    gnu.trove.iterator.TIntDoubleIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntDoubleProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,double) -> adjustValue
    double adjustOrPutValue(int,double,double) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    int access$000(gnu.trove.map.hash.TIntDoubleHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TIntDoubleHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TIntDoubleHashMap) -> access$200
    double access$300(gnu.trove.map.hash.TIntDoubleHashMap) -> access$300
    double access$400(gnu.trove.map.hash.TIntDoubleHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TIntDoubleHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TIntDoubleHashMap) -> access$600
gnu.trove.map.hash.TIntDoubleHashMap$1 -> gnu.trove.map.hash.kk:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntDoubleHashMap this$0 -> b
    boolean execute(int,double) -> a
gnu.trove.map.hash.TIntDoubleHashMap$TIntDoubleHashIterator -> gnu.trove.map.hash.kl:
    gnu.trove.map.hash.TIntDoubleHashMap this$0 -> d
    void advance() -> c
    int key() -> a
    double value() -> am_
    void remove() -> remove
gnu.trove.map.hash.TIntDoubleHashMap$TIntDoubleKeyHashIterator -> gnu.trove.map.hash.km:
    gnu.trove.map.hash.TIntDoubleHashMap this$0 -> d
    int next() -> a
    void remove() -> remove
gnu.trove.map.hash.TIntDoubleHashMap$TIntDoubleValueHashIterator -> gnu.trove.map.hash.kn:
    gnu.trove.map.hash.TIntDoubleHashMap this$0 -> d
    double next() -> a
    void remove() -> remove
gnu.trove.map.hash.TIntDoubleHashMap$TKeyView -> gnu.trove.map.hash.ko:
    gnu.trove.map.hash.TIntDoubleHashMap this$0 -> a
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TIntDoubleHashMap$TKeyView$1 -> gnu.trove.map.hash.kp:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntDoubleHashMap$TKeyView this$1 -> b
    boolean execute(int) -> a
gnu.trove.map.hash.TIntDoubleHashMap$TValueView -> gnu.trove.map.hash.kq:
    gnu.trove.map.hash.TIntDoubleHashMap this$0 -> a
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TIntDoubleHashMap$TValueView$1 -> gnu.trove.map.hash.kr:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntDoubleHashMap$TValueView this$1 -> b
    boolean execute(double) -> a
gnu.trove.map.hash.TIntFloatHashMap -> gnu.trove.map.hash.TIntFloatHashMap:
    long serialVersionUID -> serialVersionUID
    float[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    float put(int,float) -> put
    float putIfAbsent(int,float) -> putIfAbsent
    float doPut(int,float,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntFloatMap) -> putAll
    float get(int) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    float remove(int) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean containsValue(float) -> containsValue
    boolean containsKey(int) -> containsKey
    gnu.trove.iterator.TIntFloatIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntFloatProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,float) -> adjustValue
    float adjustOrPutValue(int,float,float) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    int access$000(gnu.trove.map.hash.TIntFloatHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TIntFloatHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TIntFloatHashMap) -> access$200
    float access$300(gnu.trove.map.hash.TIntFloatHashMap) -> access$300
    float access$400(gnu.trove.map.hash.TIntFloatHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TIntFloatHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TIntFloatHashMap) -> access$600
gnu.trove.map.hash.TIntFloatHashMap$1 -> gnu.trove.map.hash.ks:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntFloatHashMap this$0 -> b
    boolean execute(int,float) -> a
gnu.trove.map.hash.TIntFloatHashMap$TIntFloatHashIterator -> gnu.trove.map.hash.kt:
    gnu.trove.map.hash.TIntFloatHashMap this$0 -> d
    void advance() -> c
    int key() -> a
    float value() -> an_
    void remove() -> remove
gnu.trove.map.hash.TIntFloatHashMap$TIntFloatKeyHashIterator -> gnu.trove.map.hash.ku:
    gnu.trove.map.hash.TIntFloatHashMap this$0 -> d
    int next() -> a
    void remove() -> remove
gnu.trove.map.hash.TIntFloatHashMap$TIntFloatValueHashIterator -> gnu.trove.map.hash.kv:
    gnu.trove.map.hash.TIntFloatHashMap this$0 -> d
    float next() -> a
    void remove() -> remove
gnu.trove.map.hash.TIntFloatHashMap$TKeyView -> gnu.trove.map.hash.kw:
    gnu.trove.map.hash.TIntFloatHashMap this$0 -> a
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TIntFloatHashMap$TKeyView$1 -> gnu.trove.map.hash.kx:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntFloatHashMap$TKeyView this$1 -> b
    boolean execute(int) -> a
gnu.trove.map.hash.TIntFloatHashMap$TValueView -> gnu.trove.map.hash.ky:
    gnu.trove.map.hash.TIntFloatHashMap this$0 -> a
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TIntFloatHashMap$TValueView$1 -> gnu.trove.map.hash.kz:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntFloatHashMap$TValueView this$1 -> b
    boolean execute(float) -> a
gnu.trove.map.hash.TIntIntHashMap -> gnu.trove.map.hash.TIntIntHashMap:
    long serialVersionUID -> serialVersionUID
    int[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    int put(int,int) -> put
    int putIfAbsent(int,int) -> putIfAbsent
    int doPut(int,int,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntIntMap) -> putAll
    int get(int) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    int remove(int) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean containsValue(int) -> containsValue
    boolean containsKey(int) -> containsKey
    gnu.trove.iterator.TIntIntIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntIntProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,int) -> adjustValue
    int adjustOrPutValue(int,int,int) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    int access$000(gnu.trove.map.hash.TIntIntHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TIntIntHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TIntIntHashMap) -> access$200
    int access$300(gnu.trove.map.hash.TIntIntHashMap) -> access$300
    int access$400(gnu.trove.map.hash.TIntIntHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TIntIntHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TIntIntHashMap) -> access$600
gnu.trove.map.hash.TIntIntHashMap$1 -> gnu.trove.map.hash.la:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntIntHashMap this$0 -> b
    boolean execute(int,int) -> a
gnu.trove.map.hash.TIntIntHashMap$TIntIntHashIterator -> gnu.trove.map.hash.lb:
    gnu.trove.map.hash.TIntIntHashMap this$0 -> d
    void advance() -> c
    int key() -> a
    int value() -> ao_
    void remove() -> remove
gnu.trove.map.hash.TIntIntHashMap$TIntIntKeyHashIterator -> gnu.trove.map.hash.lc:
    gnu.trove.map.hash.TIntIntHashMap this$0 -> d
    int next() -> a
    void remove() -> remove
gnu.trove.map.hash.TIntIntHashMap$TIntIntValueHashIterator -> gnu.trove.map.hash.ld:
    gnu.trove.map.hash.TIntIntHashMap this$0 -> d
    int next() -> a
    void remove() -> remove
gnu.trove.map.hash.TIntIntHashMap$TKeyView -> gnu.trove.map.hash.le:
    gnu.trove.map.hash.TIntIntHashMap this$0 -> a
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TIntIntHashMap$TKeyView$1 -> gnu.trove.map.hash.lf:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntIntHashMap$TKeyView this$1 -> b
    boolean execute(int) -> a
gnu.trove.map.hash.TIntIntHashMap$TValueView -> gnu.trove.map.hash.lg:
    gnu.trove.map.hash.TIntIntHashMap this$0 -> a
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TIntIntHashMap$TValueView$1 -> gnu.trove.map.hash.lh:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntIntHashMap$TValueView this$1 -> b
    boolean execute(int) -> a
gnu.trove.map.hash.TIntLongHashMap -> gnu.trove.map.hash.TIntLongHashMap:
    long serialVersionUID -> serialVersionUID
    long[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    long put(int,long) -> put
    long putIfAbsent(int,long) -> putIfAbsent
    long doPut(int,long,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntLongMap) -> putAll
    long get(int) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    long remove(int) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean containsValue(long) -> containsValue
    boolean containsKey(int) -> containsKey
    gnu.trove.iterator.TIntLongIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntLongProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,long) -> adjustValue
    long adjustOrPutValue(int,long,long) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    int access$000(gnu.trove.map.hash.TIntLongHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TIntLongHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TIntLongHashMap) -> access$200
    long access$300(gnu.trove.map.hash.TIntLongHashMap) -> access$300
    long access$400(gnu.trove.map.hash.TIntLongHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TIntLongHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TIntLongHashMap) -> access$600
gnu.trove.map.hash.TIntLongHashMap$1 -> gnu.trove.map.hash.li:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntLongHashMap this$0 -> b
    boolean execute(int,long) -> a
gnu.trove.map.hash.TIntLongHashMap$TIntLongHashIterator -> gnu.trove.map.hash.lj:
    gnu.trove.map.hash.TIntLongHashMap this$0 -> d
    void advance() -> c
    int key() -> a
    long value() -> ap_
    void remove() -> remove
gnu.trove.map.hash.TIntLongHashMap$TIntLongKeyHashIterator -> gnu.trove.map.hash.lk:
    gnu.trove.map.hash.TIntLongHashMap this$0 -> d
    int next() -> a
    void remove() -> remove
gnu.trove.map.hash.TIntLongHashMap$TIntLongValueHashIterator -> gnu.trove.map.hash.ll:
    gnu.trove.map.hash.TIntLongHashMap this$0 -> d
    long next() -> a
    void remove() -> remove
gnu.trove.map.hash.TIntLongHashMap$TKeyView -> gnu.trove.map.hash.lm:
    gnu.trove.map.hash.TIntLongHashMap this$0 -> a
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TIntLongHashMap$TKeyView$1 -> gnu.trove.map.hash.ln:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntLongHashMap$TKeyView this$1 -> b
    boolean execute(int) -> a
gnu.trove.map.hash.TIntLongHashMap$TValueView -> gnu.trove.map.hash.lo:
    gnu.trove.map.hash.TIntLongHashMap this$0 -> a
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TIntLongHashMap$TValueView$1 -> gnu.trove.map.hash.lp:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntLongHashMap$TValueView this$1 -> b
    boolean execute(long) -> a
gnu.trove.map.hash.TIntObjectHashMap -> gnu.trove.map.hash.TIntObjectHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TIntObjectProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    java.lang.Object[] _values -> _values
    int no_entry_key -> no_entry_key
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    int getNoEntryKey() -> getNoEntryKey
    boolean containsKey(int) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(int) -> get
    java.lang.Object put(int,java.lang.Object) -> put
    java.lang.Object putIfAbsent(int,java.lang.Object) -> putIfAbsent
    java.lang.Object doPut(java.lang.Object,int) -> a
    java.lang.Object remove(int) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TIntObjectIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntObjectProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TIntObjectProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$000(gnu.trove.map.hash.TIntObjectHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TIntObjectHashMap) -> access$100
gnu.trove.map.hash.TIntObjectHashMap$1 -> gnu.trove.map.hash.lq:
    gnu.trove.map.hash.TIntObjectHashMap this$0 -> a
    boolean execute(int,java.lang.Object) -> a
gnu.trove.map.hash.TIntObjectHashMap$2 -> gnu.trove.map.hash.lr:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntObjectHashMap this$0 -> b
    boolean execute(int,java.lang.Object) -> a
gnu.trove.map.hash.TIntObjectHashMap$KeyView -> gnu.trove.map.hash.ls:
    gnu.trove.map.hash.TIntObjectHashMap this$0 -> a
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TIntObjectHashMap$KeyView$TIntHashIterator -> gnu.trove.map.hash.lt:
    gnu.trove.impl.hash.TIntHash _hash -> e
    gnu.trove.map.hash.TIntObjectHashMap$KeyView this$1 -> d
    int next() -> a
gnu.trove.map.hash.TIntObjectHashMap$MapBackedView -> gnu.trove.map.hash.lu:
    gnu.trove.map.hash.TIntObjectHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.hash.TIntObjectHashMap$TIntObjectHashIterator -> gnu.trove.map.hash.lv:
    gnu.trove.map.hash.TIntObjectHashMap _map -> e
    gnu.trove.map.hash.TIntObjectHashMap this$0 -> d
    void advance() -> c
    int key() -> a
    java.lang.Object value() -> aq_
gnu.trove.map.hash.TIntObjectHashMap$ValueView -> gnu.trove.map.hash.lw:
    gnu.trove.map.hash.TIntObjectHashMap this$0 -> b
    java.util.Iterator iterator() -> iterator
    boolean containsElement(java.lang.Object) -> b
    boolean removeElement(java.lang.Object) -> a
gnu.trove.map.hash.TIntObjectHashMap$ValueView$1 -> gnu.trove.map.hash.lx:
    gnu.trove.map.hash.TIntObjectHashMap$ValueView this$1 -> d
gnu.trove.map.hash.TIntObjectHashMap$ValueView$TIntObjectValueHashIterator -> gnu.trove.map.hash.ly:
    gnu.trove.map.hash.TIntObjectHashMap _map -> e
    gnu.trove.map.hash.TIntObjectHashMap$ValueView this$1 -> f
    java.lang.Object next() -> next
gnu.trove.map.hash.TIntShortHashMap -> gnu.trove.map.hash.TIntShortHashMap:
    long serialVersionUID -> serialVersionUID
    short[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    short put(int,short) -> put
    short putIfAbsent(int,short) -> putIfAbsent
    short doPut(int,short,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TIntShortMap) -> putAll
    short get(int) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    short remove(int) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TIntSet keySet() -> keySet
    int[] keys() -> keys
    int[] keys(int[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean containsValue(short) -> containsValue
    boolean containsKey(int) -> containsKey
    gnu.trove.iterator.TIntShortIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TIntProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TIntShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TIntShortProcedure) -> retainEntries
    boolean increment(int) -> increment
    boolean adjustValue(int,short) -> adjustValue
    short adjustOrPutValue(int,short,short) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    int access$000(gnu.trove.map.hash.TIntShortHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TIntShortHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TIntShortHashMap) -> access$200
    short access$300(gnu.trove.map.hash.TIntShortHashMap) -> access$300
    short access$400(gnu.trove.map.hash.TIntShortHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TIntShortHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TIntShortHashMap) -> access$600
gnu.trove.map.hash.TIntShortHashMap$1 -> gnu.trove.map.hash.lz:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntShortHashMap this$0 -> b
    boolean execute(int,short) -> a
gnu.trove.map.hash.TIntShortHashMap$TIntShortHashIterator -> gnu.trove.map.hash.ma:
    gnu.trove.map.hash.TIntShortHashMap this$0 -> d
    void advance() -> c
    int key() -> a
    short value() -> ar_
    void remove() -> remove
gnu.trove.map.hash.TIntShortHashMap$TIntShortKeyHashIterator -> gnu.trove.map.hash.mb:
    gnu.trove.map.hash.TIntShortHashMap this$0 -> d
    int next() -> a
    void remove() -> remove
gnu.trove.map.hash.TIntShortHashMap$TIntShortValueHashIterator -> gnu.trove.map.hash.mc:
    gnu.trove.map.hash.TIntShortHashMap this$0 -> d
    short next() -> a
    void remove() -> remove
gnu.trove.map.hash.TIntShortHashMap$TKeyView -> gnu.trove.map.hash.md:
    gnu.trove.map.hash.TIntShortHashMap this$0 -> a
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TIntShortHashMap$TKeyView$1 -> gnu.trove.map.hash.me:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntShortHashMap$TKeyView this$1 -> b
    boolean execute(int) -> a
gnu.trove.map.hash.TIntShortHashMap$TValueView -> gnu.trove.map.hash.mf:
    gnu.trove.map.hash.TIntShortHashMap this$0 -> a
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TIntShortHashMap$TValueView$1 -> gnu.trove.map.hash.mg:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TIntShortHashMap$TValueView this$1 -> b
    boolean execute(short) -> a
gnu.trove.map.hash.TLongByteHashMap -> gnu.trove.map.hash.TLongByteHashMap:
    long serialVersionUID -> serialVersionUID
    byte[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    byte put(long,byte) -> put
    byte putIfAbsent(long,byte) -> putIfAbsent
    byte doPut(long,byte,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongByteMap) -> putAll
    byte get(long) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    byte remove(long) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean containsValue(byte) -> containsValue
    boolean containsKey(long) -> containsKey
    gnu.trove.iterator.TLongByteIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongByteProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,byte) -> adjustValue
    byte adjustOrPutValue(long,byte,byte) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    long access$000(gnu.trove.map.hash.TLongByteHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TLongByteHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TLongByteHashMap) -> access$200
    byte access$300(gnu.trove.map.hash.TLongByteHashMap) -> access$300
    byte access$400(gnu.trove.map.hash.TLongByteHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TLongByteHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TLongByteHashMap) -> access$600
gnu.trove.map.hash.TLongByteHashMap$1 -> gnu.trove.map.hash.mh:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongByteHashMap this$0 -> b
    boolean execute(long,byte) -> a
gnu.trove.map.hash.TLongByteHashMap$TKeyView -> gnu.trove.map.hash.mi:
    gnu.trove.map.hash.TLongByteHashMap this$0 -> a
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TLongByteHashMap$TKeyView$1 -> gnu.trove.map.hash.mj:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongByteHashMap$TKeyView this$1 -> b
    boolean execute(long) -> a
gnu.trove.map.hash.TLongByteHashMap$TLongByteHashIterator -> gnu.trove.map.hash.mk:
    gnu.trove.map.hash.TLongByteHashMap this$0 -> d
    void advance() -> c
    long key() -> a
    byte value() -> as_
    void remove() -> remove
gnu.trove.map.hash.TLongByteHashMap$TLongByteKeyHashIterator -> gnu.trove.map.hash.ml:
    gnu.trove.map.hash.TLongByteHashMap this$0 -> d
    long next() -> a
    void remove() -> remove
gnu.trove.map.hash.TLongByteHashMap$TLongByteValueHashIterator -> gnu.trove.map.hash.mm:
    gnu.trove.map.hash.TLongByteHashMap this$0 -> d
    byte next() -> a
    void remove() -> remove
gnu.trove.map.hash.TLongByteHashMap$TValueView -> gnu.trove.map.hash.mn:
    gnu.trove.map.hash.TLongByteHashMap this$0 -> a
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TLongByteHashMap$TValueView$1 -> gnu.trove.map.hash.mo:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongByteHashMap$TValueView this$1 -> b
    boolean execute(byte) -> a
gnu.trove.map.hash.TLongCharHashMap -> gnu.trove.map.hash.TLongCharHashMap:
    long serialVersionUID -> serialVersionUID
    char[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    char put(long,char) -> put
    char putIfAbsent(long,char) -> putIfAbsent
    char doPut(long,char,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongCharMap) -> putAll
    char get(long) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    char remove(long) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean containsValue(char) -> containsValue
    boolean containsKey(long) -> containsKey
    gnu.trove.iterator.TLongCharIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongCharProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,char) -> adjustValue
    char adjustOrPutValue(long,char,char) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    long access$000(gnu.trove.map.hash.TLongCharHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TLongCharHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TLongCharHashMap) -> access$200
    char access$300(gnu.trove.map.hash.TLongCharHashMap) -> access$300
    char access$400(gnu.trove.map.hash.TLongCharHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TLongCharHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TLongCharHashMap) -> access$600
gnu.trove.map.hash.TLongCharHashMap$1 -> gnu.trove.map.hash.mp:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongCharHashMap this$0 -> b
    boolean execute(long,char) -> a
gnu.trove.map.hash.TLongCharHashMap$TKeyView -> gnu.trove.map.hash.mq:
    gnu.trove.map.hash.TLongCharHashMap this$0 -> a
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TLongCharHashMap$TKeyView$1 -> gnu.trove.map.hash.mr:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongCharHashMap$TKeyView this$1 -> b
    boolean execute(long) -> a
gnu.trove.map.hash.TLongCharHashMap$TLongCharHashIterator -> gnu.trove.map.hash.ms:
    gnu.trove.map.hash.TLongCharHashMap this$0 -> d
    void advance() -> c
    long key() -> a
    char value() -> at_
    void remove() -> remove
gnu.trove.map.hash.TLongCharHashMap$TLongCharKeyHashIterator -> gnu.trove.map.hash.mt:
    gnu.trove.map.hash.TLongCharHashMap this$0 -> d
    long next() -> a
    void remove() -> remove
gnu.trove.map.hash.TLongCharHashMap$TLongCharValueHashIterator -> gnu.trove.map.hash.mu:
    gnu.trove.map.hash.TLongCharHashMap this$0 -> d
    char next() -> a
    void remove() -> remove
gnu.trove.map.hash.TLongCharHashMap$TValueView -> gnu.trove.map.hash.mv:
    gnu.trove.map.hash.TLongCharHashMap this$0 -> a
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TLongCharHashMap$TValueView$1 -> gnu.trove.map.hash.mw:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongCharHashMap$TValueView this$1 -> b
    boolean execute(char) -> a
gnu.trove.map.hash.TLongDoubleHashMap -> gnu.trove.map.hash.TLongDoubleHashMap:
    long serialVersionUID -> serialVersionUID
    double[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    double put(long,double) -> put
    double putIfAbsent(long,double) -> putIfAbsent
    double doPut(long,double,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongDoubleMap) -> putAll
    double get(long) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    double remove(long) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean containsValue(double) -> containsValue
    boolean containsKey(long) -> containsKey
    gnu.trove.iterator.TLongDoubleIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongDoubleProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,double) -> adjustValue
    double adjustOrPutValue(long,double,double) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    long access$000(gnu.trove.map.hash.TLongDoubleHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TLongDoubleHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TLongDoubleHashMap) -> access$200
    double access$300(gnu.trove.map.hash.TLongDoubleHashMap) -> access$300
    double access$400(gnu.trove.map.hash.TLongDoubleHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TLongDoubleHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TLongDoubleHashMap) -> access$600
gnu.trove.map.hash.TLongDoubleHashMap$1 -> gnu.trove.map.hash.mx:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongDoubleHashMap this$0 -> b
    boolean execute(long,double) -> a
gnu.trove.map.hash.TLongDoubleHashMap$TKeyView -> gnu.trove.map.hash.my:
    gnu.trove.map.hash.TLongDoubleHashMap this$0 -> a
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TLongDoubleHashMap$TKeyView$1 -> gnu.trove.map.hash.mz:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongDoubleHashMap$TKeyView this$1 -> b
    boolean execute(long) -> a
gnu.trove.map.hash.TLongDoubleHashMap$TLongDoubleHashIterator -> gnu.trove.map.hash.na:
    gnu.trove.map.hash.TLongDoubleHashMap this$0 -> d
    void advance() -> c
    long key() -> a
    double value() -> au_
    void remove() -> remove
gnu.trove.map.hash.TLongDoubleHashMap$TLongDoubleKeyHashIterator -> gnu.trove.map.hash.nb:
    gnu.trove.map.hash.TLongDoubleHashMap this$0 -> d
    long next() -> a
    void remove() -> remove
gnu.trove.map.hash.TLongDoubleHashMap$TLongDoubleValueHashIterator -> gnu.trove.map.hash.nc:
    gnu.trove.map.hash.TLongDoubleHashMap this$0 -> d
    double next() -> a
    void remove() -> remove
gnu.trove.map.hash.TLongDoubleHashMap$TValueView -> gnu.trove.map.hash.nd:
    gnu.trove.map.hash.TLongDoubleHashMap this$0 -> a
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TLongDoubleHashMap$TValueView$1 -> gnu.trove.map.hash.ne:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongDoubleHashMap$TValueView this$1 -> b
    boolean execute(double) -> a
gnu.trove.map.hash.TLongFloatHashMap -> gnu.trove.map.hash.TLongFloatHashMap:
    long serialVersionUID -> serialVersionUID
    float[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    float put(long,float) -> put
    float putIfAbsent(long,float) -> putIfAbsent
    float doPut(long,float,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongFloatMap) -> putAll
    float get(long) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    float remove(long) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean containsValue(float) -> containsValue
    boolean containsKey(long) -> containsKey
    gnu.trove.iterator.TLongFloatIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongFloatProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,float) -> adjustValue
    float adjustOrPutValue(long,float,float) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    long access$000(gnu.trove.map.hash.TLongFloatHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TLongFloatHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TLongFloatHashMap) -> access$200
    float access$300(gnu.trove.map.hash.TLongFloatHashMap) -> access$300
    float access$400(gnu.trove.map.hash.TLongFloatHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TLongFloatHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TLongFloatHashMap) -> access$600
gnu.trove.map.hash.TLongFloatHashMap$1 -> gnu.trove.map.hash.nf:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongFloatHashMap this$0 -> b
    boolean execute(long,float) -> a
gnu.trove.map.hash.TLongFloatHashMap$TKeyView -> gnu.trove.map.hash.ng:
    gnu.trove.map.hash.TLongFloatHashMap this$0 -> a
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TLongFloatHashMap$TKeyView$1 -> gnu.trove.map.hash.nh:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongFloatHashMap$TKeyView this$1 -> b
    boolean execute(long) -> a
gnu.trove.map.hash.TLongFloatHashMap$TLongFloatHashIterator -> gnu.trove.map.hash.ni:
    gnu.trove.map.hash.TLongFloatHashMap this$0 -> d
    void advance() -> c
    long key() -> a
    float value() -> av_
    void remove() -> remove
gnu.trove.map.hash.TLongFloatHashMap$TLongFloatKeyHashIterator -> gnu.trove.map.hash.nj:
    gnu.trove.map.hash.TLongFloatHashMap this$0 -> d
    long next() -> a
    void remove() -> remove
gnu.trove.map.hash.TLongFloatHashMap$TLongFloatValueHashIterator -> gnu.trove.map.hash.nk:
    gnu.trove.map.hash.TLongFloatHashMap this$0 -> d
    float next() -> a
    void remove() -> remove
gnu.trove.map.hash.TLongFloatHashMap$TValueView -> gnu.trove.map.hash.nl:
    gnu.trove.map.hash.TLongFloatHashMap this$0 -> a
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TLongFloatHashMap$TValueView$1 -> gnu.trove.map.hash.nm:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongFloatHashMap$TValueView this$1 -> b
    boolean execute(float) -> a
gnu.trove.map.hash.TLongIntHashMap -> gnu.trove.map.hash.TLongIntHashMap:
    long serialVersionUID -> serialVersionUID
    int[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    int put(long,int) -> put
    int putIfAbsent(long,int) -> putIfAbsent
    int doPut(long,int,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongIntMap) -> putAll
    int get(long) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    int remove(long) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean containsValue(int) -> containsValue
    boolean containsKey(long) -> containsKey
    gnu.trove.iterator.TLongIntIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongIntProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,int) -> adjustValue
    int adjustOrPutValue(long,int,int) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    long access$000(gnu.trove.map.hash.TLongIntHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TLongIntHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TLongIntHashMap) -> access$200
    int access$300(gnu.trove.map.hash.TLongIntHashMap) -> access$300
    int access$400(gnu.trove.map.hash.TLongIntHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TLongIntHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TLongIntHashMap) -> access$600
gnu.trove.map.hash.TLongIntHashMap$1 -> gnu.trove.map.hash.nn:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongIntHashMap this$0 -> b
    boolean execute(long,int) -> a
gnu.trove.map.hash.TLongIntHashMap$TKeyView -> gnu.trove.map.hash.no:
    gnu.trove.map.hash.TLongIntHashMap this$0 -> a
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TLongIntHashMap$TKeyView$1 -> gnu.trove.map.hash.np:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongIntHashMap$TKeyView this$1 -> b
    boolean execute(long) -> a
gnu.trove.map.hash.TLongIntHashMap$TLongIntHashIterator -> gnu.trove.map.hash.nq:
    gnu.trove.map.hash.TLongIntHashMap this$0 -> d
    void advance() -> c
    long key() -> a
    int value() -> aw_
    void remove() -> remove
gnu.trove.map.hash.TLongIntHashMap$TLongIntKeyHashIterator -> gnu.trove.map.hash.nr:
    gnu.trove.map.hash.TLongIntHashMap this$0 -> d
    long next() -> a
    void remove() -> remove
gnu.trove.map.hash.TLongIntHashMap$TLongIntValueHashIterator -> gnu.trove.map.hash.ns:
    gnu.trove.map.hash.TLongIntHashMap this$0 -> d
    int next() -> a
    void remove() -> remove
gnu.trove.map.hash.TLongIntHashMap$TValueView -> gnu.trove.map.hash.nt:
    gnu.trove.map.hash.TLongIntHashMap this$0 -> a
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TLongIntHashMap$TValueView$1 -> gnu.trove.map.hash.nu:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongIntHashMap$TValueView this$1 -> b
    boolean execute(int) -> a
gnu.trove.map.hash.TLongLongHashMap -> gnu.trove.map.hash.TLongLongHashMap:
    long serialVersionUID -> serialVersionUID
    long[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    long put(long,long) -> put
    long putIfAbsent(long,long) -> putIfAbsent
    long doPut(long,long,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongLongMap) -> putAll
    long get(long) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    long remove(long) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean containsValue(long) -> containsValue
    boolean containsKey(long) -> containsKey
    gnu.trove.iterator.TLongLongIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongLongProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,long) -> adjustValue
    long adjustOrPutValue(long,long,long) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    long access$000(gnu.trove.map.hash.TLongLongHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TLongLongHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TLongLongHashMap) -> access$200
    long access$300(gnu.trove.map.hash.TLongLongHashMap) -> access$300
    long access$400(gnu.trove.map.hash.TLongLongHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TLongLongHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TLongLongHashMap) -> access$600
gnu.trove.map.hash.TLongLongHashMap$1 -> gnu.trove.map.hash.nv:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongLongHashMap this$0 -> b
    boolean execute(long,long) -> a
gnu.trove.map.hash.TLongLongHashMap$TKeyView -> gnu.trove.map.hash.nw:
    gnu.trove.map.hash.TLongLongHashMap this$0 -> a
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TLongLongHashMap$TKeyView$1 -> gnu.trove.map.hash.nx:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongLongHashMap$TKeyView this$1 -> b
    boolean execute(long) -> a
gnu.trove.map.hash.TLongLongHashMap$TLongLongHashIterator -> gnu.trove.map.hash.ny:
    gnu.trove.map.hash.TLongLongHashMap this$0 -> d
    void advance() -> c
    long key() -> a
    long value() -> ax_
    void remove() -> remove
gnu.trove.map.hash.TLongLongHashMap$TLongLongKeyHashIterator -> gnu.trove.map.hash.nz:
    gnu.trove.map.hash.TLongLongHashMap this$0 -> d
    long next() -> a
    void remove() -> remove
gnu.trove.map.hash.TLongLongHashMap$TLongLongValueHashIterator -> gnu.trove.map.hash.oa:
    gnu.trove.map.hash.TLongLongHashMap this$0 -> d
    long next() -> a
    void remove() -> remove
gnu.trove.map.hash.TLongLongHashMap$TValueView -> gnu.trove.map.hash.ob:
    gnu.trove.map.hash.TLongLongHashMap this$0 -> a
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TLongLongHashMap$TValueView$1 -> gnu.trove.map.hash.oc:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongLongHashMap$TValueView this$1 -> b
    boolean execute(long) -> a
gnu.trove.map.hash.TLongObjectHashMap -> gnu.trove.map.hash.TLongObjectHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TLongObjectProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    java.lang.Object[] _values -> _values
    long no_entry_key -> no_entry_key
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    long getNoEntryKey() -> getNoEntryKey
    boolean containsKey(long) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(long) -> get
    java.lang.Object put(long,java.lang.Object) -> put
    java.lang.Object putIfAbsent(long,java.lang.Object) -> putIfAbsent
    java.lang.Object doPut(java.lang.Object,int) -> a
    java.lang.Object remove(long) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TLongObjectIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongObjectProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TLongObjectProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$000(gnu.trove.map.hash.TLongObjectHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TLongObjectHashMap) -> access$100
gnu.trove.map.hash.TLongObjectHashMap$1 -> gnu.trove.map.hash.od:
    gnu.trove.map.hash.TLongObjectHashMap this$0 -> a
    boolean execute(long,java.lang.Object) -> a
gnu.trove.map.hash.TLongObjectHashMap$2 -> gnu.trove.map.hash.oe:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongObjectHashMap this$0 -> b
    boolean execute(long,java.lang.Object) -> a
gnu.trove.map.hash.TLongObjectHashMap$KeyView -> gnu.trove.map.hash.of:
    gnu.trove.map.hash.TLongObjectHashMap this$0 -> a
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TLongObjectHashMap$KeyView$TLongHashIterator -> gnu.trove.map.hash.og:
    gnu.trove.impl.hash.TLongHash _hash -> e
    gnu.trove.map.hash.TLongObjectHashMap$KeyView this$1 -> d
    long next() -> a
gnu.trove.map.hash.TLongObjectHashMap$MapBackedView -> gnu.trove.map.hash.oh:
    gnu.trove.map.hash.TLongObjectHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.hash.TLongObjectHashMap$TLongObjectHashIterator -> gnu.trove.map.hash.oi:
    gnu.trove.map.hash.TLongObjectHashMap _map -> e
    gnu.trove.map.hash.TLongObjectHashMap this$0 -> d
    void advance() -> c
    long key() -> a
    java.lang.Object value() -> ay_
gnu.trove.map.hash.TLongObjectHashMap$ValueView -> gnu.trove.map.hash.oj:
    gnu.trove.map.hash.TLongObjectHashMap this$0 -> b
    java.util.Iterator iterator() -> iterator
    boolean containsElement(java.lang.Object) -> b
    boolean removeElement(java.lang.Object) -> a
gnu.trove.map.hash.TLongObjectHashMap$ValueView$1 -> gnu.trove.map.hash.ok:
    gnu.trove.map.hash.TLongObjectHashMap$ValueView this$1 -> d
gnu.trove.map.hash.TLongObjectHashMap$ValueView$TLongObjectValueHashIterator -> gnu.trove.map.hash.ol:
    gnu.trove.map.hash.TLongObjectHashMap _map -> e
    gnu.trove.map.hash.TLongObjectHashMap$ValueView this$1 -> f
    java.lang.Object next() -> next
gnu.trove.map.hash.TLongShortHashMap -> gnu.trove.map.hash.TLongShortHashMap:
    long serialVersionUID -> serialVersionUID
    short[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    short put(long,short) -> put
    short putIfAbsent(long,short) -> putIfAbsent
    short doPut(long,short,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TLongShortMap) -> putAll
    short get(long) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    short remove(long) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TLongSet keySet() -> keySet
    long[] keys() -> keys
    long[] keys(long[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean containsValue(short) -> containsValue
    boolean containsKey(long) -> containsKey
    gnu.trove.iterator.TLongShortIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TLongProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TLongShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TLongShortProcedure) -> retainEntries
    boolean increment(long) -> increment
    boolean adjustValue(long,short) -> adjustValue
    short adjustOrPutValue(long,short,short) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    long access$000(gnu.trove.map.hash.TLongShortHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TLongShortHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TLongShortHashMap) -> access$200
    short access$300(gnu.trove.map.hash.TLongShortHashMap) -> access$300
    short access$400(gnu.trove.map.hash.TLongShortHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TLongShortHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TLongShortHashMap) -> access$600
gnu.trove.map.hash.TLongShortHashMap$1 -> gnu.trove.map.hash.om:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongShortHashMap this$0 -> b
    boolean execute(long,short) -> a
gnu.trove.map.hash.TLongShortHashMap$TKeyView -> gnu.trove.map.hash.on:
    gnu.trove.map.hash.TLongShortHashMap this$0 -> a
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TLongShortHashMap$TKeyView$1 -> gnu.trove.map.hash.oo:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongShortHashMap$TKeyView this$1 -> b
    boolean execute(long) -> a
gnu.trove.map.hash.TLongShortHashMap$TLongShortHashIterator -> gnu.trove.map.hash.op:
    gnu.trove.map.hash.TLongShortHashMap this$0 -> d
    void advance() -> c
    long key() -> a
    short value() -> az_
    void remove() -> remove
gnu.trove.map.hash.TLongShortHashMap$TLongShortKeyHashIterator -> gnu.trove.map.hash.oq:
    gnu.trove.map.hash.TLongShortHashMap this$0 -> d
    long next() -> a
    void remove() -> remove
gnu.trove.map.hash.TLongShortHashMap$TLongShortValueHashIterator -> gnu.trove.map.hash.or:
    gnu.trove.map.hash.TLongShortHashMap this$0 -> d
    short next() -> a
    void remove() -> remove
gnu.trove.map.hash.TLongShortHashMap$TValueView -> gnu.trove.map.hash.os:
    gnu.trove.map.hash.TLongShortHashMap this$0 -> a
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TLongShortHashMap$TValueView$1 -> gnu.trove.map.hash.ot:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TLongShortHashMap$TValueView this$1 -> b
    boolean execute(short) -> a
gnu.trove.map.hash.TObjectByteHashMap -> gnu.trove.map.hash.TObjectByteHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TObjectByteProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    byte[] _values -> _values
    byte no_entry_value -> no_entry_value
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    byte getNoEntryValue() -> getNoEntryValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(byte) -> containsValue
    byte get(java.lang.Object) -> get
    byte put(java.lang.Object,byte) -> put
    byte putIfAbsent(java.lang.Object,byte) -> putIfAbsent
    byte doPut(byte,int) -> a
    byte remove(java.lang.Object) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectByteMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    gnu.trove.iterator.TObjectByteIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,byte) -> adjustValue
    byte adjustOrPutValue(java.lang.Object,byte,byte) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectByteProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TObjectByteProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$100(gnu.trove.map.hash.TObjectByteHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TObjectByteHashMap) -> access$200
gnu.trove.map.hash.TObjectByteHashMap$1 -> gnu.trove.map.hash.ou:
    gnu.trove.map.hash.TObjectByteHashMap this$0 -> a
    boolean execute(java.lang.Object,byte) -> a
gnu.trove.map.hash.TObjectByteHashMap$2 -> gnu.trove.map.hash.ov:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TObjectByteHashMap this$0 -> b
    boolean execute(java.lang.Object,byte) -> a
gnu.trove.map.hash.TObjectByteHashMap$KeyView -> gnu.trove.map.hash.ow:
    gnu.trove.map.hash.TObjectByteHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
gnu.trove.map.hash.TObjectByteHashMap$MapBackedView -> gnu.trove.map.hash.ox:
    gnu.trove.map.hash.TObjectByteHashMap this$0 -> b
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.hash.TObjectByteHashMap$TByteValueCollection -> gnu.trove.map.hash.oy:
    gnu.trove.map.hash.TObjectByteHashMap this$0 -> a
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TObjectByteHashMap$TByteValueCollection$1 -> gnu.trove.map.hash.oz:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TObjectByteHashMap$TByteValueCollection this$1 -> b
    boolean execute(byte) -> a
gnu.trove.map.hash.TObjectByteHashMap$TByteValueCollection$TObjectByteValueHashIterator -> gnu.trove.map.hash.pa:
    gnu.trove.impl.hash.THash _hash -> a
    int _expectedSize -> b
    int _index -> c
    gnu.trove.map.hash.TObjectByteHashMap$TByteValueCollection this$1 -> d
    boolean hasNext() -> hasNext
    byte next() -> a
    void remove() -> remove
    void moveToNextIndex() -> b
    int nextIndex() -> c
gnu.trove.map.hash.TObjectByteHashMap$TObjectByteHashIterator -> gnu.trove.map.hash.pb:
    gnu.trove.map.hash.TObjectByteHashMap _map -> f
    gnu.trove.map.hash.TObjectByteHashMap this$0 -> e
    void advance() -> c
    java.lang.Object key() -> a
    byte value() -> v_
gnu.trove.map.hash.TObjectCharHashMap -> gnu.trove.map.hash.TObjectCharHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TObjectCharProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    char[] _values -> _values
    char no_entry_value -> no_entry_value
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    char getNoEntryValue() -> getNoEntryValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(char) -> containsValue
    char get(java.lang.Object) -> get
    char put(java.lang.Object,char) -> put
    char putIfAbsent(java.lang.Object,char) -> putIfAbsent
    char doPut(char,int) -> a
    char remove(java.lang.Object) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectCharMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    gnu.trove.iterator.TObjectCharIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,char) -> adjustValue
    char adjustOrPutValue(java.lang.Object,char,char) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectCharProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TObjectCharProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$100(gnu.trove.map.hash.TObjectCharHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TObjectCharHashMap) -> access$200
gnu.trove.map.hash.TObjectCharHashMap$1 -> gnu.trove.map.hash.pc:
    gnu.trove.map.hash.TObjectCharHashMap this$0 -> a
    boolean execute(java.lang.Object,char) -> a
gnu.trove.map.hash.TObjectCharHashMap$2 -> gnu.trove.map.hash.pd:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TObjectCharHashMap this$0 -> b
    boolean execute(java.lang.Object,char) -> a
gnu.trove.map.hash.TObjectCharHashMap$KeyView -> gnu.trove.map.hash.pe:
    gnu.trove.map.hash.TObjectCharHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
gnu.trove.map.hash.TObjectCharHashMap$MapBackedView -> gnu.trove.map.hash.pf:
    gnu.trove.map.hash.TObjectCharHashMap this$0 -> b
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.hash.TObjectCharHashMap$TCharValueCollection -> gnu.trove.map.hash.pg:
    gnu.trove.map.hash.TObjectCharHashMap this$0 -> a
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TObjectCharHashMap$TCharValueCollection$1 -> gnu.trove.map.hash.ph:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TObjectCharHashMap$TCharValueCollection this$1 -> b
    boolean execute(char) -> a
gnu.trove.map.hash.TObjectCharHashMap$TCharValueCollection$TObjectCharValueHashIterator -> gnu.trove.map.hash.pi:
    gnu.trove.impl.hash.THash _hash -> a
    int _expectedSize -> b
    int _index -> c
    gnu.trove.map.hash.TObjectCharHashMap$TCharValueCollection this$1 -> d
    boolean hasNext() -> hasNext
    char next() -> a
    void remove() -> remove
    void moveToNextIndex() -> b
    int nextIndex() -> c
gnu.trove.map.hash.TObjectCharHashMap$TObjectCharHashIterator -> gnu.trove.map.hash.pj:
    gnu.trove.map.hash.TObjectCharHashMap _map -> f
    gnu.trove.map.hash.TObjectCharHashMap this$0 -> e
    void advance() -> c
    java.lang.Object key() -> a
    char value() -> x_
gnu.trove.map.hash.TObjectDoubleHashMap -> gnu.trove.map.hash.TObjectDoubleHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TObjectDoubleProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    double[] _values -> _values
    double no_entry_value -> no_entry_value
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    double getNoEntryValue() -> getNoEntryValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(double) -> containsValue
    double get(java.lang.Object) -> get
    double put(java.lang.Object,double) -> put
    double putIfAbsent(java.lang.Object,double) -> putIfAbsent
    double doPut(double,int) -> a
    double remove(java.lang.Object) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectDoubleMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    gnu.trove.iterator.TObjectDoubleIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,double) -> adjustValue
    double adjustOrPutValue(java.lang.Object,double,double) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectDoubleProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TObjectDoubleProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$100(gnu.trove.map.hash.TObjectDoubleHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TObjectDoubleHashMap) -> access$200
gnu.trove.map.hash.TObjectDoubleHashMap$1 -> gnu.trove.map.hash.pk:
    gnu.trove.map.hash.TObjectDoubleHashMap this$0 -> a
    boolean execute(java.lang.Object,double) -> a
gnu.trove.map.hash.TObjectDoubleHashMap$2 -> gnu.trove.map.hash.pl:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TObjectDoubleHashMap this$0 -> b
    boolean execute(java.lang.Object,double) -> a
gnu.trove.map.hash.TObjectDoubleHashMap$KeyView -> gnu.trove.map.hash.pm:
    gnu.trove.map.hash.TObjectDoubleHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
gnu.trove.map.hash.TObjectDoubleHashMap$MapBackedView -> gnu.trove.map.hash.pn:
    gnu.trove.map.hash.TObjectDoubleHashMap this$0 -> b
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection -> gnu.trove.map.hash.po:
    gnu.trove.map.hash.TObjectDoubleHashMap this$0 -> a
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection$1 -> gnu.trove.map.hash.pp:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection this$1 -> b
    boolean execute(double) -> a
gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection$TObjectDoubleValueHashIterator -> gnu.trove.map.hash.pq:
    gnu.trove.impl.hash.THash _hash -> a
    int _expectedSize -> b
    int _index -> c
    gnu.trove.map.hash.TObjectDoubleHashMap$TDoubleValueCollection this$1 -> d
    boolean hasNext() -> hasNext
    double next() -> a
    void remove() -> remove
    void moveToNextIndex() -> b
    int nextIndex() -> c
gnu.trove.map.hash.TObjectDoubleHashMap$TObjectDoubleHashIterator -> gnu.trove.map.hash.pr:
    gnu.trove.map.hash.TObjectDoubleHashMap _map -> f
    gnu.trove.map.hash.TObjectDoubleHashMap this$0 -> e
    void advance() -> c
    java.lang.Object key() -> a
    double value() -> y_
gnu.trove.map.hash.TObjectFloatHashMap -> gnu.trove.map.hash.TObjectFloatHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TObjectFloatProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    float[] _values -> _values
    float no_entry_value -> no_entry_value
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    float getNoEntryValue() -> getNoEntryValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(float) -> containsValue
    float get(java.lang.Object) -> get
    float put(java.lang.Object,float) -> put
    float putIfAbsent(java.lang.Object,float) -> putIfAbsent
    float doPut(float,int) -> a
    float remove(java.lang.Object) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectFloatMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    gnu.trove.iterator.TObjectFloatIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,float) -> adjustValue
    float adjustOrPutValue(java.lang.Object,float,float) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectFloatProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TObjectFloatProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$100(gnu.trove.map.hash.TObjectFloatHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TObjectFloatHashMap) -> access$200
gnu.trove.map.hash.TObjectFloatHashMap$1 -> gnu.trove.map.hash.ps:
    gnu.trove.map.hash.TObjectFloatHashMap this$0 -> a
    boolean execute(java.lang.Object,float) -> a
gnu.trove.map.hash.TObjectFloatHashMap$2 -> gnu.trove.map.hash.pt:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TObjectFloatHashMap this$0 -> b
    boolean execute(java.lang.Object,float) -> a
gnu.trove.map.hash.TObjectFloatHashMap$KeyView -> gnu.trove.map.hash.pu:
    gnu.trove.map.hash.TObjectFloatHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
gnu.trove.map.hash.TObjectFloatHashMap$MapBackedView -> gnu.trove.map.hash.pv:
    gnu.trove.map.hash.TObjectFloatHashMap this$0 -> b
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.hash.TObjectFloatHashMap$TFloatValueCollection -> gnu.trove.map.hash.pw:
    gnu.trove.map.hash.TObjectFloatHashMap this$0 -> a
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TObjectFloatHashMap$TFloatValueCollection$1 -> gnu.trove.map.hash.px:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TObjectFloatHashMap$TFloatValueCollection this$1 -> b
    boolean execute(float) -> a
gnu.trove.map.hash.TObjectFloatHashMap$TFloatValueCollection$TObjectFloatValueHashIterator -> gnu.trove.map.hash.py:
    gnu.trove.impl.hash.THash _hash -> a
    int _expectedSize -> b
    int _index -> c
    gnu.trove.map.hash.TObjectFloatHashMap$TFloatValueCollection this$1 -> d
    boolean hasNext() -> hasNext
    float next() -> a
    void remove() -> remove
    void moveToNextIndex() -> b
    int nextIndex() -> c
gnu.trove.map.hash.TObjectFloatHashMap$TObjectFloatHashIterator -> gnu.trove.map.hash.pz:
    gnu.trove.map.hash.TObjectFloatHashMap _map -> f
    gnu.trove.map.hash.TObjectFloatHashMap this$0 -> e
    void advance() -> c
    java.lang.Object key() -> a
    float value() -> z_
gnu.trove.map.hash.TObjectIntHashMap -> gnu.trove.map.hash.TObjectIntHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TObjectIntProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    int[] _values -> _values
    int no_entry_value -> no_entry_value
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    int getNoEntryValue() -> getNoEntryValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(int) -> containsValue
    int get(java.lang.Object) -> get
    int put(java.lang.Object,int) -> put
    int putIfAbsent(java.lang.Object,int) -> putIfAbsent
    int doPut(int,int) -> a
    int remove(java.lang.Object) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectIntMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    gnu.trove.iterator.TObjectIntIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,int) -> adjustValue
    int adjustOrPutValue(java.lang.Object,int,int) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectIntProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TObjectIntProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$100(gnu.trove.map.hash.TObjectIntHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TObjectIntHashMap) -> access$200
gnu.trove.map.hash.TObjectIntHashMap$1 -> gnu.trove.map.hash.qa:
    gnu.trove.map.hash.TObjectIntHashMap this$0 -> a
    boolean execute(java.lang.Object,int) -> a
gnu.trove.map.hash.TObjectIntHashMap$2 -> gnu.trove.map.hash.qb:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TObjectIntHashMap this$0 -> b
    boolean execute(java.lang.Object,int) -> a
gnu.trove.map.hash.TObjectIntHashMap$KeyView -> gnu.trove.map.hash.qc:
    gnu.trove.map.hash.TObjectIntHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
gnu.trove.map.hash.TObjectIntHashMap$MapBackedView -> gnu.trove.map.hash.qd:
    gnu.trove.map.hash.TObjectIntHashMap this$0 -> b
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.hash.TObjectIntHashMap$TIntValueCollection -> gnu.trove.map.hash.qe:
    gnu.trove.map.hash.TObjectIntHashMap this$0 -> a
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TObjectIntHashMap$TIntValueCollection$1 -> gnu.trove.map.hash.qf:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TObjectIntHashMap$TIntValueCollection this$1 -> b
    boolean execute(int) -> a
gnu.trove.map.hash.TObjectIntHashMap$TIntValueCollection$TObjectIntValueHashIterator -> gnu.trove.map.hash.qg:
    gnu.trove.impl.hash.THash _hash -> a
    int _expectedSize -> b
    int _index -> c
    gnu.trove.map.hash.TObjectIntHashMap$TIntValueCollection this$1 -> d
    boolean hasNext() -> hasNext
    int next() -> a
    void remove() -> remove
    void moveToNextIndex() -> b
    int nextIndex() -> c
gnu.trove.map.hash.TObjectIntHashMap$TObjectIntHashIterator -> gnu.trove.map.hash.qh:
    gnu.trove.map.hash.TObjectIntHashMap _map -> f
    gnu.trove.map.hash.TObjectIntHashMap this$0 -> e
    void advance() -> c
    java.lang.Object key() -> a
    int value() -> A_
gnu.trove.map.hash.TObjectLongHashMap -> gnu.trove.map.hash.TObjectLongHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TObjectLongProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    long[] _values -> _values
    long no_entry_value -> no_entry_value
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    long getNoEntryValue() -> getNoEntryValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(long) -> containsValue
    long get(java.lang.Object) -> get
    long put(java.lang.Object,long) -> put
    long putIfAbsent(java.lang.Object,long) -> putIfAbsent
    long doPut(long,int) -> a
    long remove(java.lang.Object) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectLongMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    gnu.trove.iterator.TObjectLongIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,long) -> adjustValue
    long adjustOrPutValue(java.lang.Object,long,long) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectLongProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TObjectLongProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$100(gnu.trove.map.hash.TObjectLongHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TObjectLongHashMap) -> access$200
gnu.trove.map.hash.TObjectLongHashMap$1 -> gnu.trove.map.hash.qi:
    gnu.trove.map.hash.TObjectLongHashMap this$0 -> a
    boolean execute(java.lang.Object,long) -> a
gnu.trove.map.hash.TObjectLongHashMap$2 -> gnu.trove.map.hash.qj:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TObjectLongHashMap this$0 -> b
    boolean execute(java.lang.Object,long) -> a
gnu.trove.map.hash.TObjectLongHashMap$KeyView -> gnu.trove.map.hash.qk:
    gnu.trove.map.hash.TObjectLongHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
gnu.trove.map.hash.TObjectLongHashMap$MapBackedView -> gnu.trove.map.hash.ql:
    gnu.trove.map.hash.TObjectLongHashMap this$0 -> b
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.hash.TObjectLongHashMap$TLongValueCollection -> gnu.trove.map.hash.qm:
    gnu.trove.map.hash.TObjectLongHashMap this$0 -> a
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TObjectLongHashMap$TLongValueCollection$1 -> gnu.trove.map.hash.qn:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TObjectLongHashMap$TLongValueCollection this$1 -> b
    boolean execute(long) -> a
gnu.trove.map.hash.TObjectLongHashMap$TLongValueCollection$TObjectLongValueHashIterator -> gnu.trove.map.hash.qo:
    gnu.trove.impl.hash.THash _hash -> a
    int _expectedSize -> b
    int _index -> c
    gnu.trove.map.hash.TObjectLongHashMap$TLongValueCollection this$1 -> d
    boolean hasNext() -> hasNext
    long next() -> a
    void remove() -> remove
    void moveToNextIndex() -> b
    int nextIndex() -> c
gnu.trove.map.hash.TObjectLongHashMap$TObjectLongHashIterator -> gnu.trove.map.hash.qp:
    gnu.trove.map.hash.TObjectLongHashMap _map -> f
    gnu.trove.map.hash.TObjectLongHashMap this$0 -> e
    void advance() -> c
    java.lang.Object key() -> a
    long value() -> B_
gnu.trove.map.hash.TObjectShortHashMap -> gnu.trove.map.hash.TObjectShortHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TObjectShortProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    short[] _values -> _values
    short no_entry_value -> no_entry_value
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    short getNoEntryValue() -> getNoEntryValue
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(short) -> containsValue
    short get(java.lang.Object) -> get
    short put(java.lang.Object,short) -> put
    short putIfAbsent(java.lang.Object,short) -> putIfAbsent
    short doPut(short,int) -> a
    short remove(java.lang.Object) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TObjectShortMap) -> putAll
    void clear() -> clear
    java.util.Set keySet() -> keySet
    java.lang.Object[] keys() -> keys
    java.lang.Object[] keys(java.lang.Object[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    gnu.trove.iterator.TObjectShortIterator iterator() -> iterator
    boolean increment(java.lang.Object) -> increment
    boolean adjustValue(java.lang.Object,short) -> adjustValue
    short adjustOrPutValue(java.lang.Object,short,short) -> adjustOrPutValue
    boolean forEachKey(gnu.trove.procedure.TObjectProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TObjectShortProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TObjectShortProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$100(gnu.trove.map.hash.TObjectShortHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TObjectShortHashMap) -> access$200
gnu.trove.map.hash.TObjectShortHashMap$1 -> gnu.trove.map.hash.qq:
    gnu.trove.map.hash.TObjectShortHashMap this$0 -> a
    boolean execute(java.lang.Object,short) -> a
gnu.trove.map.hash.TObjectShortHashMap$2 -> gnu.trove.map.hash.qr:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TObjectShortHashMap this$0 -> b
    boolean execute(java.lang.Object,short) -> a
gnu.trove.map.hash.TObjectShortHashMap$KeyView -> gnu.trove.map.hash.qs:
    gnu.trove.map.hash.TObjectShortHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
gnu.trove.map.hash.TObjectShortHashMap$MapBackedView -> gnu.trove.map.hash.qt:
    gnu.trove.map.hash.TObjectShortHashMap this$0 -> b
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.hash.TObjectShortHashMap$TObjectShortHashIterator -> gnu.trove.map.hash.qu:
    gnu.trove.map.hash.TObjectShortHashMap _map -> f
    gnu.trove.map.hash.TObjectShortHashMap this$0 -> e
    void advance() -> c
    java.lang.Object key() -> a
    short value() -> C_
gnu.trove.map.hash.TObjectShortHashMap$TShortValueCollection -> gnu.trove.map.hash.qv:
    gnu.trove.map.hash.TObjectShortHashMap this$0 -> a
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TObjectShortHashMap$TShortValueCollection$1 -> gnu.trove.map.hash.qw:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TObjectShortHashMap$TShortValueCollection this$1 -> b
    boolean execute(short) -> a
gnu.trove.map.hash.TObjectShortHashMap$TShortValueCollection$TObjectShortValueHashIterator -> gnu.trove.map.hash.qx:
    gnu.trove.impl.hash.THash _hash -> a
    int _expectedSize -> b
    int _index -> c
    gnu.trove.map.hash.TObjectShortHashMap$TShortValueCollection this$1 -> d
    boolean hasNext() -> hasNext
    short next() -> a
    void remove() -> remove
    void moveToNextIndex() -> b
    int nextIndex() -> c
gnu.trove.map.hash.TShortByteHashMap -> gnu.trove.map.hash.TShortByteHashMap:
    long serialVersionUID -> serialVersionUID
    byte[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    byte put(short,byte) -> put
    byte putIfAbsent(short,byte) -> putIfAbsent
    byte doPut(short,byte,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortByteMap) -> putAll
    byte get(short) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    byte remove(short) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TByteCollection valueCollection() -> valueCollection
    byte[] values() -> values
    byte[] values(byte[]) -> values
    boolean containsValue(byte) -> containsValue
    boolean containsKey(short) -> containsKey
    gnu.trove.iterator.TShortByteIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TByteProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortByteProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TByteFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortByteProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,byte) -> adjustValue
    byte adjustOrPutValue(short,byte,byte) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    short access$000(gnu.trove.map.hash.TShortByteHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TShortByteHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TShortByteHashMap) -> access$200
    byte access$300(gnu.trove.map.hash.TShortByteHashMap) -> access$300
    byte access$400(gnu.trove.map.hash.TShortByteHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TShortByteHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TShortByteHashMap) -> access$600
gnu.trove.map.hash.TShortByteHashMap$1 -> gnu.trove.map.hash.qy:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortByteHashMap this$0 -> b
    boolean execute(short,byte) -> a
gnu.trove.map.hash.TShortByteHashMap$TKeyView -> gnu.trove.map.hash.qz:
    gnu.trove.map.hash.TShortByteHashMap this$0 -> a
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TShortByteHashMap$TKeyView$1 -> gnu.trove.map.hash.ra:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortByteHashMap$TKeyView this$1 -> b
    boolean execute(short) -> a
gnu.trove.map.hash.TShortByteHashMap$TShortByteHashIterator -> gnu.trove.map.hash.rb:
    gnu.trove.map.hash.TShortByteHashMap this$0 -> d
    void advance() -> c
    short key() -> a
    byte value() -> aA_
    void remove() -> remove
gnu.trove.map.hash.TShortByteHashMap$TShortByteKeyHashIterator -> gnu.trove.map.hash.rc:
    gnu.trove.map.hash.TShortByteHashMap this$0 -> d
    short next() -> a
    void remove() -> remove
gnu.trove.map.hash.TShortByteHashMap$TShortByteValueHashIterator -> gnu.trove.map.hash.rd:
    gnu.trove.map.hash.TShortByteHashMap this$0 -> d
    byte next() -> a
    void remove() -> remove
gnu.trove.map.hash.TShortByteHashMap$TValueView -> gnu.trove.map.hash.re:
    gnu.trove.map.hash.TShortByteHashMap this$0 -> a
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(byte) -> contains
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TByteProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TShortByteHashMap$TValueView$1 -> gnu.trove.map.hash.rf:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortByteHashMap$TValueView this$1 -> b
    boolean execute(byte) -> a
gnu.trove.map.hash.TShortCharHashMap -> gnu.trove.map.hash.TShortCharHashMap:
    long serialVersionUID -> serialVersionUID
    char[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    char put(short,char) -> put
    char putIfAbsent(short,char) -> putIfAbsent
    char doPut(short,char,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortCharMap) -> putAll
    char get(short) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    char remove(short) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TCharCollection valueCollection() -> valueCollection
    char[] values() -> values
    char[] values(char[]) -> values
    boolean containsValue(char) -> containsValue
    boolean containsKey(short) -> containsKey
    gnu.trove.iterator.TShortCharIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TCharProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortCharProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TCharFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortCharProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,char) -> adjustValue
    char adjustOrPutValue(short,char,char) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    short access$000(gnu.trove.map.hash.TShortCharHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TShortCharHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TShortCharHashMap) -> access$200
    char access$300(gnu.trove.map.hash.TShortCharHashMap) -> access$300
    char access$400(gnu.trove.map.hash.TShortCharHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TShortCharHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TShortCharHashMap) -> access$600
gnu.trove.map.hash.TShortCharHashMap$1 -> gnu.trove.map.hash.rg:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortCharHashMap this$0 -> b
    boolean execute(short,char) -> a
gnu.trove.map.hash.TShortCharHashMap$TKeyView -> gnu.trove.map.hash.rh:
    gnu.trove.map.hash.TShortCharHashMap this$0 -> a
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TShortCharHashMap$TKeyView$1 -> gnu.trove.map.hash.ri:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortCharHashMap$TKeyView this$1 -> b
    boolean execute(short) -> a
gnu.trove.map.hash.TShortCharHashMap$TShortCharHashIterator -> gnu.trove.map.hash.rj:
    gnu.trove.map.hash.TShortCharHashMap this$0 -> d
    void advance() -> c
    short key() -> a
    char value() -> aB_
    void remove() -> remove
gnu.trove.map.hash.TShortCharHashMap$TShortCharKeyHashIterator -> gnu.trove.map.hash.rk:
    gnu.trove.map.hash.TShortCharHashMap this$0 -> d
    short next() -> a
    void remove() -> remove
gnu.trove.map.hash.TShortCharHashMap$TShortCharValueHashIterator -> gnu.trove.map.hash.rl:
    gnu.trove.map.hash.TShortCharHashMap this$0 -> d
    char next() -> a
    void remove() -> remove
gnu.trove.map.hash.TShortCharHashMap$TValueView -> gnu.trove.map.hash.rm:
    gnu.trove.map.hash.TShortCharHashMap this$0 -> a
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(char) -> contains
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TCharProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TShortCharHashMap$TValueView$1 -> gnu.trove.map.hash.rn:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortCharHashMap$TValueView this$1 -> b
    boolean execute(char) -> a
gnu.trove.map.hash.TShortDoubleHashMap -> gnu.trove.map.hash.TShortDoubleHashMap:
    long serialVersionUID -> serialVersionUID
    double[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    double put(short,double) -> put
    double putIfAbsent(short,double) -> putIfAbsent
    double doPut(short,double,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortDoubleMap) -> putAll
    double get(short) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    double remove(short) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TDoubleCollection valueCollection() -> valueCollection
    double[] values() -> values
    double[] values(double[]) -> values
    boolean containsValue(double) -> containsValue
    boolean containsKey(short) -> containsKey
    gnu.trove.iterator.TShortDoubleIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TDoubleProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortDoubleProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TDoubleFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortDoubleProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,double) -> adjustValue
    double adjustOrPutValue(short,double,double) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    short access$000(gnu.trove.map.hash.TShortDoubleHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TShortDoubleHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TShortDoubleHashMap) -> access$200
    double access$300(gnu.trove.map.hash.TShortDoubleHashMap) -> access$300
    double access$400(gnu.trove.map.hash.TShortDoubleHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TShortDoubleHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TShortDoubleHashMap) -> access$600
gnu.trove.map.hash.TShortDoubleHashMap$1 -> gnu.trove.map.hash.ro:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortDoubleHashMap this$0 -> b
    boolean execute(short,double) -> a
gnu.trove.map.hash.TShortDoubleHashMap$TKeyView -> gnu.trove.map.hash.rp:
    gnu.trove.map.hash.TShortDoubleHashMap this$0 -> a
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TShortDoubleHashMap$TKeyView$1 -> gnu.trove.map.hash.rq:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortDoubleHashMap$TKeyView this$1 -> b
    boolean execute(short) -> a
gnu.trove.map.hash.TShortDoubleHashMap$TShortDoubleHashIterator -> gnu.trove.map.hash.rr:
    gnu.trove.map.hash.TShortDoubleHashMap this$0 -> d
    void advance() -> c
    short key() -> a
    double value() -> aC_
    void remove() -> remove
gnu.trove.map.hash.TShortDoubleHashMap$TShortDoubleKeyHashIterator -> gnu.trove.map.hash.rs:
    gnu.trove.map.hash.TShortDoubleHashMap this$0 -> d
    short next() -> a
    void remove() -> remove
gnu.trove.map.hash.TShortDoubleHashMap$TShortDoubleValueHashIterator -> gnu.trove.map.hash.rt:
    gnu.trove.map.hash.TShortDoubleHashMap this$0 -> d
    double next() -> a
    void remove() -> remove
gnu.trove.map.hash.TShortDoubleHashMap$TValueView -> gnu.trove.map.hash.ru:
    gnu.trove.map.hash.TShortDoubleHashMap this$0 -> a
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(double) -> contains
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TDoubleProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TShortDoubleHashMap$TValueView$1 -> gnu.trove.map.hash.rv:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortDoubleHashMap$TValueView this$1 -> b
    boolean execute(double) -> a
gnu.trove.map.hash.TShortFloatHashMap -> gnu.trove.map.hash.TShortFloatHashMap:
    long serialVersionUID -> serialVersionUID
    float[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    float put(short,float) -> put
    float putIfAbsent(short,float) -> putIfAbsent
    float doPut(short,float,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortFloatMap) -> putAll
    float get(short) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    float remove(short) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TFloatCollection valueCollection() -> valueCollection
    float[] values() -> values
    float[] values(float[]) -> values
    boolean containsValue(float) -> containsValue
    boolean containsKey(short) -> containsKey
    gnu.trove.iterator.TShortFloatIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TFloatProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortFloatProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TFloatFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortFloatProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,float) -> adjustValue
    float adjustOrPutValue(short,float,float) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    short access$000(gnu.trove.map.hash.TShortFloatHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TShortFloatHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TShortFloatHashMap) -> access$200
    float access$300(gnu.trove.map.hash.TShortFloatHashMap) -> access$300
    float access$400(gnu.trove.map.hash.TShortFloatHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TShortFloatHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TShortFloatHashMap) -> access$600
gnu.trove.map.hash.TShortFloatHashMap$1 -> gnu.trove.map.hash.rw:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortFloatHashMap this$0 -> b
    boolean execute(short,float) -> a
gnu.trove.map.hash.TShortFloatHashMap$TKeyView -> gnu.trove.map.hash.rx:
    gnu.trove.map.hash.TShortFloatHashMap this$0 -> a
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TShortFloatHashMap$TKeyView$1 -> gnu.trove.map.hash.ry:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortFloatHashMap$TKeyView this$1 -> b
    boolean execute(short) -> a
gnu.trove.map.hash.TShortFloatHashMap$TShortFloatHashIterator -> gnu.trove.map.hash.rz:
    gnu.trove.map.hash.TShortFloatHashMap this$0 -> d
    void advance() -> c
    short key() -> a
    float value() -> aD_
    void remove() -> remove
gnu.trove.map.hash.TShortFloatHashMap$TShortFloatKeyHashIterator -> gnu.trove.map.hash.sa:
    gnu.trove.map.hash.TShortFloatHashMap this$0 -> d
    short next() -> a
    void remove() -> remove
gnu.trove.map.hash.TShortFloatHashMap$TShortFloatValueHashIterator -> gnu.trove.map.hash.sb:
    gnu.trove.map.hash.TShortFloatHashMap this$0 -> d
    float next() -> a
    void remove() -> remove
gnu.trove.map.hash.TShortFloatHashMap$TValueView -> gnu.trove.map.hash.sc:
    gnu.trove.map.hash.TShortFloatHashMap this$0 -> a
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(float) -> contains
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TFloatProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TShortFloatHashMap$TValueView$1 -> gnu.trove.map.hash.sd:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortFloatHashMap$TValueView this$1 -> b
    boolean execute(float) -> a
gnu.trove.map.hash.TShortIntHashMap -> gnu.trove.map.hash.TShortIntHashMap:
    long serialVersionUID -> serialVersionUID
    int[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    int put(short,int) -> put
    int putIfAbsent(short,int) -> putIfAbsent
    int doPut(short,int,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortIntMap) -> putAll
    int get(short) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    int remove(short) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TIntCollection valueCollection() -> valueCollection
    int[] values() -> values
    int[] values(int[]) -> values
    boolean containsValue(int) -> containsValue
    boolean containsKey(short) -> containsKey
    gnu.trove.iterator.TShortIntIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TIntProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortIntProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TIntFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortIntProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,int) -> adjustValue
    int adjustOrPutValue(short,int,int) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    short access$000(gnu.trove.map.hash.TShortIntHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TShortIntHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TShortIntHashMap) -> access$200
    int access$300(gnu.trove.map.hash.TShortIntHashMap) -> access$300
    int access$400(gnu.trove.map.hash.TShortIntHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TShortIntHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TShortIntHashMap) -> access$600
gnu.trove.map.hash.TShortIntHashMap$1 -> gnu.trove.map.hash.se:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortIntHashMap this$0 -> b
    boolean execute(short,int) -> a
gnu.trove.map.hash.TShortIntHashMap$TKeyView -> gnu.trove.map.hash.sf:
    gnu.trove.map.hash.TShortIntHashMap this$0 -> a
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TShortIntHashMap$TKeyView$1 -> gnu.trove.map.hash.sg:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortIntHashMap$TKeyView this$1 -> b
    boolean execute(short) -> a
gnu.trove.map.hash.TShortIntHashMap$TShortIntHashIterator -> gnu.trove.map.hash.sh:
    gnu.trove.map.hash.TShortIntHashMap this$0 -> d
    void advance() -> c
    short key() -> a
    int value() -> aE_
    void remove() -> remove
gnu.trove.map.hash.TShortIntHashMap$TShortIntKeyHashIterator -> gnu.trove.map.hash.si:
    gnu.trove.map.hash.TShortIntHashMap this$0 -> d
    short next() -> a
    void remove() -> remove
gnu.trove.map.hash.TShortIntHashMap$TShortIntValueHashIterator -> gnu.trove.map.hash.sj:
    gnu.trove.map.hash.TShortIntHashMap this$0 -> d
    int next() -> a
    void remove() -> remove
gnu.trove.map.hash.TShortIntHashMap$TValueView -> gnu.trove.map.hash.sk:
    gnu.trove.map.hash.TShortIntHashMap this$0 -> a
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(int) -> contains
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TIntProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TShortIntHashMap$TValueView$1 -> gnu.trove.map.hash.sl:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortIntHashMap$TValueView this$1 -> b
    boolean execute(int) -> a
gnu.trove.map.hash.TShortLongHashMap -> gnu.trove.map.hash.TShortLongHashMap:
    long serialVersionUID -> serialVersionUID
    long[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    long put(short,long) -> put
    long putIfAbsent(short,long) -> putIfAbsent
    long doPut(short,long,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortLongMap) -> putAll
    long get(short) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    long remove(short) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TLongCollection valueCollection() -> valueCollection
    long[] values() -> values
    long[] values(long[]) -> values
    boolean containsValue(long) -> containsValue
    boolean containsKey(short) -> containsKey
    gnu.trove.iterator.TShortLongIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TLongProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortLongProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TLongFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortLongProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,long) -> adjustValue
    long adjustOrPutValue(short,long,long) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    short access$000(gnu.trove.map.hash.TShortLongHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TShortLongHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TShortLongHashMap) -> access$200
    long access$300(gnu.trove.map.hash.TShortLongHashMap) -> access$300
    long access$400(gnu.trove.map.hash.TShortLongHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TShortLongHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TShortLongHashMap) -> access$600
gnu.trove.map.hash.TShortLongHashMap$1 -> gnu.trove.map.hash.sm:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortLongHashMap this$0 -> b
    boolean execute(short,long) -> a
gnu.trove.map.hash.TShortLongHashMap$TKeyView -> gnu.trove.map.hash.sn:
    gnu.trove.map.hash.TShortLongHashMap this$0 -> a
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TShortLongHashMap$TKeyView$1 -> gnu.trove.map.hash.so:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortLongHashMap$TKeyView this$1 -> b
    boolean execute(short) -> a
gnu.trove.map.hash.TShortLongHashMap$TShortLongHashIterator -> gnu.trove.map.hash.sp:
    gnu.trove.map.hash.TShortLongHashMap this$0 -> d
    void advance() -> c
    short key() -> a
    long value() -> aF_
    void remove() -> remove
gnu.trove.map.hash.TShortLongHashMap$TShortLongKeyHashIterator -> gnu.trove.map.hash.sq:
    gnu.trove.map.hash.TShortLongHashMap this$0 -> d
    short next() -> a
    void remove() -> remove
gnu.trove.map.hash.TShortLongHashMap$TShortLongValueHashIterator -> gnu.trove.map.hash.sr:
    gnu.trove.map.hash.TShortLongHashMap this$0 -> d
    long next() -> a
    void remove() -> remove
gnu.trove.map.hash.TShortLongHashMap$TValueView -> gnu.trove.map.hash.ss:
    gnu.trove.map.hash.TShortLongHashMap this$0 -> a
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(long) -> contains
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TLongProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TShortLongHashMap$TValueView$1 -> gnu.trove.map.hash.st:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortLongHashMap$TValueView this$1 -> b
    boolean execute(long) -> a
gnu.trove.map.hash.TShortObjectHashMap -> gnu.trove.map.hash.TShortObjectHashMap:
    long serialVersionUID -> serialVersionUID
    gnu.trove.procedure.TShortObjectProcedure PUT_ALL_PROC -> PUT_ALL_PROC
    java.lang.Object[] _values -> _values
    short no_entry_key -> no_entry_key
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    short getNoEntryKey() -> getNoEntryKey
    boolean containsKey(short) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(short) -> get
    java.lang.Object put(short,java.lang.Object) -> put
    java.lang.Object putIfAbsent(short,java.lang.Object) -> putIfAbsent
    java.lang.Object doPut(java.lang.Object,int) -> a
    java.lang.Object remove(short) -> remove
    void removeAt(int) -> removeAt
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortObjectMap) -> putAll
    void clear() -> clear
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    java.util.Collection valueCollection() -> valueCollection
    java.lang.Object[] values() -> values
    java.lang.Object[] values(java.lang.Object[]) -> values
    gnu.trove.iterator.TShortObjectIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TObjectProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortObjectProcedure) -> forEachEntry
    boolean retainEntries(gnu.trove.procedure.TShortObjectProcedure) -> retainEntries
    void transformValues(gnu.trove.function.TObjectFunction) -> transformValues
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.lang.String toString() -> toString
    int access$000(gnu.trove.map.hash.TShortObjectHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TShortObjectHashMap) -> access$100
gnu.trove.map.hash.TShortObjectHashMap$1 -> gnu.trove.map.hash.su:
    gnu.trove.map.hash.TShortObjectHashMap this$0 -> a
    boolean execute(short,java.lang.Object) -> a
gnu.trove.map.hash.TShortObjectHashMap$2 -> gnu.trove.map.hash.sv:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortObjectHashMap this$0 -> b
    boolean execute(short,java.lang.Object) -> a
gnu.trove.map.hash.TShortObjectHashMap$KeyView -> gnu.trove.map.hash.sw:
    gnu.trove.map.hash.TShortObjectHashMap this$0 -> a
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TShortObjectHashMap$KeyView$TShortHashIterator -> gnu.trove.map.hash.sx:
    gnu.trove.impl.hash.TShortHash _hash -> e
    gnu.trove.map.hash.TShortObjectHashMap$KeyView this$1 -> d
    short next() -> a
gnu.trove.map.hash.TShortObjectHashMap$MapBackedView -> gnu.trove.map.hash.sy:
    gnu.trove.map.hash.TShortObjectHashMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    boolean removeElement(java.lang.Object) -> a
    boolean containsElement(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean isEmpty() -> isEmpty
    boolean addAll(java.util.Collection) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
gnu.trove.map.hash.TShortObjectHashMap$TShortObjectHashIterator -> gnu.trove.map.hash.sz:
    gnu.trove.map.hash.TShortObjectHashMap _map -> e
    gnu.trove.map.hash.TShortObjectHashMap this$0 -> d
    void advance() -> c
    short key() -> a
    java.lang.Object value() -> aG_
gnu.trove.map.hash.TShortObjectHashMap$ValueView -> gnu.trove.map.hash.ta:
    gnu.trove.map.hash.TShortObjectHashMap this$0 -> b
    java.util.Iterator iterator() -> iterator
    boolean containsElement(java.lang.Object) -> b
    boolean removeElement(java.lang.Object) -> a
gnu.trove.map.hash.TShortObjectHashMap$ValueView$1 -> gnu.trove.map.hash.tb:
    gnu.trove.map.hash.TShortObjectHashMap$ValueView this$1 -> d
gnu.trove.map.hash.TShortObjectHashMap$ValueView$TShortObjectValueHashIterator -> gnu.trove.map.hash.tc:
    gnu.trove.map.hash.TShortObjectHashMap _map -> e
    gnu.trove.map.hash.TShortObjectHashMap$ValueView this$1 -> f
    java.lang.Object next() -> next
gnu.trove.map.hash.TShortShortHashMap -> gnu.trove.map.hash.TShortShortHashMap:
    long serialVersionUID -> serialVersionUID
    short[] _values -> _values
    int setUp(int) -> setUp
    void rehash(int) -> rehash
    short put(short,short) -> put
    short putIfAbsent(short,short) -> putIfAbsent
    short doPut(short,short,int) -> a
    void putAll(java.util.Map) -> putAll
    void putAll(gnu.trove.map.TShortShortMap) -> putAll
    short get(short) -> get
    void clear() -> clear
    boolean isEmpty() -> isEmpty
    short remove(short) -> remove
    void removeAt(int) -> removeAt
    gnu.trove.set.TShortSet keySet() -> keySet
    short[] keys() -> keys
    short[] keys(short[]) -> keys
    gnu.trove.TShortCollection valueCollection() -> valueCollection
    short[] values() -> values
    short[] values(short[]) -> values
    boolean containsValue(short) -> containsValue
    boolean containsKey(short) -> containsKey
    gnu.trove.iterator.TShortShortIterator iterator() -> iterator
    boolean forEachKey(gnu.trove.procedure.TShortProcedure) -> forEachKey
    boolean forEachValue(gnu.trove.procedure.TShortProcedure) -> forEachValue
    boolean forEachEntry(gnu.trove.procedure.TShortShortProcedure) -> forEachEntry
    void transformValues(gnu.trove.function.TShortFunction) -> transformValues
    boolean retainEntries(gnu.trove.procedure.TShortShortProcedure) -> retainEntries
    boolean increment(short) -> increment
    boolean adjustValue(short,short) -> adjustValue
    short adjustOrPutValue(short,short,short) -> adjustOrPutValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    short access$000(gnu.trove.map.hash.TShortShortHashMap) -> access$000
    int access$100(gnu.trove.map.hash.TShortShortHashMap) -> access$100
    int access$200(gnu.trove.map.hash.TShortShortHashMap) -> access$200
    short access$300(gnu.trove.map.hash.TShortShortHashMap) -> access$300
    short access$400(gnu.trove.map.hash.TShortShortHashMap) -> access$400
    int access$500(gnu.trove.map.hash.TShortShortHashMap) -> access$500
    int access$600(gnu.trove.map.hash.TShortShortHashMap) -> access$600
gnu.trove.map.hash.TShortShortHashMap$1 -> gnu.trove.map.hash.td:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortShortHashMap this$0 -> b
    boolean execute(short,short) -> a
gnu.trove.map.hash.TShortShortHashMap$TKeyView -> gnu.trove.map.hash.te:
    gnu.trove.map.hash.TShortShortHashMap this$0 -> a
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
gnu.trove.map.hash.TShortShortHashMap$TKeyView$1 -> gnu.trove.map.hash.tf:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortShortHashMap$TKeyView this$1 -> b
    boolean execute(short) -> a
gnu.trove.map.hash.TShortShortHashMap$TShortShortHashIterator -> gnu.trove.map.hash.tg:
    gnu.trove.map.hash.TShortShortHashMap this$0 -> d
    void advance() -> c
    short key() -> a
    short value() -> aH_
    void remove() -> remove
gnu.trove.map.hash.TShortShortHashMap$TShortShortKeyHashIterator -> gnu.trove.map.hash.th:
    gnu.trove.map.hash.TShortShortHashMap this$0 -> d
    short next() -> a
    void remove() -> remove
gnu.trove.map.hash.TShortShortHashMap$TShortShortValueHashIterator -> gnu.trove.map.hash.ti:
    gnu.trove.map.hash.TShortShortHashMap this$0 -> d
    short next() -> a
    void remove() -> remove
gnu.trove.map.hash.TShortShortHashMap$TValueView -> gnu.trove.map.hash.tj:
    gnu.trove.map.hash.TShortShortHashMap this$0 -> a
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short getNoEntryValue() -> getNoEntryValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean contains(short) -> contains
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    boolean forEach(gnu.trove.procedure.TShortProcedure) -> forEach
    java.lang.String toString() -> toString
gnu.trove.map.hash.TShortShortHashMap$TValueView$1 -> gnu.trove.map.hash.tk:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.map.hash.TShortShortHashMap$TValueView this$1 -> b
    boolean execute(short) -> a
gnu.trove.procedure.TByteByteProcedure -> gnu.trove.c.a:
    boolean execute(byte,byte) -> a
gnu.trove.procedure.TByteCharProcedure -> gnu.trove.c.b:
    boolean execute(byte,char) -> a
gnu.trove.procedure.TByteDoubleProcedure -> gnu.trove.c.c:
    boolean execute(byte,double) -> a
gnu.trove.procedure.TByteFloatProcedure -> gnu.trove.c.d:
    boolean execute(byte,float) -> a
gnu.trove.procedure.TByteIntProcedure -> gnu.trove.c.e:
    boolean execute(byte,int) -> a
gnu.trove.procedure.TByteLongProcedure -> gnu.trove.c.f:
    boolean execute(byte,long) -> a
gnu.trove.procedure.TByteObjectProcedure -> gnu.trove.c.g:
    boolean execute(byte,java.lang.Object) -> a
gnu.trove.procedure.TByteProcedure -> gnu.trove.c.h:
    boolean execute(byte) -> a
gnu.trove.procedure.TByteShortProcedure -> gnu.trove.c.i:
    boolean execute(byte,short) -> a
gnu.trove.procedure.TCharByteProcedure -> gnu.trove.c.j:
    boolean execute(char,byte) -> a
gnu.trove.procedure.TCharCharProcedure -> gnu.trove.c.k:
    boolean execute(char,char) -> a
gnu.trove.procedure.TCharDoubleProcedure -> gnu.trove.c.l:
    boolean execute(char,double) -> a
gnu.trove.procedure.TCharFloatProcedure -> gnu.trove.c.m:
    boolean execute(char,float) -> a
gnu.trove.procedure.TCharIntProcedure -> gnu.trove.c.n:
    boolean execute(char,int) -> a
gnu.trove.procedure.TCharLongProcedure -> gnu.trove.c.o:
    boolean execute(char,long) -> a
gnu.trove.procedure.TCharObjectProcedure -> gnu.trove.c.p:
    boolean execute(char,java.lang.Object) -> a
gnu.trove.procedure.TCharProcedure -> gnu.trove.c.q:
    boolean execute(char) -> a
gnu.trove.procedure.TCharShortProcedure -> gnu.trove.c.r:
    boolean execute(char,short) -> a
gnu.trove.procedure.TDoubleByteProcedure -> gnu.trove.c.s:
    boolean execute(double,byte) -> a
gnu.trove.procedure.TDoubleCharProcedure -> gnu.trove.c.t:
    boolean execute(double,char) -> a
gnu.trove.procedure.TDoubleDoubleProcedure -> gnu.trove.c.u:
    boolean execute(double,double) -> a
gnu.trove.procedure.TDoubleFloatProcedure -> gnu.trove.c.v:
    boolean execute(double,float) -> a
gnu.trove.procedure.TDoubleIntProcedure -> gnu.trove.c.w:
    boolean execute(double,int) -> a
gnu.trove.procedure.TDoubleLongProcedure -> gnu.trove.c.x:
    boolean execute(double,long) -> a
gnu.trove.procedure.TDoubleObjectProcedure -> gnu.trove.c.y:
    boolean execute(double,java.lang.Object) -> a
gnu.trove.procedure.TDoubleProcedure -> gnu.trove.c.z:
    boolean execute(double) -> a
gnu.trove.procedure.TDoubleShortProcedure -> gnu.trove.c.aa:
    boolean execute(double,short) -> a
gnu.trove.procedure.TFloatByteProcedure -> gnu.trove.c.ab:
    boolean execute(float,byte) -> a
gnu.trove.procedure.TFloatCharProcedure -> gnu.trove.c.ac:
    boolean execute(float,char) -> a
gnu.trove.procedure.TFloatDoubleProcedure -> gnu.trove.c.ad:
    boolean execute(float,double) -> a
gnu.trove.procedure.TFloatFloatProcedure -> gnu.trove.c.ae:
    boolean execute(float,float) -> a
gnu.trove.procedure.TFloatIntProcedure -> gnu.trove.c.af:
    boolean execute(float,int) -> a
gnu.trove.procedure.TFloatLongProcedure -> gnu.trove.c.ag:
    boolean execute(float,long) -> a
gnu.trove.procedure.TFloatObjectProcedure -> gnu.trove.c.ah:
    boolean execute(float,java.lang.Object) -> a
gnu.trove.procedure.TFloatProcedure -> gnu.trove.c.ai:
    boolean execute(float) -> a
gnu.trove.procedure.TFloatShortProcedure -> gnu.trove.c.aj:
    boolean execute(float,short) -> a
gnu.trove.procedure.TIntByteProcedure -> gnu.trove.c.ak:
    boolean execute(int,byte) -> a
gnu.trove.procedure.TIntCharProcedure -> gnu.trove.c.al:
    boolean execute(int,char) -> a
gnu.trove.procedure.TIntDoubleProcedure -> gnu.trove.c.am:
    boolean execute(int,double) -> a
gnu.trove.procedure.TIntFloatProcedure -> gnu.trove.c.an:
    boolean execute(int,float) -> a
gnu.trove.procedure.TIntIntProcedure -> gnu.trove.c.ao:
    boolean execute(int,int) -> a
gnu.trove.procedure.TIntLongProcedure -> gnu.trove.c.ap:
    boolean execute(int,long) -> a
gnu.trove.procedure.TIntObjectProcedure -> gnu.trove.c.aq:
    boolean execute(int,java.lang.Object) -> a
gnu.trove.procedure.TIntProcedure -> gnu.trove.c.ar:
    boolean execute(int) -> a
gnu.trove.procedure.TIntShortProcedure -> gnu.trove.c.as:
    boolean execute(int,short) -> a
gnu.trove.procedure.TLongByteProcedure -> gnu.trove.c.at:
    boolean execute(long,byte) -> a
gnu.trove.procedure.TLongCharProcedure -> gnu.trove.c.au:
    boolean execute(long,char) -> a
gnu.trove.procedure.TLongDoubleProcedure -> gnu.trove.c.av:
    boolean execute(long,double) -> a
gnu.trove.procedure.TLongFloatProcedure -> gnu.trove.c.aw:
    boolean execute(long,float) -> a
gnu.trove.procedure.TLongIntProcedure -> gnu.trove.c.ax:
    boolean execute(long,int) -> a
gnu.trove.procedure.TLongLongProcedure -> gnu.trove.c.ay:
    boolean execute(long,long) -> a
gnu.trove.procedure.TLongObjectProcedure -> gnu.trove.c.az:
    boolean execute(long,java.lang.Object) -> a
gnu.trove.procedure.TLongProcedure -> gnu.trove.c.ba:
    boolean execute(long) -> a
gnu.trove.procedure.TLongShortProcedure -> gnu.trove.c.bb:
    boolean execute(long,short) -> a
gnu.trove.procedure.TObjectByteProcedure -> gnu.trove.c.bc:
    boolean execute(java.lang.Object,byte) -> a
gnu.trove.procedure.TObjectCharProcedure -> gnu.trove.c.bd:
    boolean execute(java.lang.Object,char) -> a
gnu.trove.procedure.TObjectDoubleProcedure -> gnu.trove.c.be:
    boolean execute(java.lang.Object,double) -> a
gnu.trove.procedure.TObjectFloatProcedure -> gnu.trove.c.bf:
    boolean execute(java.lang.Object,float) -> a
gnu.trove.procedure.TObjectIntProcedure -> gnu.trove.c.bg:
    boolean execute(java.lang.Object,int) -> a
gnu.trove.procedure.TObjectLongProcedure -> gnu.trove.c.bh:
    boolean execute(java.lang.Object,long) -> a
gnu.trove.procedure.TObjectObjectProcedure -> gnu.trove.c.bi:
    boolean execute(java.lang.Object,java.lang.Object) -> a
gnu.trove.procedure.TObjectProcedure -> gnu.trove.c.bj:
    boolean execute(java.lang.Object) -> a
gnu.trove.procedure.TObjectShortProcedure -> gnu.trove.c.bk:
    boolean execute(java.lang.Object,short) -> a
gnu.trove.procedure.TShortByteProcedure -> gnu.trove.c.bl:
    boolean execute(short,byte) -> a
gnu.trove.procedure.TShortCharProcedure -> gnu.trove.c.bm:
    boolean execute(short,char) -> a
gnu.trove.procedure.TShortDoubleProcedure -> gnu.trove.c.bn:
    boolean execute(short,double) -> a
gnu.trove.procedure.TShortFloatProcedure -> gnu.trove.c.bo:
    boolean execute(short,float) -> a
gnu.trove.procedure.TShortIntProcedure -> gnu.trove.c.bp:
    boolean execute(short,int) -> a
gnu.trove.procedure.TShortLongProcedure -> gnu.trove.c.bq:
    boolean execute(short,long) -> a
gnu.trove.procedure.TShortObjectProcedure -> gnu.trove.c.br:
    boolean execute(short,java.lang.Object) -> a
gnu.trove.procedure.TShortProcedure -> gnu.trove.c.bs:
    boolean execute(short) -> a
gnu.trove.procedure.TShortShortProcedure -> gnu.trove.c.bt:
    boolean execute(short,short) -> a
gnu.trove.procedure.array.ToObjectArrayProceedure -> gnu.trove.c.a.a:
    java.lang.Object[] target -> a
    int pos -> b
    boolean execute(java.lang.Object) -> a
gnu.trove.set.TByteSet -> gnu.trove.set.a:
    int size() -> size
    boolean contains(byte) -> contains
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    void clear() -> clear
gnu.trove.set.TCharSet -> gnu.trove.set.b:
    int size() -> size
    boolean contains(char) -> contains
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    boolean add(char) -> add
    boolean remove(char) -> remove
    void clear() -> clear
gnu.trove.set.TDoubleSet -> gnu.trove.set.c:
    int size() -> size
    boolean contains(double) -> contains
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    boolean add(double) -> add
    boolean remove(double) -> remove
    void clear() -> clear
gnu.trove.set.TFloatSet -> gnu.trove.set.d:
    int size() -> size
    boolean contains(float) -> contains
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    boolean add(float) -> add
    boolean remove(float) -> remove
    void clear() -> clear
gnu.trove.set.TIntSet -> gnu.trove.set.e:
    int size() -> size
    boolean contains(int) -> contains
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    boolean add(int) -> add
    boolean remove(int) -> remove
    void clear() -> clear
gnu.trove.set.TLongSet -> gnu.trove.set.f:
    int size() -> size
    boolean contains(long) -> contains
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    boolean add(long) -> add
    boolean remove(long) -> remove
    void clear() -> clear
gnu.trove.set.TShortSet -> gnu.trove.set.g:
    int size() -> size
    boolean contains(short) -> contains
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    boolean add(short) -> add
    boolean remove(short) -> remove
    void clear() -> clear
gnu.trove.set.hash.TByteHashSet -> gnu.trove.set.hash.TByteHashSet:
    long serialVersionUID -> serialVersionUID
    gnu.trove.iterator.TByteIterator iterator() -> iterator
    byte[] toArray() -> toArray
    byte[] toArray(byte[]) -> toArray
    boolean add(byte) -> add
    boolean remove(byte) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TByteCollection) -> containsAll
    boolean containsAll(byte[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TByteCollection) -> addAll
    boolean addAll(byte[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TByteCollection) -> retainAll
    boolean retainAll(byte[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TByteCollection) -> removeAll
    boolean removeAll(byte[]) -> removeAll
    void clear() -> clear
    void rehash(int) -> rehash
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.set.hash.TByteHashSet$TByteHashIterator -> gnu.trove.set.hash.a:
    gnu.trove.impl.hash.TByteHash _hash -> e
    gnu.trove.set.hash.TByteHashSet this$0 -> d
    byte next() -> a
gnu.trove.set.hash.TCharHashSet -> gnu.trove.set.hash.TCharHashSet:
    long serialVersionUID -> serialVersionUID
    gnu.trove.iterator.TCharIterator iterator() -> iterator
    char[] toArray() -> toArray
    char[] toArray(char[]) -> toArray
    boolean add(char) -> add
    boolean remove(char) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TCharCollection) -> containsAll
    boolean containsAll(char[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TCharCollection) -> addAll
    boolean addAll(char[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TCharCollection) -> retainAll
    boolean retainAll(char[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TCharCollection) -> removeAll
    boolean removeAll(char[]) -> removeAll
    void clear() -> clear
    void rehash(int) -> rehash
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.set.hash.TCharHashSet$TCharHashIterator -> gnu.trove.set.hash.b:
    gnu.trove.impl.hash.TCharHash _hash -> e
    gnu.trove.set.hash.TCharHashSet this$0 -> d
    char next() -> a
gnu.trove.set.hash.TCustomHashSet -> gnu.trove.set.hash.TCustomHashSet:
    long serialVersionUID -> serialVersionUID
    boolean add(java.lang.Object) -> add
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void rehash(int) -> rehash
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    gnu.trove.iterator.hash.TObjectHashIterator iterator() -> iterator
    boolean containsAll(java.util.Collection) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
    java.util.Iterator iterator() -> iterator
gnu.trove.set.hash.TCustomHashSet$1 -> gnu.trove.set.hash.c:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.set.hash.TCustomHashSet this$0 -> b
    boolean execute(java.lang.Object) -> a
gnu.trove.set.hash.TCustomHashSet$HashProcedure -> gnu.trove.set.hash.d:
    int h -> b
    gnu.trove.set.hash.TCustomHashSet this$0 -> a
    int getHashCode() -> a
    boolean execute(java.lang.Object) -> a
gnu.trove.set.hash.TDoubleHashSet -> gnu.trove.set.hash.TDoubleHashSet:
    long serialVersionUID -> serialVersionUID
    gnu.trove.iterator.TDoubleIterator iterator() -> iterator
    double[] toArray() -> toArray
    double[] toArray(double[]) -> toArray
    boolean add(double) -> add
    boolean remove(double) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TDoubleCollection) -> containsAll
    boolean containsAll(double[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TDoubleCollection) -> addAll
    boolean addAll(double[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TDoubleCollection) -> retainAll
    boolean retainAll(double[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TDoubleCollection) -> removeAll
    boolean removeAll(double[]) -> removeAll
    void clear() -> clear
    void rehash(int) -> rehash
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.set.hash.TDoubleHashSet$TDoubleHashIterator -> gnu.trove.set.hash.e:
    gnu.trove.impl.hash.TDoubleHash _hash -> e
    gnu.trove.set.hash.TDoubleHashSet this$0 -> d
    double next() -> a
gnu.trove.set.hash.TFloatHashSet -> gnu.trove.set.hash.TFloatHashSet:
    long serialVersionUID -> serialVersionUID
    gnu.trove.iterator.TFloatIterator iterator() -> iterator
    float[] toArray() -> toArray
    float[] toArray(float[]) -> toArray
    boolean add(float) -> add
    boolean remove(float) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TFloatCollection) -> containsAll
    boolean containsAll(float[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TFloatCollection) -> addAll
    boolean addAll(float[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TFloatCollection) -> retainAll
    boolean retainAll(float[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TFloatCollection) -> removeAll
    boolean removeAll(float[]) -> removeAll
    void clear() -> clear
    void rehash(int) -> rehash
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.set.hash.TFloatHashSet$TFloatHashIterator -> gnu.trove.set.hash.f:
    gnu.trove.impl.hash.TFloatHash _hash -> e
    gnu.trove.set.hash.TFloatHashSet this$0 -> d
    float next() -> a
gnu.trove.set.hash.THashSet -> gnu.trove.set.hash.THashSet:
    long serialVersionUID -> serialVersionUID
    boolean add(java.lang.Object) -> add
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void rehash(int) -> rehash
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
    gnu.trove.iterator.hash.TObjectHashIterator iterator() -> iterator
    boolean containsAll(java.util.Collection) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void writeEntries(java.io.ObjectOutput) -> writeEntries
    void readExternal(java.io.ObjectInput) -> readExternal
    java.util.Iterator iterator() -> iterator
gnu.trove.set.hash.THashSet$1 -> gnu.trove.set.hash.g:
    boolean first -> c
    java.lang.StringBuilder val$buf -> a
    gnu.trove.set.hash.THashSet this$0 -> b
    boolean execute(java.lang.Object) -> a
gnu.trove.set.hash.THashSet$HashProcedure -> gnu.trove.set.hash.h:
    int h -> b
    gnu.trove.set.hash.THashSet this$0 -> a
    int getHashCode() -> a
    boolean execute(java.lang.Object) -> a
gnu.trove.set.hash.TIntHashSet -> gnu.trove.set.hash.TIntHashSet:
    long serialVersionUID -> serialVersionUID
    gnu.trove.iterator.TIntIterator iterator() -> iterator
    int[] toArray() -> toArray
    int[] toArray(int[]) -> toArray
    boolean add(int) -> add
    boolean remove(int) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TIntCollection) -> containsAll
    boolean containsAll(int[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TIntCollection) -> addAll
    boolean addAll(int[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TIntCollection) -> retainAll
    boolean retainAll(int[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TIntCollection) -> removeAll
    boolean removeAll(int[]) -> removeAll
    void clear() -> clear
    void rehash(int) -> rehash
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.set.hash.TIntHashSet$TIntHashIterator -> gnu.trove.set.hash.i:
    gnu.trove.impl.hash.TIntHash _hash -> e
    gnu.trove.set.hash.TIntHashSet this$0 -> d
    int next() -> a
gnu.trove.set.hash.TLinkedHashSet -> gnu.trove.set.hash.TLinkedHashSet:
    gnu.trove.list.TIntList order -> order
    int setUp(int) -> setUp
    void clear() -> clear
    java.lang.String toString() -> toString
    boolean add(java.lang.Object) -> add
    void removeAt(int) -> removeAt
    void rehash(int) -> rehash
    void writeEntries(java.io.ObjectOutput) -> writeEntries
    gnu.trove.iterator.hash.TObjectHashIterator iterator() -> iterator
    boolean forEach(gnu.trove.procedure.TObjectProcedure) -> forEach
    java.util.Iterator iterator() -> iterator
gnu.trove.set.hash.TLinkedHashSet$1 -> gnu.trove.set.hash.TLinkedHashSet$1:
    gnu.trove.set.hash.TLinkedHashSet this$0 -> this$0
    void ensureCapacity(int) -> ensureCapacity
gnu.trove.set.hash.TLinkedHashSet$2 -> gnu.trove.set.hash.j:
    gnu.trove.iterator.TIntIterator localIterator -> e
    int lastIndex -> f
    gnu.trove.set.hash.TLinkedHashSet this$0 -> g
    java.lang.Object next() -> next
    boolean hasNext() -> hasNext
    void remove() -> remove
gnu.trove.set.hash.TLinkedHashSet$ForEachProcedure -> gnu.trove.set.hash.k:
    boolean changed -> a
    java.lang.Object[] set -> b
    gnu.trove.procedure.TObjectProcedure procedure -> c
    gnu.trove.set.hash.TLinkedHashSet this$0 -> d
    boolean execute(int) -> a
gnu.trove.set.hash.TLinkedHashSet$WriteProcedure -> gnu.trove.set.hash.l:
    java.io.ObjectOutput output -> a
    java.io.IOException ioException -> b
    gnu.trove.set.hash.TLinkedHashSet this$0 -> c
    java.io.IOException getIoException() -> a
    boolean execute(int) -> a
gnu.trove.set.hash.TLongHashSet -> gnu.trove.set.hash.TLongHashSet:
    long serialVersionUID -> serialVersionUID
    gnu.trove.iterator.TLongIterator iterator() -> iterator
    long[] toArray() -> toArray
    long[] toArray(long[]) -> toArray
    boolean add(long) -> add
    boolean remove(long) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TLongCollection) -> containsAll
    boolean containsAll(long[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TLongCollection) -> addAll
    boolean addAll(long[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TLongCollection) -> retainAll
    boolean retainAll(long[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TLongCollection) -> removeAll
    boolean removeAll(long[]) -> removeAll
    void clear() -> clear
    void rehash(int) -> rehash
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.set.hash.TLongHashSet$TLongHashIterator -> gnu.trove.set.hash.m:
    gnu.trove.impl.hash.TLongHash _hash -> e
    gnu.trove.set.hash.TLongHashSet this$0 -> d
    long next() -> a
gnu.trove.set.hash.TShortHashSet -> gnu.trove.set.hash.TShortHashSet:
    long serialVersionUID -> serialVersionUID
    gnu.trove.iterator.TShortIterator iterator() -> iterator
    short[] toArray() -> toArray
    short[] toArray(short[]) -> toArray
    boolean add(short) -> add
    boolean remove(short) -> remove
    boolean containsAll(java.util.Collection) -> containsAll
    boolean containsAll(gnu.trove.TShortCollection) -> containsAll
    boolean containsAll(short[]) -> containsAll
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(gnu.trove.TShortCollection) -> addAll
    boolean addAll(short[]) -> addAll
    boolean retainAll(java.util.Collection) -> retainAll
    boolean retainAll(gnu.trove.TShortCollection) -> retainAll
    boolean retainAll(short[]) -> retainAll
    boolean removeAll(java.util.Collection) -> removeAll
    boolean removeAll(gnu.trove.TShortCollection) -> removeAll
    boolean removeAll(short[]) -> removeAll
    void clear() -> clear
    void rehash(int) -> rehash
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.set.hash.TShortHashSet$TShortHashIterator -> gnu.trove.set.hash.n:
    gnu.trove.impl.hash.TShortHash _hash -> e
    gnu.trove.set.hash.TShortHashSet this$0 -> d
    short next() -> a
gnu.trove.stack.TByteStack -> gnu.trove.stack.a:
gnu.trove.stack.TCharStack -> gnu.trove.stack.b:
gnu.trove.stack.TDoubleStack -> gnu.trove.stack.c:
gnu.trove.stack.TFloatStack -> gnu.trove.stack.d:
    void push(float) -> push
    float pop() -> pop
gnu.trove.stack.TIntStack -> gnu.trove.stack.e:
gnu.trove.stack.TLongStack -> gnu.trove.stack.f:
gnu.trove.stack.TShortStack -> gnu.trove.stack.g:
gnu.trove.stack.array.TByteArrayStack -> gnu.trove.stack.array.TByteArrayStack:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.array.TByteArrayList _list -> _list
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    byte getNoEntryValue() -> getNoEntryValue
    void push(byte) -> push
    byte pop() -> pop
    byte peek() -> peek
    int size() -> size
    void clear() -> clear
    byte[] toArray() -> toArray
    void toArray(byte[]) -> toArray
    void reverse(byte[],int,int) -> a
    void swap(byte[],int,int) -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.stack.array.TCharArrayStack -> gnu.trove.stack.array.TCharArrayStack:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.array.TCharArrayList _list -> _list
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    char getNoEntryValue() -> getNoEntryValue
    void push(char) -> push
    char pop() -> pop
    char peek() -> peek
    int size() -> size
    void clear() -> clear
    char[] toArray() -> toArray
    void toArray(char[]) -> toArray
    void reverse(char[],int,int) -> a
    void swap(char[],int,int) -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.stack.array.TDoubleArrayStack -> gnu.trove.stack.array.TDoubleArrayStack:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.array.TDoubleArrayList _list -> _list
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    double getNoEntryValue() -> getNoEntryValue
    void push(double) -> push
    double pop() -> pop
    double peek() -> peek
    int size() -> size
    void clear() -> clear
    double[] toArray() -> toArray
    void toArray(double[]) -> toArray
    void reverse(double[],int,int) -> a
    void swap(double[],int,int) -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.stack.array.TFloatArrayStack -> gnu.trove.stack.array.TFloatArrayStack:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.array.TFloatArrayList _list -> _list
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    float getNoEntryValue() -> getNoEntryValue
    void push(float) -> push
    float pop() -> pop
    float peek() -> peek
    int size() -> size
    void clear() -> clear
    float[] toArray() -> toArray
    void toArray(float[]) -> toArray
    void reverse(float[],int,int) -> a
    void swap(float[],int,int) -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.stack.array.TIntArrayStack -> gnu.trove.stack.array.TIntArrayStack:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.array.TIntArrayList _list -> _list
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    int getNoEntryValue() -> getNoEntryValue
    void push(int) -> push
    int pop() -> pop
    int peek() -> peek
    int size() -> size
    void clear() -> clear
    int[] toArray() -> toArray
    void toArray(int[]) -> toArray
    void reverse(int[],int,int) -> a
    void swap(int[],int,int) -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.stack.array.TLongArrayStack -> gnu.trove.stack.array.TLongArrayStack:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.array.TLongArrayList _list -> _list
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    long getNoEntryValue() -> getNoEntryValue
    void push(long) -> push
    long pop() -> pop
    long peek() -> peek
    int size() -> size
    void clear() -> clear
    long[] toArray() -> toArray
    void toArray(long[]) -> toArray
    void reverse(long[],int,int) -> a
    void swap(long[],int,int) -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.stack.array.TShortArrayStack -> gnu.trove.stack.array.TShortArrayStack:
    long serialVersionUID -> serialVersionUID
    gnu.trove.list.array.TShortArrayList _list -> _list
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    short getNoEntryValue() -> getNoEntryValue
    void push(short) -> push
    short pop() -> pop
    short peek() -> peek
    int size() -> size
    void clear() -> clear
    short[] toArray() -> toArray
    void toArray(short[]) -> toArray
    void reverse(short[],int,int) -> a
    void swap(short[],int,int) -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    void readExternal(java.io.ObjectInput) -> readExternal
gnu.trove.strategy.HashingStrategy -> gnu.trove.strategy.HashingStrategy:
    long serialVersionUID -> serialVersionUID
    int computeHashCode(java.lang.Object) -> computeHashCode
    boolean equals(java.lang.Object,java.lang.Object) -> equals
gnu.trove.strategy.IdentityHashingStrategy -> gnu.trove.strategy.IdentityHashingStrategy:
    long serialVersionUID -> serialVersionUID
    gnu.trove.strategy.IdentityHashingStrategy INSTANCE -> INSTANCE
    int computeHashCode(java.lang.Object) -> computeHashCode
    boolean equals(java.lang.Object,java.lang.Object) -> equals
