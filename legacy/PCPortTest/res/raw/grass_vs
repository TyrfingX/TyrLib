precision mediump float; 

const mat4 DepthBias = 	   mat4(0.5, 0.0, 0.0, 0.0,
				0.0, 0.5, 0.0, 0.0,
				0.0, 0.0, 0.5, 0.0,
				0.5, 0.5, 0.5, 1.0
				);


uniform mat4 u_MVPMatrix;       // A constant representing the combined model/view/projection matrix.
uniform vec4 u_WindDir;
uniform vec4 u_Ambient;
uniform mat4 u_M;
uniform mat4 u_DepthMVP; 
 
attribute vec4 a_Position;      // Per-vertex position information we will pass in.
attribute vec2 a_TexCoordinate; // Per-vertex texture coordinate information we will pass in.

varying vec3 v_Position;        // This will be passed into the fragment shader.
varying vec2 v_TexCoordinate;   // This will be passed into the fragment shader.
varying float v_Depth;
varying vec4 v_ShadowCoord;	

// The entry point for our vertex shader.
void main()
{
	vec4 position = vec4(vec3(a_Position), 1.0);
	
	if (a_TexCoordinate.y < 0.1) {
		float offset = length(a_Position);
		vec3 move = 0.75 * sin(u_WindDir.w + offset * 10.0) * u_WindDir.xyz + 0.25 * sin(u_WindDir.w * offset) * u_WindDir.xyz;
		position += vec4(move, 0.0);
		position.z *= offset / length(position);
		position.z = mix(position.z, 0.05, u_Ambient.w);
	} 
	
	
 
    // Pass through the texture coordinate.
    v_TexCoordinate = a_TexCoordinate;
 
    // gl_Position is a special variable used to store the final position.
    // Multiply the vertex by the matrix to get the final point in normalized screen coordinates.
    gl_Position = u_MVPMatrix * position;

    mat4 DepthBiasMVP = DepthBias * u_DepthMVP;
    v_ShadowCoord = DepthBiasMVP * position;

    float distance = (u_M * position).z;
    v_Depth = mix(1.0-exp(-distance*0.15), exp(-position.z*1.2), 1.0-exp(-distance*0.2));
}
